// Code generated by ent, DO NOT EDIT.

package mitarbeiter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mitarbeiter type in the database.
	Label = "mitarbeiter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldShort holds the string denoting the short field in the database.
	FieldShort = "short"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldFocus holds the string denoting the focus field in the database.
	FieldFocus = "focus"
	// FieldMail holds the string denoting the mail field in the database.
	FieldMail = "mail"
	// FieldAbteilungId holds the string denoting the abteilungid field in the database.
	FieldAbteilungId = "abteilung_id"
	// FieldEinkaufId holds the string denoting the einkaufid field in the database.
	FieldEinkaufId = "einkauf_id"
	// FieldAzubi holds the string denoting the azubi field in the database.
	FieldAzubi = "azubi"
	// FieldGeburtstag holds the string denoting the geburtstag field in the database.
	FieldGeburtstag = "geburtstag"
	// FieldGruppenwahl holds the string denoting the gruppenwahl field in the database.
	FieldGruppenwahl = "gruppenwahl"
	// FieldHomeOffice holds the string denoting the homeoffice field in the database.
	FieldHomeOffice = "home_office"
	// FieldMobilBusiness holds the string denoting the mobil_business field in the database.
	FieldMobilBusiness = "mobil_business"
	// FieldMobilPrivat holds the string denoting the mobil_privat field in the database.
	FieldMobilPrivat = "mobil_privat"
	// FieldTelefonBusiness holds the string denoting the telefon_business field in the database.
	FieldTelefonBusiness = "telefon_business"
	// FieldTelefonIntern1 holds the string denoting the telefon_intern_1 field in the database.
	FieldTelefonIntern1 = "telefon_intern_1"
	// FieldTelefonIntern2 holds the string denoting the telefon_intern_2 field in the database.
	FieldTelefonIntern2 = "telefon_intern_2"
	// FieldTelefonPrivat holds the string denoting the telefon_privat field in the database.
	FieldTelefonPrivat = "telefon_privat"
	// EdgeAbteilung holds the string denoting the abteilung edge name in mutations.
	EdgeAbteilung = "abteilung"
	// EdgeEinkauf holds the string denoting the einkauf edge name in mutations.
	EdgeEinkauf = "einkauf"
	// Table holds the table name of the mitarbeiter in the database.
	Table = "Mitarbeiter"
	// AbteilungTable is the table that holds the abteilung relation/edge.
	AbteilungTable = "Mitarbeiter"
	// AbteilungInverseTable is the table name for the Abteilung entity.
	// It exists in this package in order to avoid circular dependency with the "abteilung" package.
	AbteilungInverseTable = "Abteilung"
	// AbteilungColumn is the table column denoting the abteilung relation/edge.
	AbteilungColumn = "abteilung_id"
	// EinkaufTable is the table that holds the einkauf relation/edge.
	EinkaufTable = "Mitarbeiter"
	// EinkaufInverseTable is the table name for the Einkauf entity.
	// It exists in this package in order to avoid circular dependency with the "einkauf" package.
	EinkaufInverseTable = "Einkauf"
	// EinkaufColumn is the table column denoting the einkauf relation/edge.
	EinkaufColumn = "einkauf_id"
)

// Columns holds all SQL columns for mitarbeiter fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldShort,
	FieldImage,
	FieldSex,
	FieldFocus,
	FieldMail,
	FieldAbteilungId,
	FieldEinkaufId,
	FieldAzubi,
	FieldGeburtstag,
	FieldGruppenwahl,
	FieldHomeOffice,
	FieldMobilBusiness,
	FieldMobilPrivat,
	FieldTelefonBusiness,
	FieldTelefonIntern1,
	FieldTelefonIntern2,
	FieldTelefonPrivat,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Mitarbeiter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByShort orders the results by the short field.
func ByShort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShort, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// BySex orders the results by the sex field.
func BySex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSex, opts...).ToFunc()
}

// ByFocus orders the results by the focus field.
func ByFocus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFocus, opts...).ToFunc()
}

// ByMail orders the results by the mail field.
func ByMail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMail, opts...).ToFunc()
}

// ByAbteilungId orders the results by the abteilungId field.
func ByAbteilungId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbteilungId, opts...).ToFunc()
}

// ByEinkaufId orders the results by the einkaufId field.
func ByEinkaufId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEinkaufId, opts...).ToFunc()
}

// ByAzubi orders the results by the Azubi field.
func ByAzubi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAzubi, opts...).ToFunc()
}

// ByGeburtstag orders the results by the Geburtstag field.
func ByGeburtstag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeburtstag, opts...).ToFunc()
}

// ByGruppenwahl orders the results by the Gruppenwahl field.
func ByGruppenwahl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGruppenwahl, opts...).ToFunc()
}

// ByHomeOffice orders the results by the HomeOffice field.
func ByHomeOffice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeOffice, opts...).ToFunc()
}

// ByMobilBusiness orders the results by the Mobil_Business field.
func ByMobilBusiness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobilBusiness, opts...).ToFunc()
}

// ByMobilPrivat orders the results by the Mobil_Privat field.
func ByMobilPrivat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobilPrivat, opts...).ToFunc()
}

// ByTelefonBusiness orders the results by the Telefon_Business field.
func ByTelefonBusiness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelefonBusiness, opts...).ToFunc()
}

// ByTelefonIntern1 orders the results by the Telefon_Intern_1 field.
func ByTelefonIntern1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelefonIntern1, opts...).ToFunc()
}

// ByTelefonIntern2 orders the results by the Telefon_Intern_2 field.
func ByTelefonIntern2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelefonIntern2, opts...).ToFunc()
}

// ByTelefonPrivat orders the results by the Telefon_Privat field.
func ByTelefonPrivat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelefonPrivat, opts...).ToFunc()
}

// ByAbteilungField orders the results by abteilung field.
func ByAbteilungField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbteilungStep(), sql.OrderByField(field, opts...))
	}
}

// ByEinkaufField orders the results by einkauf field.
func ByEinkaufField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEinkaufStep(), sql.OrderByField(field, opts...))
	}
}
func newAbteilungStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbteilungInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AbteilungTable, AbteilungColumn),
	)
}
func newEinkaufStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EinkaufInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EinkaufTable, EinkaufColumn),
	)
}
