// Code generated by ent, DO NOT EDIT.

package mitarbeiter

import (
	"time"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldName, v))
}

// Short applies equality check predicate on the "short" field. It's identical to ShortEQ.
func Short(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldShort, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldImage, v))
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldSex, v))
}

// Focus applies equality check predicate on the "focus" field. It's identical to FocusEQ.
func Focus(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldFocus, v))
}

// Mail applies equality check predicate on the "mail" field. It's identical to MailEQ.
func Mail(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldMail, v))
}

// AbteilungId applies equality check predicate on the "abteilungId" field. It's identical to AbteilungIdEQ.
func AbteilungId(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAbteilungId, v))
}

// EinkaufId applies equality check predicate on the "einkaufId" field. It's identical to EinkaufIdEQ.
func EinkaufId(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldEinkaufId, v))
}

// Azubi applies equality check predicate on the "Azubi" field. It's identical to AzubiEQ.
func Azubi(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAzubi, v))
}

// Geburtstag applies equality check predicate on the "Geburtstag" field. It's identical to GeburtstagEQ.
func Geburtstag(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldGeburtstag, v))
}

// Gruppenwahl applies equality check predicate on the "Gruppenwahl" field. It's identical to GruppenwahlEQ.
func Gruppenwahl(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldGruppenwahl, v))
}

// HomeOffice applies equality check predicate on the "HomeOffice" field. It's identical to HomeOfficeEQ.
func HomeOffice(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldHomeOffice, v))
}

// MobilBusiness applies equality check predicate on the "Mobil_Business" field. It's identical to MobilBusinessEQ.
func MobilBusiness(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldMobilBusiness, v))
}

// MobilPrivat applies equality check predicate on the "Mobil_Privat" field. It's identical to MobilPrivatEQ.
func MobilPrivat(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldMobilPrivat, v))
}

// TelefonBusiness applies equality check predicate on the "Telefon_Business" field. It's identical to TelefonBusinessEQ.
func TelefonBusiness(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldTelefonBusiness, v))
}

// TelefonIntern1 applies equality check predicate on the "Telefon_Intern_1" field. It's identical to TelefonIntern1EQ.
func TelefonIntern1(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldTelefonIntern1, v))
}

// TelefonIntern2 applies equality check predicate on the "Telefon_Intern_2" field. It's identical to TelefonIntern2EQ.
func TelefonIntern2(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldTelefonIntern2, v))
}

// TelefonPrivat applies equality check predicate on the "Telefon_Privat" field. It's identical to TelefonPrivatEQ.
func TelefonPrivat(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldTelefonPrivat, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldName, v))
}

// ShortEQ applies the EQ predicate on the "short" field.
func ShortEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldShort, v))
}

// ShortNEQ applies the NEQ predicate on the "short" field.
func ShortNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldShort, v))
}

// ShortIn applies the In predicate on the "short" field.
func ShortIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldShort, vs...))
}

// ShortNotIn applies the NotIn predicate on the "short" field.
func ShortNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldShort, vs...))
}

// ShortGT applies the GT predicate on the "short" field.
func ShortGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldShort, v))
}

// ShortGTE applies the GTE predicate on the "short" field.
func ShortGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldShort, v))
}

// ShortLT applies the LT predicate on the "short" field.
func ShortLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldShort, v))
}

// ShortLTE applies the LTE predicate on the "short" field.
func ShortLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldShort, v))
}

// ShortContains applies the Contains predicate on the "short" field.
func ShortContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldShort, v))
}

// ShortHasPrefix applies the HasPrefix predicate on the "short" field.
func ShortHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldShort, v))
}

// ShortHasSuffix applies the HasSuffix predicate on the "short" field.
func ShortHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldShort, v))
}

// ShortIsNil applies the IsNil predicate on the "short" field.
func ShortIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldShort))
}

// ShortNotNil applies the NotNil predicate on the "short" field.
func ShortNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldShort))
}

// ShortEqualFold applies the EqualFold predicate on the "short" field.
func ShortEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldShort, v))
}

// ShortContainsFold applies the ContainsFold predicate on the "short" field.
func ShortContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldShort, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldImage, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldSex, vs...))
}

// SexGT applies the GT predicate on the "sex" field.
func SexGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldSex, v))
}

// SexGTE applies the GTE predicate on the "sex" field.
func SexGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldSex, v))
}

// SexLT applies the LT predicate on the "sex" field.
func SexLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldSex, v))
}

// SexLTE applies the LTE predicate on the "sex" field.
func SexLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldSex, v))
}

// SexContains applies the Contains predicate on the "sex" field.
func SexContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldSex, v))
}

// SexHasPrefix applies the HasPrefix predicate on the "sex" field.
func SexHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldSex, v))
}

// SexHasSuffix applies the HasSuffix predicate on the "sex" field.
func SexHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldSex, v))
}

// SexIsNil applies the IsNil predicate on the "sex" field.
func SexIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldSex))
}

// SexNotNil applies the NotNil predicate on the "sex" field.
func SexNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldSex))
}

// SexEqualFold applies the EqualFold predicate on the "sex" field.
func SexEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldSex, v))
}

// SexContainsFold applies the ContainsFold predicate on the "sex" field.
func SexContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldSex, v))
}

// FocusEQ applies the EQ predicate on the "focus" field.
func FocusEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldFocus, v))
}

// FocusNEQ applies the NEQ predicate on the "focus" field.
func FocusNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldFocus, v))
}

// FocusIn applies the In predicate on the "focus" field.
func FocusIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldFocus, vs...))
}

// FocusNotIn applies the NotIn predicate on the "focus" field.
func FocusNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldFocus, vs...))
}

// FocusGT applies the GT predicate on the "focus" field.
func FocusGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldFocus, v))
}

// FocusGTE applies the GTE predicate on the "focus" field.
func FocusGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldFocus, v))
}

// FocusLT applies the LT predicate on the "focus" field.
func FocusLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldFocus, v))
}

// FocusLTE applies the LTE predicate on the "focus" field.
func FocusLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldFocus, v))
}

// FocusContains applies the Contains predicate on the "focus" field.
func FocusContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldFocus, v))
}

// FocusHasPrefix applies the HasPrefix predicate on the "focus" field.
func FocusHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldFocus, v))
}

// FocusHasSuffix applies the HasSuffix predicate on the "focus" field.
func FocusHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldFocus, v))
}

// FocusIsNil applies the IsNil predicate on the "focus" field.
func FocusIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldFocus))
}

// FocusNotNil applies the NotNil predicate on the "focus" field.
func FocusNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldFocus))
}

// FocusEqualFold applies the EqualFold predicate on the "focus" field.
func FocusEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldFocus, v))
}

// FocusContainsFold applies the ContainsFold predicate on the "focus" field.
func FocusContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldFocus, v))
}

// MailEQ applies the EQ predicate on the "mail" field.
func MailEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldMail, v))
}

// MailNEQ applies the NEQ predicate on the "mail" field.
func MailNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldMail, v))
}

// MailIn applies the In predicate on the "mail" field.
func MailIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldMail, vs...))
}

// MailNotIn applies the NotIn predicate on the "mail" field.
func MailNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldMail, vs...))
}

// MailGT applies the GT predicate on the "mail" field.
func MailGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldMail, v))
}

// MailGTE applies the GTE predicate on the "mail" field.
func MailGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldMail, v))
}

// MailLT applies the LT predicate on the "mail" field.
func MailLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldMail, v))
}

// MailLTE applies the LTE predicate on the "mail" field.
func MailLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldMail, v))
}

// MailContains applies the Contains predicate on the "mail" field.
func MailContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldMail, v))
}

// MailHasPrefix applies the HasPrefix predicate on the "mail" field.
func MailHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldMail, v))
}

// MailHasSuffix applies the HasSuffix predicate on the "mail" field.
func MailHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldMail, v))
}

// MailIsNil applies the IsNil predicate on the "mail" field.
func MailIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldMail))
}

// MailNotNil applies the NotNil predicate on the "mail" field.
func MailNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldMail))
}

// MailEqualFold applies the EqualFold predicate on the "mail" field.
func MailEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldMail, v))
}

// MailContainsFold applies the ContainsFold predicate on the "mail" field.
func MailContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldMail, v))
}

// AbteilungIdEQ applies the EQ predicate on the "abteilungId" field.
func AbteilungIdEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAbteilungId, v))
}

// AbteilungIdNEQ applies the NEQ predicate on the "abteilungId" field.
func AbteilungIdNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldAbteilungId, v))
}

// AbteilungIdIn applies the In predicate on the "abteilungId" field.
func AbteilungIdIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldAbteilungId, vs...))
}

// AbteilungIdNotIn applies the NotIn predicate on the "abteilungId" field.
func AbteilungIdNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldAbteilungId, vs...))
}

// AbteilungIdGT applies the GT predicate on the "abteilungId" field.
func AbteilungIdGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldAbteilungId, v))
}

// AbteilungIdGTE applies the GTE predicate on the "abteilungId" field.
func AbteilungIdGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldAbteilungId, v))
}

// AbteilungIdLT applies the LT predicate on the "abteilungId" field.
func AbteilungIdLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldAbteilungId, v))
}

// AbteilungIdLTE applies the LTE predicate on the "abteilungId" field.
func AbteilungIdLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldAbteilungId, v))
}

// AbteilungIdContains applies the Contains predicate on the "abteilungId" field.
func AbteilungIdContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldAbteilungId, v))
}

// AbteilungIdHasPrefix applies the HasPrefix predicate on the "abteilungId" field.
func AbteilungIdHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldAbteilungId, v))
}

// AbteilungIdHasSuffix applies the HasSuffix predicate on the "abteilungId" field.
func AbteilungIdHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldAbteilungId, v))
}

// AbteilungIdIsNil applies the IsNil predicate on the "abteilungId" field.
func AbteilungIdIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldAbteilungId))
}

// AbteilungIdNotNil applies the NotNil predicate on the "abteilungId" field.
func AbteilungIdNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldAbteilungId))
}

// AbteilungIdEqualFold applies the EqualFold predicate on the "abteilungId" field.
func AbteilungIdEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldAbteilungId, v))
}

// AbteilungIdContainsFold applies the ContainsFold predicate on the "abteilungId" field.
func AbteilungIdContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldAbteilungId, v))
}

// EinkaufIdEQ applies the EQ predicate on the "einkaufId" field.
func EinkaufIdEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldEinkaufId, v))
}

// EinkaufIdNEQ applies the NEQ predicate on the "einkaufId" field.
func EinkaufIdNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldEinkaufId, v))
}

// EinkaufIdIn applies the In predicate on the "einkaufId" field.
func EinkaufIdIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldEinkaufId, vs...))
}

// EinkaufIdNotIn applies the NotIn predicate on the "einkaufId" field.
func EinkaufIdNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldEinkaufId, vs...))
}

// EinkaufIdGT applies the GT predicate on the "einkaufId" field.
func EinkaufIdGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldEinkaufId, v))
}

// EinkaufIdGTE applies the GTE predicate on the "einkaufId" field.
func EinkaufIdGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldEinkaufId, v))
}

// EinkaufIdLT applies the LT predicate on the "einkaufId" field.
func EinkaufIdLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldEinkaufId, v))
}

// EinkaufIdLTE applies the LTE predicate on the "einkaufId" field.
func EinkaufIdLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldEinkaufId, v))
}

// EinkaufIdContains applies the Contains predicate on the "einkaufId" field.
func EinkaufIdContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldEinkaufId, v))
}

// EinkaufIdHasPrefix applies the HasPrefix predicate on the "einkaufId" field.
func EinkaufIdHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldEinkaufId, v))
}

// EinkaufIdHasSuffix applies the HasSuffix predicate on the "einkaufId" field.
func EinkaufIdHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldEinkaufId, v))
}

// EinkaufIdIsNil applies the IsNil predicate on the "einkaufId" field.
func EinkaufIdIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldEinkaufId))
}

// EinkaufIdNotNil applies the NotNil predicate on the "einkaufId" field.
func EinkaufIdNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldEinkaufId))
}

// EinkaufIdEqualFold applies the EqualFold predicate on the "einkaufId" field.
func EinkaufIdEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldEinkaufId, v))
}

// EinkaufIdContainsFold applies the ContainsFold predicate on the "einkaufId" field.
func EinkaufIdContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldEinkaufId, v))
}

// AzubiEQ applies the EQ predicate on the "Azubi" field.
func AzubiEQ(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAzubi, v))
}

// AzubiNEQ applies the NEQ predicate on the "Azubi" field.
func AzubiNEQ(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldAzubi, v))
}

// GeburtstagEQ applies the EQ predicate on the "Geburtstag" field.
func GeburtstagEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldGeburtstag, v))
}

// GeburtstagNEQ applies the NEQ predicate on the "Geburtstag" field.
func GeburtstagNEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldGeburtstag, v))
}

// GeburtstagIn applies the In predicate on the "Geburtstag" field.
func GeburtstagIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldGeburtstag, vs...))
}

// GeburtstagNotIn applies the NotIn predicate on the "Geburtstag" field.
func GeburtstagNotIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldGeburtstag, vs...))
}

// GeburtstagGT applies the GT predicate on the "Geburtstag" field.
func GeburtstagGT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldGeburtstag, v))
}

// GeburtstagGTE applies the GTE predicate on the "Geburtstag" field.
func GeburtstagGTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldGeburtstag, v))
}

// GeburtstagLT applies the LT predicate on the "Geburtstag" field.
func GeburtstagLT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldGeburtstag, v))
}

// GeburtstagLTE applies the LTE predicate on the "Geburtstag" field.
func GeburtstagLTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldGeburtstag, v))
}

// GeburtstagIsNil applies the IsNil predicate on the "Geburtstag" field.
func GeburtstagIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldGeburtstag))
}

// GeburtstagNotNil applies the NotNil predicate on the "Geburtstag" field.
func GeburtstagNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldGeburtstag))
}

// GruppenwahlEQ applies the EQ predicate on the "Gruppenwahl" field.
func GruppenwahlEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldGruppenwahl, v))
}

// GruppenwahlNEQ applies the NEQ predicate on the "Gruppenwahl" field.
func GruppenwahlNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldGruppenwahl, v))
}

// GruppenwahlIn applies the In predicate on the "Gruppenwahl" field.
func GruppenwahlIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldGruppenwahl, vs...))
}

// GruppenwahlNotIn applies the NotIn predicate on the "Gruppenwahl" field.
func GruppenwahlNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldGruppenwahl, vs...))
}

// GruppenwahlGT applies the GT predicate on the "Gruppenwahl" field.
func GruppenwahlGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldGruppenwahl, v))
}

// GruppenwahlGTE applies the GTE predicate on the "Gruppenwahl" field.
func GruppenwahlGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldGruppenwahl, v))
}

// GruppenwahlLT applies the LT predicate on the "Gruppenwahl" field.
func GruppenwahlLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldGruppenwahl, v))
}

// GruppenwahlLTE applies the LTE predicate on the "Gruppenwahl" field.
func GruppenwahlLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldGruppenwahl, v))
}

// GruppenwahlContains applies the Contains predicate on the "Gruppenwahl" field.
func GruppenwahlContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldGruppenwahl, v))
}

// GruppenwahlHasPrefix applies the HasPrefix predicate on the "Gruppenwahl" field.
func GruppenwahlHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldGruppenwahl, v))
}

// GruppenwahlHasSuffix applies the HasSuffix predicate on the "Gruppenwahl" field.
func GruppenwahlHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldGruppenwahl, v))
}

// GruppenwahlIsNil applies the IsNil predicate on the "Gruppenwahl" field.
func GruppenwahlIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldGruppenwahl))
}

// GruppenwahlNotNil applies the NotNil predicate on the "Gruppenwahl" field.
func GruppenwahlNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldGruppenwahl))
}

// GruppenwahlEqualFold applies the EqualFold predicate on the "Gruppenwahl" field.
func GruppenwahlEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldGruppenwahl, v))
}

// GruppenwahlContainsFold applies the ContainsFold predicate on the "Gruppenwahl" field.
func GruppenwahlContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldGruppenwahl, v))
}

// HomeOfficeEQ applies the EQ predicate on the "HomeOffice" field.
func HomeOfficeEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldHomeOffice, v))
}

// HomeOfficeNEQ applies the NEQ predicate on the "HomeOffice" field.
func HomeOfficeNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldHomeOffice, v))
}

// HomeOfficeIn applies the In predicate on the "HomeOffice" field.
func HomeOfficeIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldHomeOffice, vs...))
}

// HomeOfficeNotIn applies the NotIn predicate on the "HomeOffice" field.
func HomeOfficeNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldHomeOffice, vs...))
}

// HomeOfficeGT applies the GT predicate on the "HomeOffice" field.
func HomeOfficeGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldHomeOffice, v))
}

// HomeOfficeGTE applies the GTE predicate on the "HomeOffice" field.
func HomeOfficeGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldHomeOffice, v))
}

// HomeOfficeLT applies the LT predicate on the "HomeOffice" field.
func HomeOfficeLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldHomeOffice, v))
}

// HomeOfficeLTE applies the LTE predicate on the "HomeOffice" field.
func HomeOfficeLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldHomeOffice, v))
}

// HomeOfficeContains applies the Contains predicate on the "HomeOffice" field.
func HomeOfficeContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldHomeOffice, v))
}

// HomeOfficeHasPrefix applies the HasPrefix predicate on the "HomeOffice" field.
func HomeOfficeHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldHomeOffice, v))
}

// HomeOfficeHasSuffix applies the HasSuffix predicate on the "HomeOffice" field.
func HomeOfficeHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldHomeOffice, v))
}

// HomeOfficeIsNil applies the IsNil predicate on the "HomeOffice" field.
func HomeOfficeIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldHomeOffice))
}

// HomeOfficeNotNil applies the NotNil predicate on the "HomeOffice" field.
func HomeOfficeNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldHomeOffice))
}

// HomeOfficeEqualFold applies the EqualFold predicate on the "HomeOffice" field.
func HomeOfficeEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldHomeOffice, v))
}

// HomeOfficeContainsFold applies the ContainsFold predicate on the "HomeOffice" field.
func HomeOfficeContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldHomeOffice, v))
}

// MobilBusinessEQ applies the EQ predicate on the "Mobil_Business" field.
func MobilBusinessEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldMobilBusiness, v))
}

// MobilBusinessNEQ applies the NEQ predicate on the "Mobil_Business" field.
func MobilBusinessNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldMobilBusiness, v))
}

// MobilBusinessIn applies the In predicate on the "Mobil_Business" field.
func MobilBusinessIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldMobilBusiness, vs...))
}

// MobilBusinessNotIn applies the NotIn predicate on the "Mobil_Business" field.
func MobilBusinessNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldMobilBusiness, vs...))
}

// MobilBusinessGT applies the GT predicate on the "Mobil_Business" field.
func MobilBusinessGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldMobilBusiness, v))
}

// MobilBusinessGTE applies the GTE predicate on the "Mobil_Business" field.
func MobilBusinessGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldMobilBusiness, v))
}

// MobilBusinessLT applies the LT predicate on the "Mobil_Business" field.
func MobilBusinessLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldMobilBusiness, v))
}

// MobilBusinessLTE applies the LTE predicate on the "Mobil_Business" field.
func MobilBusinessLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldMobilBusiness, v))
}

// MobilBusinessContains applies the Contains predicate on the "Mobil_Business" field.
func MobilBusinessContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldMobilBusiness, v))
}

// MobilBusinessHasPrefix applies the HasPrefix predicate on the "Mobil_Business" field.
func MobilBusinessHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldMobilBusiness, v))
}

// MobilBusinessHasSuffix applies the HasSuffix predicate on the "Mobil_Business" field.
func MobilBusinessHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldMobilBusiness, v))
}

// MobilBusinessIsNil applies the IsNil predicate on the "Mobil_Business" field.
func MobilBusinessIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldMobilBusiness))
}

// MobilBusinessNotNil applies the NotNil predicate on the "Mobil_Business" field.
func MobilBusinessNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldMobilBusiness))
}

// MobilBusinessEqualFold applies the EqualFold predicate on the "Mobil_Business" field.
func MobilBusinessEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldMobilBusiness, v))
}

// MobilBusinessContainsFold applies the ContainsFold predicate on the "Mobil_Business" field.
func MobilBusinessContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldMobilBusiness, v))
}

// MobilPrivatEQ applies the EQ predicate on the "Mobil_Privat" field.
func MobilPrivatEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldMobilPrivat, v))
}

// MobilPrivatNEQ applies the NEQ predicate on the "Mobil_Privat" field.
func MobilPrivatNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldMobilPrivat, v))
}

// MobilPrivatIn applies the In predicate on the "Mobil_Privat" field.
func MobilPrivatIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldMobilPrivat, vs...))
}

// MobilPrivatNotIn applies the NotIn predicate on the "Mobil_Privat" field.
func MobilPrivatNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldMobilPrivat, vs...))
}

// MobilPrivatGT applies the GT predicate on the "Mobil_Privat" field.
func MobilPrivatGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldMobilPrivat, v))
}

// MobilPrivatGTE applies the GTE predicate on the "Mobil_Privat" field.
func MobilPrivatGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldMobilPrivat, v))
}

// MobilPrivatLT applies the LT predicate on the "Mobil_Privat" field.
func MobilPrivatLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldMobilPrivat, v))
}

// MobilPrivatLTE applies the LTE predicate on the "Mobil_Privat" field.
func MobilPrivatLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldMobilPrivat, v))
}

// MobilPrivatContains applies the Contains predicate on the "Mobil_Privat" field.
func MobilPrivatContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldMobilPrivat, v))
}

// MobilPrivatHasPrefix applies the HasPrefix predicate on the "Mobil_Privat" field.
func MobilPrivatHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldMobilPrivat, v))
}

// MobilPrivatHasSuffix applies the HasSuffix predicate on the "Mobil_Privat" field.
func MobilPrivatHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldMobilPrivat, v))
}

// MobilPrivatIsNil applies the IsNil predicate on the "Mobil_Privat" field.
func MobilPrivatIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldMobilPrivat))
}

// MobilPrivatNotNil applies the NotNil predicate on the "Mobil_Privat" field.
func MobilPrivatNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldMobilPrivat))
}

// MobilPrivatEqualFold applies the EqualFold predicate on the "Mobil_Privat" field.
func MobilPrivatEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldMobilPrivat, v))
}

// MobilPrivatContainsFold applies the ContainsFold predicate on the "Mobil_Privat" field.
func MobilPrivatContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldMobilPrivat, v))
}

// TelefonBusinessEQ applies the EQ predicate on the "Telefon_Business" field.
func TelefonBusinessEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldTelefonBusiness, v))
}

// TelefonBusinessNEQ applies the NEQ predicate on the "Telefon_Business" field.
func TelefonBusinessNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldTelefonBusiness, v))
}

// TelefonBusinessIn applies the In predicate on the "Telefon_Business" field.
func TelefonBusinessIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldTelefonBusiness, vs...))
}

// TelefonBusinessNotIn applies the NotIn predicate on the "Telefon_Business" field.
func TelefonBusinessNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldTelefonBusiness, vs...))
}

// TelefonBusinessGT applies the GT predicate on the "Telefon_Business" field.
func TelefonBusinessGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldTelefonBusiness, v))
}

// TelefonBusinessGTE applies the GTE predicate on the "Telefon_Business" field.
func TelefonBusinessGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldTelefonBusiness, v))
}

// TelefonBusinessLT applies the LT predicate on the "Telefon_Business" field.
func TelefonBusinessLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldTelefonBusiness, v))
}

// TelefonBusinessLTE applies the LTE predicate on the "Telefon_Business" field.
func TelefonBusinessLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldTelefonBusiness, v))
}

// TelefonBusinessContains applies the Contains predicate on the "Telefon_Business" field.
func TelefonBusinessContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldTelefonBusiness, v))
}

// TelefonBusinessHasPrefix applies the HasPrefix predicate on the "Telefon_Business" field.
func TelefonBusinessHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldTelefonBusiness, v))
}

// TelefonBusinessHasSuffix applies the HasSuffix predicate on the "Telefon_Business" field.
func TelefonBusinessHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldTelefonBusiness, v))
}

// TelefonBusinessIsNil applies the IsNil predicate on the "Telefon_Business" field.
func TelefonBusinessIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldTelefonBusiness))
}

// TelefonBusinessNotNil applies the NotNil predicate on the "Telefon_Business" field.
func TelefonBusinessNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldTelefonBusiness))
}

// TelefonBusinessEqualFold applies the EqualFold predicate on the "Telefon_Business" field.
func TelefonBusinessEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldTelefonBusiness, v))
}

// TelefonBusinessContainsFold applies the ContainsFold predicate on the "Telefon_Business" field.
func TelefonBusinessContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldTelefonBusiness, v))
}

// TelefonIntern1EQ applies the EQ predicate on the "Telefon_Intern_1" field.
func TelefonIntern1EQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldTelefonIntern1, v))
}

// TelefonIntern1NEQ applies the NEQ predicate on the "Telefon_Intern_1" field.
func TelefonIntern1NEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldTelefonIntern1, v))
}

// TelefonIntern1In applies the In predicate on the "Telefon_Intern_1" field.
func TelefonIntern1In(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldTelefonIntern1, vs...))
}

// TelefonIntern1NotIn applies the NotIn predicate on the "Telefon_Intern_1" field.
func TelefonIntern1NotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldTelefonIntern1, vs...))
}

// TelefonIntern1GT applies the GT predicate on the "Telefon_Intern_1" field.
func TelefonIntern1GT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldTelefonIntern1, v))
}

// TelefonIntern1GTE applies the GTE predicate on the "Telefon_Intern_1" field.
func TelefonIntern1GTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldTelefonIntern1, v))
}

// TelefonIntern1LT applies the LT predicate on the "Telefon_Intern_1" field.
func TelefonIntern1LT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldTelefonIntern1, v))
}

// TelefonIntern1LTE applies the LTE predicate on the "Telefon_Intern_1" field.
func TelefonIntern1LTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldTelefonIntern1, v))
}

// TelefonIntern1Contains applies the Contains predicate on the "Telefon_Intern_1" field.
func TelefonIntern1Contains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldTelefonIntern1, v))
}

// TelefonIntern1HasPrefix applies the HasPrefix predicate on the "Telefon_Intern_1" field.
func TelefonIntern1HasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldTelefonIntern1, v))
}

// TelefonIntern1HasSuffix applies the HasSuffix predicate on the "Telefon_Intern_1" field.
func TelefonIntern1HasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldTelefonIntern1, v))
}

// TelefonIntern1IsNil applies the IsNil predicate on the "Telefon_Intern_1" field.
func TelefonIntern1IsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldTelefonIntern1))
}

// TelefonIntern1NotNil applies the NotNil predicate on the "Telefon_Intern_1" field.
func TelefonIntern1NotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldTelefonIntern1))
}

// TelefonIntern1EqualFold applies the EqualFold predicate on the "Telefon_Intern_1" field.
func TelefonIntern1EqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldTelefonIntern1, v))
}

// TelefonIntern1ContainsFold applies the ContainsFold predicate on the "Telefon_Intern_1" field.
func TelefonIntern1ContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldTelefonIntern1, v))
}

// TelefonIntern2EQ applies the EQ predicate on the "Telefon_Intern_2" field.
func TelefonIntern2EQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldTelefonIntern2, v))
}

// TelefonIntern2NEQ applies the NEQ predicate on the "Telefon_Intern_2" field.
func TelefonIntern2NEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldTelefonIntern2, v))
}

// TelefonIntern2In applies the In predicate on the "Telefon_Intern_2" field.
func TelefonIntern2In(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldTelefonIntern2, vs...))
}

// TelefonIntern2NotIn applies the NotIn predicate on the "Telefon_Intern_2" field.
func TelefonIntern2NotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldTelefonIntern2, vs...))
}

// TelefonIntern2GT applies the GT predicate on the "Telefon_Intern_2" field.
func TelefonIntern2GT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldTelefonIntern2, v))
}

// TelefonIntern2GTE applies the GTE predicate on the "Telefon_Intern_2" field.
func TelefonIntern2GTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldTelefonIntern2, v))
}

// TelefonIntern2LT applies the LT predicate on the "Telefon_Intern_2" field.
func TelefonIntern2LT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldTelefonIntern2, v))
}

// TelefonIntern2LTE applies the LTE predicate on the "Telefon_Intern_2" field.
func TelefonIntern2LTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldTelefonIntern2, v))
}

// TelefonIntern2Contains applies the Contains predicate on the "Telefon_Intern_2" field.
func TelefonIntern2Contains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldTelefonIntern2, v))
}

// TelefonIntern2HasPrefix applies the HasPrefix predicate on the "Telefon_Intern_2" field.
func TelefonIntern2HasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldTelefonIntern2, v))
}

// TelefonIntern2HasSuffix applies the HasSuffix predicate on the "Telefon_Intern_2" field.
func TelefonIntern2HasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldTelefonIntern2, v))
}

// TelefonIntern2IsNil applies the IsNil predicate on the "Telefon_Intern_2" field.
func TelefonIntern2IsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldTelefonIntern2))
}

// TelefonIntern2NotNil applies the NotNil predicate on the "Telefon_Intern_2" field.
func TelefonIntern2NotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldTelefonIntern2))
}

// TelefonIntern2EqualFold applies the EqualFold predicate on the "Telefon_Intern_2" field.
func TelefonIntern2EqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldTelefonIntern2, v))
}

// TelefonIntern2ContainsFold applies the ContainsFold predicate on the "Telefon_Intern_2" field.
func TelefonIntern2ContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldTelefonIntern2, v))
}

// TelefonPrivatEQ applies the EQ predicate on the "Telefon_Privat" field.
func TelefonPrivatEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldTelefonPrivat, v))
}

// TelefonPrivatNEQ applies the NEQ predicate on the "Telefon_Privat" field.
func TelefonPrivatNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldTelefonPrivat, v))
}

// TelefonPrivatIn applies the In predicate on the "Telefon_Privat" field.
func TelefonPrivatIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldTelefonPrivat, vs...))
}

// TelefonPrivatNotIn applies the NotIn predicate on the "Telefon_Privat" field.
func TelefonPrivatNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldTelefonPrivat, vs...))
}

// TelefonPrivatGT applies the GT predicate on the "Telefon_Privat" field.
func TelefonPrivatGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldTelefonPrivat, v))
}

// TelefonPrivatGTE applies the GTE predicate on the "Telefon_Privat" field.
func TelefonPrivatGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldTelefonPrivat, v))
}

// TelefonPrivatLT applies the LT predicate on the "Telefon_Privat" field.
func TelefonPrivatLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldTelefonPrivat, v))
}

// TelefonPrivatLTE applies the LTE predicate on the "Telefon_Privat" field.
func TelefonPrivatLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldTelefonPrivat, v))
}

// TelefonPrivatContains applies the Contains predicate on the "Telefon_Privat" field.
func TelefonPrivatContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldTelefonPrivat, v))
}

// TelefonPrivatHasPrefix applies the HasPrefix predicate on the "Telefon_Privat" field.
func TelefonPrivatHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldTelefonPrivat, v))
}

// TelefonPrivatHasSuffix applies the HasSuffix predicate on the "Telefon_Privat" field.
func TelefonPrivatHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldTelefonPrivat, v))
}

// TelefonPrivatIsNil applies the IsNil predicate on the "Telefon_Privat" field.
func TelefonPrivatIsNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIsNull(FieldTelefonPrivat))
}

// TelefonPrivatNotNil applies the NotNil predicate on the "Telefon_Privat" field.
func TelefonPrivatNotNil() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotNull(FieldTelefonPrivat))
}

// TelefonPrivatEqualFold applies the EqualFold predicate on the "Telefon_Privat" field.
func TelefonPrivatEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldTelefonPrivat, v))
}

// TelefonPrivatContainsFold applies the ContainsFold predicate on the "Telefon_Privat" field.
func TelefonPrivatContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldTelefonPrivat, v))
}

// HasAbteilung applies the HasEdge predicate on the "abteilung" edge.
func HasAbteilung() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AbteilungTable, AbteilungColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAbteilungWith applies the HasEdge predicate on the "abteilung" edge with a given conditions (other predicates).
func HasAbteilungWith(preds ...predicate.Abteilung) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(func(s *sql.Selector) {
		step := newAbteilungStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEinkauf applies the HasEdge predicate on the "einkauf" edge.
func HasEinkauf() predicate.Mitarbeiter {
	return predicate.Mitarbeiter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EinkaufTable, EinkaufColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEinkaufWith applies the HasEdge predicate on the "einkauf" edge with a given conditions (other predicates).
func HasEinkaufWith(preds ...predicate.Einkauf) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(func(s *sql.Selector) {
		step := newEinkaufStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mitarbeiter) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mitarbeiter) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mitarbeiter) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.NotPredicates(p))
}
