// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"viktor/ent/einkauf"
	"viktor/ent/mitarbeiter"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EinkaufUpdate is the builder for updating Einkauf entities.
type EinkaufUpdate struct {
	config
	hooks    []Hook
	mutation *EinkaufMutation
}

// Where appends a list predicates to the EinkaufUpdate builder.
func (eu *EinkaufUpdate) Where(ps ...predicate.Einkauf) *EinkaufUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetPaypal sets the "Paypal" field.
func (eu *EinkaufUpdate) SetPaypal(b bool) *EinkaufUpdate {
	eu.mutation.SetPaypal(b)
	return eu
}

// SetNillablePaypal sets the "Paypal" field if the given value is not nil.
func (eu *EinkaufUpdate) SetNillablePaypal(b *bool) *EinkaufUpdate {
	if b != nil {
		eu.SetPaypal(*b)
	}
	return eu
}

// SetAbonniert sets the "Abonniert" field.
func (eu *EinkaufUpdate) SetAbonniert(b bool) *EinkaufUpdate {
	eu.mutation.SetAbonniert(b)
	return eu
}

// SetNillableAbonniert sets the "Abonniert" field if the given value is not nil.
func (eu *EinkaufUpdate) SetNillableAbonniert(b *bool) *EinkaufUpdate {
	if b != nil {
		eu.SetAbonniert(*b)
	}
	return eu
}

// SetGeld sets the "Geld" field.
func (eu *EinkaufUpdate) SetGeld(s string) *EinkaufUpdate {
	eu.mutation.SetGeld(s)
	return eu
}

// SetNillableGeld sets the "Geld" field if the given value is not nil.
func (eu *EinkaufUpdate) SetNillableGeld(s *string) *EinkaufUpdate {
	if s != nil {
		eu.SetGeld(*s)
	}
	return eu
}

// ClearGeld clears the value of the "Geld" field.
func (eu *EinkaufUpdate) ClearGeld() *EinkaufUpdate {
	eu.mutation.ClearGeld()
	return eu
}

// SetPfand sets the "Pfand" field.
func (eu *EinkaufUpdate) SetPfand(s string) *EinkaufUpdate {
	eu.mutation.SetPfand(s)
	return eu
}

// SetNillablePfand sets the "Pfand" field if the given value is not nil.
func (eu *EinkaufUpdate) SetNillablePfand(s *string) *EinkaufUpdate {
	if s != nil {
		eu.SetPfand(*s)
	}
	return eu
}

// ClearPfand clears the value of the "Pfand" field.
func (eu *EinkaufUpdate) ClearPfand() *EinkaufUpdate {
	eu.mutation.ClearPfand()
	return eu
}

// SetDinge sets the "Dinge" field.
func (eu *EinkaufUpdate) SetDinge(s string) *EinkaufUpdate {
	eu.mutation.SetDinge(s)
	return eu
}

// SetNillableDinge sets the "Dinge" field if the given value is not nil.
func (eu *EinkaufUpdate) SetNillableDinge(s *string) *EinkaufUpdate {
	if s != nil {
		eu.SetDinge(*s)
	}
	return eu
}

// SetAbgeschickt sets the "Abgeschickt" field.
func (eu *EinkaufUpdate) SetAbgeschickt(t time.Time) *EinkaufUpdate {
	eu.mutation.SetAbgeschickt(t)
	return eu
}

// SetNillableAbgeschickt sets the "Abgeschickt" field if the given value is not nil.
func (eu *EinkaufUpdate) SetNillableAbgeschickt(t *time.Time) *EinkaufUpdate {
	if t != nil {
		eu.SetAbgeschickt(*t)
	}
	return eu
}

// SetBild1 sets the "Bild1" field.
func (eu *EinkaufUpdate) SetBild1(s string) *EinkaufUpdate {
	eu.mutation.SetBild1(s)
	return eu
}

// SetNillableBild1 sets the "Bild1" field if the given value is not nil.
func (eu *EinkaufUpdate) SetNillableBild1(s *string) *EinkaufUpdate {
	if s != nil {
		eu.SetBild1(*s)
	}
	return eu
}

// ClearBild1 clears the value of the "Bild1" field.
func (eu *EinkaufUpdate) ClearBild1() *EinkaufUpdate {
	eu.mutation.ClearBild1()
	return eu
}

// SetBild2 sets the "Bild2" field.
func (eu *EinkaufUpdate) SetBild2(s string) *EinkaufUpdate {
	eu.mutation.SetBild2(s)
	return eu
}

// SetNillableBild2 sets the "Bild2" field if the given value is not nil.
func (eu *EinkaufUpdate) SetNillableBild2(s *string) *EinkaufUpdate {
	if s != nil {
		eu.SetBild2(*s)
	}
	return eu
}

// ClearBild2 clears the value of the "Bild2" field.
func (eu *EinkaufUpdate) ClearBild2() *EinkaufUpdate {
	eu.mutation.ClearBild2()
	return eu
}

// SetBild3 sets the "Bild3" field.
func (eu *EinkaufUpdate) SetBild3(s string) *EinkaufUpdate {
	eu.mutation.SetBild3(s)
	return eu
}

// SetNillableBild3 sets the "Bild3" field if the given value is not nil.
func (eu *EinkaufUpdate) SetNillableBild3(s *string) *EinkaufUpdate {
	if s != nil {
		eu.SetBild3(*s)
	}
	return eu
}

// ClearBild3 clears the value of the "Bild3" field.
func (eu *EinkaufUpdate) ClearBild3() *EinkaufUpdate {
	eu.mutation.ClearBild3()
	return eu
}

// SetMitarbeiterID sets the "mitarbeiter" edge to the Mitarbeiter entity by ID.
func (eu *EinkaufUpdate) SetMitarbeiterID(id string) *EinkaufUpdate {
	eu.mutation.SetMitarbeiterID(id)
	return eu
}

// SetNillableMitarbeiterID sets the "mitarbeiter" edge to the Mitarbeiter entity by ID if the given value is not nil.
func (eu *EinkaufUpdate) SetNillableMitarbeiterID(id *string) *EinkaufUpdate {
	if id != nil {
		eu = eu.SetMitarbeiterID(*id)
	}
	return eu
}

// SetMitarbeiter sets the "mitarbeiter" edge to the Mitarbeiter entity.
func (eu *EinkaufUpdate) SetMitarbeiter(m *Mitarbeiter) *EinkaufUpdate {
	return eu.SetMitarbeiterID(m.ID)
}

// Mutation returns the EinkaufMutation object of the builder.
func (eu *EinkaufUpdate) Mutation() *EinkaufMutation {
	return eu.mutation
}

// ClearMitarbeiter clears the "mitarbeiter" edge to the Mitarbeiter entity.
func (eu *EinkaufUpdate) ClearMitarbeiter() *EinkaufUpdate {
	eu.mutation.ClearMitarbeiter()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EinkaufUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EinkaufUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EinkaufUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EinkaufUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EinkaufUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(einkauf.Table, einkauf.Columns, sqlgraph.NewFieldSpec(einkauf.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Paypal(); ok {
		_spec.SetField(einkauf.FieldPaypal, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Abonniert(); ok {
		_spec.SetField(einkauf.FieldAbonniert, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Geld(); ok {
		_spec.SetField(einkauf.FieldGeld, field.TypeString, value)
	}
	if eu.mutation.GeldCleared() {
		_spec.ClearField(einkauf.FieldGeld, field.TypeString)
	}
	if value, ok := eu.mutation.Pfand(); ok {
		_spec.SetField(einkauf.FieldPfand, field.TypeString, value)
	}
	if eu.mutation.PfandCleared() {
		_spec.ClearField(einkauf.FieldPfand, field.TypeString)
	}
	if value, ok := eu.mutation.Dinge(); ok {
		_spec.SetField(einkauf.FieldDinge, field.TypeString, value)
	}
	if value, ok := eu.mutation.Abgeschickt(); ok {
		_spec.SetField(einkauf.FieldAbgeschickt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Bild1(); ok {
		_spec.SetField(einkauf.FieldBild1, field.TypeString, value)
	}
	if eu.mutation.Bild1Cleared() {
		_spec.ClearField(einkauf.FieldBild1, field.TypeString)
	}
	if value, ok := eu.mutation.Bild2(); ok {
		_spec.SetField(einkauf.FieldBild2, field.TypeString, value)
	}
	if eu.mutation.Bild2Cleared() {
		_spec.ClearField(einkauf.FieldBild2, field.TypeString)
	}
	if value, ok := eu.mutation.Bild3(); ok {
		_spec.SetField(einkauf.FieldBild3, field.TypeString, value)
	}
	if eu.mutation.Bild3Cleared() {
		_spec.ClearField(einkauf.FieldBild3, field.TypeString)
	}
	if eu.mutation.MitarbeiterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   einkauf.MitarbeiterTable,
			Columns: []string{einkauf.MitarbeiterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.MitarbeiterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   einkauf.MitarbeiterTable,
			Columns: []string{einkauf.MitarbeiterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{einkauf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EinkaufUpdateOne is the builder for updating a single Einkauf entity.
type EinkaufUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EinkaufMutation
}

// SetPaypal sets the "Paypal" field.
func (euo *EinkaufUpdateOne) SetPaypal(b bool) *EinkaufUpdateOne {
	euo.mutation.SetPaypal(b)
	return euo
}

// SetNillablePaypal sets the "Paypal" field if the given value is not nil.
func (euo *EinkaufUpdateOne) SetNillablePaypal(b *bool) *EinkaufUpdateOne {
	if b != nil {
		euo.SetPaypal(*b)
	}
	return euo
}

// SetAbonniert sets the "Abonniert" field.
func (euo *EinkaufUpdateOne) SetAbonniert(b bool) *EinkaufUpdateOne {
	euo.mutation.SetAbonniert(b)
	return euo
}

// SetNillableAbonniert sets the "Abonniert" field if the given value is not nil.
func (euo *EinkaufUpdateOne) SetNillableAbonniert(b *bool) *EinkaufUpdateOne {
	if b != nil {
		euo.SetAbonniert(*b)
	}
	return euo
}

// SetGeld sets the "Geld" field.
func (euo *EinkaufUpdateOne) SetGeld(s string) *EinkaufUpdateOne {
	euo.mutation.SetGeld(s)
	return euo
}

// SetNillableGeld sets the "Geld" field if the given value is not nil.
func (euo *EinkaufUpdateOne) SetNillableGeld(s *string) *EinkaufUpdateOne {
	if s != nil {
		euo.SetGeld(*s)
	}
	return euo
}

// ClearGeld clears the value of the "Geld" field.
func (euo *EinkaufUpdateOne) ClearGeld() *EinkaufUpdateOne {
	euo.mutation.ClearGeld()
	return euo
}

// SetPfand sets the "Pfand" field.
func (euo *EinkaufUpdateOne) SetPfand(s string) *EinkaufUpdateOne {
	euo.mutation.SetPfand(s)
	return euo
}

// SetNillablePfand sets the "Pfand" field if the given value is not nil.
func (euo *EinkaufUpdateOne) SetNillablePfand(s *string) *EinkaufUpdateOne {
	if s != nil {
		euo.SetPfand(*s)
	}
	return euo
}

// ClearPfand clears the value of the "Pfand" field.
func (euo *EinkaufUpdateOne) ClearPfand() *EinkaufUpdateOne {
	euo.mutation.ClearPfand()
	return euo
}

// SetDinge sets the "Dinge" field.
func (euo *EinkaufUpdateOne) SetDinge(s string) *EinkaufUpdateOne {
	euo.mutation.SetDinge(s)
	return euo
}

// SetNillableDinge sets the "Dinge" field if the given value is not nil.
func (euo *EinkaufUpdateOne) SetNillableDinge(s *string) *EinkaufUpdateOne {
	if s != nil {
		euo.SetDinge(*s)
	}
	return euo
}

// SetAbgeschickt sets the "Abgeschickt" field.
func (euo *EinkaufUpdateOne) SetAbgeschickt(t time.Time) *EinkaufUpdateOne {
	euo.mutation.SetAbgeschickt(t)
	return euo
}

// SetNillableAbgeschickt sets the "Abgeschickt" field if the given value is not nil.
func (euo *EinkaufUpdateOne) SetNillableAbgeschickt(t *time.Time) *EinkaufUpdateOne {
	if t != nil {
		euo.SetAbgeschickt(*t)
	}
	return euo
}

// SetBild1 sets the "Bild1" field.
func (euo *EinkaufUpdateOne) SetBild1(s string) *EinkaufUpdateOne {
	euo.mutation.SetBild1(s)
	return euo
}

// SetNillableBild1 sets the "Bild1" field if the given value is not nil.
func (euo *EinkaufUpdateOne) SetNillableBild1(s *string) *EinkaufUpdateOne {
	if s != nil {
		euo.SetBild1(*s)
	}
	return euo
}

// ClearBild1 clears the value of the "Bild1" field.
func (euo *EinkaufUpdateOne) ClearBild1() *EinkaufUpdateOne {
	euo.mutation.ClearBild1()
	return euo
}

// SetBild2 sets the "Bild2" field.
func (euo *EinkaufUpdateOne) SetBild2(s string) *EinkaufUpdateOne {
	euo.mutation.SetBild2(s)
	return euo
}

// SetNillableBild2 sets the "Bild2" field if the given value is not nil.
func (euo *EinkaufUpdateOne) SetNillableBild2(s *string) *EinkaufUpdateOne {
	if s != nil {
		euo.SetBild2(*s)
	}
	return euo
}

// ClearBild2 clears the value of the "Bild2" field.
func (euo *EinkaufUpdateOne) ClearBild2() *EinkaufUpdateOne {
	euo.mutation.ClearBild2()
	return euo
}

// SetBild3 sets the "Bild3" field.
func (euo *EinkaufUpdateOne) SetBild3(s string) *EinkaufUpdateOne {
	euo.mutation.SetBild3(s)
	return euo
}

// SetNillableBild3 sets the "Bild3" field if the given value is not nil.
func (euo *EinkaufUpdateOne) SetNillableBild3(s *string) *EinkaufUpdateOne {
	if s != nil {
		euo.SetBild3(*s)
	}
	return euo
}

// ClearBild3 clears the value of the "Bild3" field.
func (euo *EinkaufUpdateOne) ClearBild3() *EinkaufUpdateOne {
	euo.mutation.ClearBild3()
	return euo
}

// SetMitarbeiterID sets the "mitarbeiter" edge to the Mitarbeiter entity by ID.
func (euo *EinkaufUpdateOne) SetMitarbeiterID(id string) *EinkaufUpdateOne {
	euo.mutation.SetMitarbeiterID(id)
	return euo
}

// SetNillableMitarbeiterID sets the "mitarbeiter" edge to the Mitarbeiter entity by ID if the given value is not nil.
func (euo *EinkaufUpdateOne) SetNillableMitarbeiterID(id *string) *EinkaufUpdateOne {
	if id != nil {
		euo = euo.SetMitarbeiterID(*id)
	}
	return euo
}

// SetMitarbeiter sets the "mitarbeiter" edge to the Mitarbeiter entity.
func (euo *EinkaufUpdateOne) SetMitarbeiter(m *Mitarbeiter) *EinkaufUpdateOne {
	return euo.SetMitarbeiterID(m.ID)
}

// Mutation returns the EinkaufMutation object of the builder.
func (euo *EinkaufUpdateOne) Mutation() *EinkaufMutation {
	return euo.mutation
}

// ClearMitarbeiter clears the "mitarbeiter" edge to the Mitarbeiter entity.
func (euo *EinkaufUpdateOne) ClearMitarbeiter() *EinkaufUpdateOne {
	euo.mutation.ClearMitarbeiter()
	return euo
}

// Where appends a list predicates to the EinkaufUpdate builder.
func (euo *EinkaufUpdateOne) Where(ps ...predicate.Einkauf) *EinkaufUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EinkaufUpdateOne) Select(field string, fields ...string) *EinkaufUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Einkauf entity.
func (euo *EinkaufUpdateOne) Save(ctx context.Context) (*Einkauf, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EinkaufUpdateOne) SaveX(ctx context.Context) *Einkauf {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EinkaufUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EinkaufUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EinkaufUpdateOne) sqlSave(ctx context.Context) (_node *Einkauf, err error) {
	_spec := sqlgraph.NewUpdateSpec(einkauf.Table, einkauf.Columns, sqlgraph.NewFieldSpec(einkauf.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Einkauf.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, einkauf.FieldID)
		for _, f := range fields {
			if !einkauf.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != einkauf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Paypal(); ok {
		_spec.SetField(einkauf.FieldPaypal, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Abonniert(); ok {
		_spec.SetField(einkauf.FieldAbonniert, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Geld(); ok {
		_spec.SetField(einkauf.FieldGeld, field.TypeString, value)
	}
	if euo.mutation.GeldCleared() {
		_spec.ClearField(einkauf.FieldGeld, field.TypeString)
	}
	if value, ok := euo.mutation.Pfand(); ok {
		_spec.SetField(einkauf.FieldPfand, field.TypeString, value)
	}
	if euo.mutation.PfandCleared() {
		_spec.ClearField(einkauf.FieldPfand, field.TypeString)
	}
	if value, ok := euo.mutation.Dinge(); ok {
		_spec.SetField(einkauf.FieldDinge, field.TypeString, value)
	}
	if value, ok := euo.mutation.Abgeschickt(); ok {
		_spec.SetField(einkauf.FieldAbgeschickt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Bild1(); ok {
		_spec.SetField(einkauf.FieldBild1, field.TypeString, value)
	}
	if euo.mutation.Bild1Cleared() {
		_spec.ClearField(einkauf.FieldBild1, field.TypeString)
	}
	if value, ok := euo.mutation.Bild2(); ok {
		_spec.SetField(einkauf.FieldBild2, field.TypeString, value)
	}
	if euo.mutation.Bild2Cleared() {
		_spec.ClearField(einkauf.FieldBild2, field.TypeString)
	}
	if value, ok := euo.mutation.Bild3(); ok {
		_spec.SetField(einkauf.FieldBild3, field.TypeString, value)
	}
	if euo.mutation.Bild3Cleared() {
		_spec.ClearField(einkauf.FieldBild3, field.TypeString)
	}
	if euo.mutation.MitarbeiterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   einkauf.MitarbeiterTable,
			Columns: []string{einkauf.MitarbeiterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.MitarbeiterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   einkauf.MitarbeiterTable,
			Columns: []string{einkauf.MitarbeiterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Einkauf{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{einkauf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
