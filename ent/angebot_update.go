// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"viktor/ent/angebot"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AngebotUpdate is the builder for updating Angebot entities.
type AngebotUpdate struct {
	config
	hooks    []Hook
	mutation *AngebotMutation
}

// Where appends a list predicates to the AngebotUpdate builder.
func (au *AngebotUpdate) Where(ps ...predicate.Angebot) *AngebotUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTitle sets the "title" field.
func (au *AngebotUpdate) SetTitle(s string) *AngebotUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AngebotUpdate) SetNillableTitle(s *string) *AngebotUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetSubtitle sets the "subtitle" field.
func (au *AngebotUpdate) SetSubtitle(s string) *AngebotUpdate {
	au.mutation.SetSubtitle(s)
	return au
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (au *AngebotUpdate) SetNillableSubtitle(s *string) *AngebotUpdate {
	if s != nil {
		au.SetSubtitle(*s)
	}
	return au
}

// ClearSubtitle clears the value of the "subtitle" field.
func (au *AngebotUpdate) ClearSubtitle() *AngebotUpdate {
	au.mutation.ClearSubtitle()
	return au
}

// SetDateStart sets the "date_start" field.
func (au *AngebotUpdate) SetDateStart(t time.Time) *AngebotUpdate {
	au.mutation.SetDateStart(t)
	return au
}

// SetNillableDateStart sets the "date_start" field if the given value is not nil.
func (au *AngebotUpdate) SetNillableDateStart(t *time.Time) *AngebotUpdate {
	if t != nil {
		au.SetDateStart(*t)
	}
	return au
}

// SetDateStop sets the "date_stop" field.
func (au *AngebotUpdate) SetDateStop(t time.Time) *AngebotUpdate {
	au.mutation.SetDateStop(t)
	return au
}

// SetNillableDateStop sets the "date_stop" field if the given value is not nil.
func (au *AngebotUpdate) SetNillableDateStop(t *time.Time) *AngebotUpdate {
	if t != nil {
		au.SetDateStop(*t)
	}
	return au
}

// SetLink sets the "link" field.
func (au *AngebotUpdate) SetLink(s string) *AngebotUpdate {
	au.mutation.SetLink(s)
	return au
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (au *AngebotUpdate) SetNillableLink(s *string) *AngebotUpdate {
	if s != nil {
		au.SetLink(*s)
	}
	return au
}

// SetImage sets the "image" field.
func (au *AngebotUpdate) SetImage(s string) *AngebotUpdate {
	au.mutation.SetImage(s)
	return au
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (au *AngebotUpdate) SetNillableImage(s *string) *AngebotUpdate {
	if s != nil {
		au.SetImage(*s)
	}
	return au
}

// SetAnzeigen sets the "anzeigen" field.
func (au *AngebotUpdate) SetAnzeigen(b bool) *AngebotUpdate {
	au.mutation.SetAnzeigen(b)
	return au
}

// SetNillableAnzeigen sets the "anzeigen" field if the given value is not nil.
func (au *AngebotUpdate) SetNillableAnzeigen(b *bool) *AngebotUpdate {
	if b != nil {
		au.SetAnzeigen(*b)
	}
	return au
}

// Mutation returns the AngebotMutation object of the builder.
func (au *AngebotUpdate) Mutation() *AngebotMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AngebotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AngebotUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AngebotUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AngebotUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AngebotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(angebot.Table, angebot.Columns, sqlgraph.NewFieldSpec(angebot.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(angebot.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.Subtitle(); ok {
		_spec.SetField(angebot.FieldSubtitle, field.TypeString, value)
	}
	if au.mutation.SubtitleCleared() {
		_spec.ClearField(angebot.FieldSubtitle, field.TypeString)
	}
	if value, ok := au.mutation.DateStart(); ok {
		_spec.SetField(angebot.FieldDateStart, field.TypeTime, value)
	}
	if value, ok := au.mutation.DateStop(); ok {
		_spec.SetField(angebot.FieldDateStop, field.TypeTime, value)
	}
	if value, ok := au.mutation.Link(); ok {
		_spec.SetField(angebot.FieldLink, field.TypeString, value)
	}
	if value, ok := au.mutation.Image(); ok {
		_spec.SetField(angebot.FieldImage, field.TypeString, value)
	}
	if value, ok := au.mutation.Anzeigen(); ok {
		_spec.SetField(angebot.FieldAnzeigen, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{angebot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AngebotUpdateOne is the builder for updating a single Angebot entity.
type AngebotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AngebotMutation
}

// SetTitle sets the "title" field.
func (auo *AngebotUpdateOne) SetTitle(s string) *AngebotUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AngebotUpdateOne) SetNillableTitle(s *string) *AngebotUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetSubtitle sets the "subtitle" field.
func (auo *AngebotUpdateOne) SetSubtitle(s string) *AngebotUpdateOne {
	auo.mutation.SetSubtitle(s)
	return auo
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (auo *AngebotUpdateOne) SetNillableSubtitle(s *string) *AngebotUpdateOne {
	if s != nil {
		auo.SetSubtitle(*s)
	}
	return auo
}

// ClearSubtitle clears the value of the "subtitle" field.
func (auo *AngebotUpdateOne) ClearSubtitle() *AngebotUpdateOne {
	auo.mutation.ClearSubtitle()
	return auo
}

// SetDateStart sets the "date_start" field.
func (auo *AngebotUpdateOne) SetDateStart(t time.Time) *AngebotUpdateOne {
	auo.mutation.SetDateStart(t)
	return auo
}

// SetNillableDateStart sets the "date_start" field if the given value is not nil.
func (auo *AngebotUpdateOne) SetNillableDateStart(t *time.Time) *AngebotUpdateOne {
	if t != nil {
		auo.SetDateStart(*t)
	}
	return auo
}

// SetDateStop sets the "date_stop" field.
func (auo *AngebotUpdateOne) SetDateStop(t time.Time) *AngebotUpdateOne {
	auo.mutation.SetDateStop(t)
	return auo
}

// SetNillableDateStop sets the "date_stop" field if the given value is not nil.
func (auo *AngebotUpdateOne) SetNillableDateStop(t *time.Time) *AngebotUpdateOne {
	if t != nil {
		auo.SetDateStop(*t)
	}
	return auo
}

// SetLink sets the "link" field.
func (auo *AngebotUpdateOne) SetLink(s string) *AngebotUpdateOne {
	auo.mutation.SetLink(s)
	return auo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (auo *AngebotUpdateOne) SetNillableLink(s *string) *AngebotUpdateOne {
	if s != nil {
		auo.SetLink(*s)
	}
	return auo
}

// SetImage sets the "image" field.
func (auo *AngebotUpdateOne) SetImage(s string) *AngebotUpdateOne {
	auo.mutation.SetImage(s)
	return auo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (auo *AngebotUpdateOne) SetNillableImage(s *string) *AngebotUpdateOne {
	if s != nil {
		auo.SetImage(*s)
	}
	return auo
}

// SetAnzeigen sets the "anzeigen" field.
func (auo *AngebotUpdateOne) SetAnzeigen(b bool) *AngebotUpdateOne {
	auo.mutation.SetAnzeigen(b)
	return auo
}

// SetNillableAnzeigen sets the "anzeigen" field if the given value is not nil.
func (auo *AngebotUpdateOne) SetNillableAnzeigen(b *bool) *AngebotUpdateOne {
	if b != nil {
		auo.SetAnzeigen(*b)
	}
	return auo
}

// Mutation returns the AngebotMutation object of the builder.
func (auo *AngebotUpdateOne) Mutation() *AngebotMutation {
	return auo.mutation
}

// Where appends a list predicates to the AngebotUpdate builder.
func (auo *AngebotUpdateOne) Where(ps ...predicate.Angebot) *AngebotUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AngebotUpdateOne) Select(field string, fields ...string) *AngebotUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Angebot entity.
func (auo *AngebotUpdateOne) Save(ctx context.Context) (*Angebot, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AngebotUpdateOne) SaveX(ctx context.Context) *Angebot {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AngebotUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AngebotUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AngebotUpdateOne) sqlSave(ctx context.Context) (_node *Angebot, err error) {
	_spec := sqlgraph.NewUpdateSpec(angebot.Table, angebot.Columns, sqlgraph.NewFieldSpec(angebot.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Angebot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, angebot.FieldID)
		for _, f := range fields {
			if !angebot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != angebot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(angebot.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Subtitle(); ok {
		_spec.SetField(angebot.FieldSubtitle, field.TypeString, value)
	}
	if auo.mutation.SubtitleCleared() {
		_spec.ClearField(angebot.FieldSubtitle, field.TypeString)
	}
	if value, ok := auo.mutation.DateStart(); ok {
		_spec.SetField(angebot.FieldDateStart, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DateStop(); ok {
		_spec.SetField(angebot.FieldDateStop, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Link(); ok {
		_spec.SetField(angebot.FieldLink, field.TypeString, value)
	}
	if value, ok := auo.mutation.Image(); ok {
		_spec.SetField(angebot.FieldImage, field.TypeString, value)
	}
	if value, ok := auo.mutation.Anzeigen(); ok {
		_spec.SetField(angebot.FieldAnzeigen, field.TypeBool, value)
	}
	_node = &Angebot{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{angebot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
