// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"viktor/ent/warenlieferung"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Warenlieferung is the model entity for the Warenlieferung schema.
type Warenlieferung struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Angelegt holds the value of the "angelegt" field.
	Angelegt time.Time `json:"angelegt,omitempty"`
	// Geliefert holds the value of the "geliefert" field.
	Geliefert time.Time `json:"geliefert,omitempty"`
	// AlterPreis holds the value of the "AlterPreis" field.
	AlterPreis float32 `json:"AlterPreis,omitempty"`
	// NeuerPreis holds the value of the "NeuerPreis" field.
	NeuerPreis float32 `json:"NeuerPreis,omitempty"`
	// Preis holds the value of the "Preis" field.
	Preis time.Time `json:"Preis,omitempty"`
	// Artikelnummer holds the value of the "Artikelnummer" field.
	Artikelnummer string `json:"Artikelnummer,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Warenlieferung) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case warenlieferung.FieldAlterPreis, warenlieferung.FieldNeuerPreis:
			values[i] = new(sql.NullFloat64)
		case warenlieferung.FieldID:
			values[i] = new(sql.NullInt64)
		case warenlieferung.FieldName, warenlieferung.FieldArtikelnummer:
			values[i] = new(sql.NullString)
		case warenlieferung.FieldAngelegt, warenlieferung.FieldGeliefert, warenlieferung.FieldPreis:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Warenlieferung fields.
func (w *Warenlieferung) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case warenlieferung.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int32(value.Int64)
		case warenlieferung.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case warenlieferung.FieldAngelegt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field angelegt", values[i])
			} else if value.Valid {
				w.Angelegt = value.Time
			}
		case warenlieferung.FieldGeliefert:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field geliefert", values[i])
			} else if value.Valid {
				w.Geliefert = value.Time
			}
		case warenlieferung.FieldAlterPreis:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field AlterPreis", values[i])
			} else if value.Valid {
				w.AlterPreis = float32(value.Float64)
			}
		case warenlieferung.FieldNeuerPreis:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field NeuerPreis", values[i])
			} else if value.Valid {
				w.NeuerPreis = float32(value.Float64)
			}
		case warenlieferung.FieldPreis:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Preis", values[i])
			} else if value.Valid {
				w.Preis = value.Time
			}
		case warenlieferung.FieldArtikelnummer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Artikelnummer", values[i])
			} else if value.Valid {
				w.Artikelnummer = value.String
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Warenlieferung.
// This includes values selected through modifiers, order, etc.
func (w *Warenlieferung) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// Update returns a builder for updating this Warenlieferung.
// Note that you need to call Warenlieferung.Unwrap() before calling this method if this Warenlieferung
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Warenlieferung) Update() *WarenlieferungUpdateOne {
	return NewWarenlieferungClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Warenlieferung entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Warenlieferung) Unwrap() *Warenlieferung {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Warenlieferung is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Warenlieferung) String() string {
	var builder strings.Builder
	builder.WriteString("Warenlieferung(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("Name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("angelegt=")
	builder.WriteString(w.Angelegt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("geliefert=")
	builder.WriteString(w.Geliefert.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("AlterPreis=")
	builder.WriteString(fmt.Sprintf("%v", w.AlterPreis))
	builder.WriteString(", ")
	builder.WriteString("NeuerPreis=")
	builder.WriteString(fmt.Sprintf("%v", w.NeuerPreis))
	builder.WriteString(", ")
	builder.WriteString("Preis=")
	builder.WriteString(w.Preis.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Artikelnummer=")
	builder.WriteString(w.Artikelnummer)
	builder.WriteByte(')')
	return builder.String()
}

// Warenlieferungs is a parsable slice of Warenlieferung.
type Warenlieferungs []*Warenlieferung
