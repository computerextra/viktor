// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"viktor/ent/abteilung"
	"viktor/ent/mitarbeiter"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AbteilungUpdate is the builder for updating Abteilung entities.
type AbteilungUpdate struct {
	config
	hooks    []Hook
	mutation *AbteilungMutation
}

// Where appends a list predicates to the AbteilungUpdate builder.
func (au *AbteilungUpdate) Where(ps ...predicate.Abteilung) *AbteilungUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AbteilungUpdate) SetName(s string) *AbteilungUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AbteilungUpdate) SetNillableName(s *string) *AbteilungUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// AddMitarbeiterIDs adds the "mitarbeiters" edge to the Mitarbeiter entity by IDs.
func (au *AbteilungUpdate) AddMitarbeiterIDs(ids ...string) *AbteilungUpdate {
	au.mutation.AddMitarbeiterIDs(ids...)
	return au
}

// AddMitarbeiters adds the "mitarbeiters" edges to the Mitarbeiter entity.
func (au *AbteilungUpdate) AddMitarbeiters(m ...*Mitarbeiter) *AbteilungUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMitarbeiterIDs(ids...)
}

// Mutation returns the AbteilungMutation object of the builder.
func (au *AbteilungUpdate) Mutation() *AbteilungMutation {
	return au.mutation
}

// ClearMitarbeiters clears all "mitarbeiters" edges to the Mitarbeiter entity.
func (au *AbteilungUpdate) ClearMitarbeiters() *AbteilungUpdate {
	au.mutation.ClearMitarbeiters()
	return au
}

// RemoveMitarbeiterIDs removes the "mitarbeiters" edge to Mitarbeiter entities by IDs.
func (au *AbteilungUpdate) RemoveMitarbeiterIDs(ids ...string) *AbteilungUpdate {
	au.mutation.RemoveMitarbeiterIDs(ids...)
	return au
}

// RemoveMitarbeiters removes "mitarbeiters" edges to Mitarbeiter entities.
func (au *AbteilungUpdate) RemoveMitarbeiters(m ...*Mitarbeiter) *AbteilungUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMitarbeiterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AbteilungUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AbteilungUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AbteilungUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AbteilungUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AbteilungUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(abteilung.Table, abteilung.Columns, sqlgraph.NewFieldSpec(abteilung.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(abteilung.FieldName, field.TypeString, value)
	}
	if au.mutation.MitarbeitersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abteilung.MitarbeitersTable,
			Columns: []string{abteilung.MitarbeitersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMitarbeitersIDs(); len(nodes) > 0 && !au.mutation.MitarbeitersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abteilung.MitarbeitersTable,
			Columns: []string{abteilung.MitarbeitersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MitarbeitersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abteilung.MitarbeitersTable,
			Columns: []string{abteilung.MitarbeitersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abteilung.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AbteilungUpdateOne is the builder for updating a single Abteilung entity.
type AbteilungUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AbteilungMutation
}

// SetName sets the "name" field.
func (auo *AbteilungUpdateOne) SetName(s string) *AbteilungUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AbteilungUpdateOne) SetNillableName(s *string) *AbteilungUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// AddMitarbeiterIDs adds the "mitarbeiters" edge to the Mitarbeiter entity by IDs.
func (auo *AbteilungUpdateOne) AddMitarbeiterIDs(ids ...string) *AbteilungUpdateOne {
	auo.mutation.AddMitarbeiterIDs(ids...)
	return auo
}

// AddMitarbeiters adds the "mitarbeiters" edges to the Mitarbeiter entity.
func (auo *AbteilungUpdateOne) AddMitarbeiters(m ...*Mitarbeiter) *AbteilungUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMitarbeiterIDs(ids...)
}

// Mutation returns the AbteilungMutation object of the builder.
func (auo *AbteilungUpdateOne) Mutation() *AbteilungMutation {
	return auo.mutation
}

// ClearMitarbeiters clears all "mitarbeiters" edges to the Mitarbeiter entity.
func (auo *AbteilungUpdateOne) ClearMitarbeiters() *AbteilungUpdateOne {
	auo.mutation.ClearMitarbeiters()
	return auo
}

// RemoveMitarbeiterIDs removes the "mitarbeiters" edge to Mitarbeiter entities by IDs.
func (auo *AbteilungUpdateOne) RemoveMitarbeiterIDs(ids ...string) *AbteilungUpdateOne {
	auo.mutation.RemoveMitarbeiterIDs(ids...)
	return auo
}

// RemoveMitarbeiters removes "mitarbeiters" edges to Mitarbeiter entities.
func (auo *AbteilungUpdateOne) RemoveMitarbeiters(m ...*Mitarbeiter) *AbteilungUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMitarbeiterIDs(ids...)
}

// Where appends a list predicates to the AbteilungUpdate builder.
func (auo *AbteilungUpdateOne) Where(ps ...predicate.Abteilung) *AbteilungUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AbteilungUpdateOne) Select(field string, fields ...string) *AbteilungUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Abteilung entity.
func (auo *AbteilungUpdateOne) Save(ctx context.Context) (*Abteilung, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AbteilungUpdateOne) SaveX(ctx context.Context) *Abteilung {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AbteilungUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AbteilungUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AbteilungUpdateOne) sqlSave(ctx context.Context) (_node *Abteilung, err error) {
	_spec := sqlgraph.NewUpdateSpec(abteilung.Table, abteilung.Columns, sqlgraph.NewFieldSpec(abteilung.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Abteilung.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abteilung.FieldID)
		for _, f := range fields {
			if !abteilung.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != abteilung.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(abteilung.FieldName, field.TypeString, value)
	}
	if auo.mutation.MitarbeitersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abteilung.MitarbeitersTable,
			Columns: []string{abteilung.MitarbeitersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMitarbeitersIDs(); len(nodes) > 0 && !auo.mutation.MitarbeitersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abteilung.MitarbeitersTable,
			Columns: []string{abteilung.MitarbeitersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MitarbeitersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abteilung.MitarbeitersTable,
			Columns: []string{abteilung.MitarbeitersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Abteilung{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abteilung.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
