// Code generated by ent, DO NOT EDIT.

package statu

import (
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Statu {
	return predicate.Statu(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Statu {
	return predicate.Statu(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Statu {
	return predicate.Statu(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Statu {
	return predicate.Statu(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Statu {
	return predicate.Statu(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Statu {
	return predicate.Statu(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Statu {
	return predicate.Statu(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Statu {
	return predicate.Statu(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Statu {
	return predicate.Statu(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Statu {
	return predicate.Statu(sql.FieldEQ(FieldStatus, v))
}

// Since applies equality check predicate on the "since" field. It's identical to SinceEQ.
func Since(v string) predicate.Statu {
	return predicate.Statu(sql.FieldEQ(FieldSince, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Statu {
	return predicate.Statu(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Statu {
	return predicate.Statu(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Statu {
	return predicate.Statu(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Statu {
	return predicate.Statu(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Statu {
	return predicate.Statu(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Statu {
	return predicate.Statu(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Statu {
	return predicate.Statu(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Statu {
	return predicate.Statu(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Statu {
	return predicate.Statu(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Statu {
	return predicate.Statu(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Statu {
	return predicate.Statu(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Statu {
	return predicate.Statu(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Statu {
	return predicate.Statu(sql.FieldContainsFold(FieldStatus, v))
}

// SinceEQ applies the EQ predicate on the "since" field.
func SinceEQ(v string) predicate.Statu {
	return predicate.Statu(sql.FieldEQ(FieldSince, v))
}

// SinceNEQ applies the NEQ predicate on the "since" field.
func SinceNEQ(v string) predicate.Statu {
	return predicate.Statu(sql.FieldNEQ(FieldSince, v))
}

// SinceIn applies the In predicate on the "since" field.
func SinceIn(vs ...string) predicate.Statu {
	return predicate.Statu(sql.FieldIn(FieldSince, vs...))
}

// SinceNotIn applies the NotIn predicate on the "since" field.
func SinceNotIn(vs ...string) predicate.Statu {
	return predicate.Statu(sql.FieldNotIn(FieldSince, vs...))
}

// SinceGT applies the GT predicate on the "since" field.
func SinceGT(v string) predicate.Statu {
	return predicate.Statu(sql.FieldGT(FieldSince, v))
}

// SinceGTE applies the GTE predicate on the "since" field.
func SinceGTE(v string) predicate.Statu {
	return predicate.Statu(sql.FieldGTE(FieldSince, v))
}

// SinceLT applies the LT predicate on the "since" field.
func SinceLT(v string) predicate.Statu {
	return predicate.Statu(sql.FieldLT(FieldSince, v))
}

// SinceLTE applies the LTE predicate on the "since" field.
func SinceLTE(v string) predicate.Statu {
	return predicate.Statu(sql.FieldLTE(FieldSince, v))
}

// SinceContains applies the Contains predicate on the "since" field.
func SinceContains(v string) predicate.Statu {
	return predicate.Statu(sql.FieldContains(FieldSince, v))
}

// SinceHasPrefix applies the HasPrefix predicate on the "since" field.
func SinceHasPrefix(v string) predicate.Statu {
	return predicate.Statu(sql.FieldHasPrefix(FieldSince, v))
}

// SinceHasSuffix applies the HasSuffix predicate on the "since" field.
func SinceHasSuffix(v string) predicate.Statu {
	return predicate.Statu(sql.FieldHasSuffix(FieldSince, v))
}

// SinceEqualFold applies the EqualFold predicate on the "since" field.
func SinceEqualFold(v string) predicate.Statu {
	return predicate.Statu(sql.FieldEqualFold(FieldSince, v))
}

// SinceContainsFold applies the ContainsFold predicate on the "since" field.
func SinceContainsFold(v string) predicate.Statu {
	return predicate.Statu(sql.FieldContainsFold(FieldSince, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Statu) predicate.Statu {
	return predicate.Statu(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Statu) predicate.Statu {
	return predicate.Statu(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Statu) predicate.Statu {
	return predicate.Statu(sql.NotPredicates(p))
}
