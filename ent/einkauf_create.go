// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"viktor/ent/einkauf"
	"viktor/ent/mitarbeiter"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EinkaufCreate is the builder for creating a Einkauf entity.
type EinkaufCreate struct {
	config
	mutation *EinkaufMutation
	hooks    []Hook
}

// SetPaypal sets the "Paypal" field.
func (ec *EinkaufCreate) SetPaypal(b bool) *EinkaufCreate {
	ec.mutation.SetPaypal(b)
	return ec
}

// SetAbonniert sets the "Abonniert" field.
func (ec *EinkaufCreate) SetAbonniert(b bool) *EinkaufCreate {
	ec.mutation.SetAbonniert(b)
	return ec
}

// SetGeld sets the "Geld" field.
func (ec *EinkaufCreate) SetGeld(s string) *EinkaufCreate {
	ec.mutation.SetGeld(s)
	return ec
}

// SetNillableGeld sets the "Geld" field if the given value is not nil.
func (ec *EinkaufCreate) SetNillableGeld(s *string) *EinkaufCreate {
	if s != nil {
		ec.SetGeld(*s)
	}
	return ec
}

// SetPfand sets the "Pfand" field.
func (ec *EinkaufCreate) SetPfand(s string) *EinkaufCreate {
	ec.mutation.SetPfand(s)
	return ec
}

// SetNillablePfand sets the "Pfand" field if the given value is not nil.
func (ec *EinkaufCreate) SetNillablePfand(s *string) *EinkaufCreate {
	if s != nil {
		ec.SetPfand(*s)
	}
	return ec
}

// SetDinge sets the "Dinge" field.
func (ec *EinkaufCreate) SetDinge(s string) *EinkaufCreate {
	ec.mutation.SetDinge(s)
	return ec
}

// SetAbgeschickt sets the "Abgeschickt" field.
func (ec *EinkaufCreate) SetAbgeschickt(t time.Time) *EinkaufCreate {
	ec.mutation.SetAbgeschickt(t)
	return ec
}

// SetBild1 sets the "Bild1" field.
func (ec *EinkaufCreate) SetBild1(s string) *EinkaufCreate {
	ec.mutation.SetBild1(s)
	return ec
}

// SetNillableBild1 sets the "Bild1" field if the given value is not nil.
func (ec *EinkaufCreate) SetNillableBild1(s *string) *EinkaufCreate {
	if s != nil {
		ec.SetBild1(*s)
	}
	return ec
}

// SetBild2 sets the "Bild2" field.
func (ec *EinkaufCreate) SetBild2(s string) *EinkaufCreate {
	ec.mutation.SetBild2(s)
	return ec
}

// SetNillableBild2 sets the "Bild2" field if the given value is not nil.
func (ec *EinkaufCreate) SetNillableBild2(s *string) *EinkaufCreate {
	if s != nil {
		ec.SetBild2(*s)
	}
	return ec
}

// SetBild3 sets the "Bild3" field.
func (ec *EinkaufCreate) SetBild3(s string) *EinkaufCreate {
	ec.mutation.SetBild3(s)
	return ec
}

// SetNillableBild3 sets the "Bild3" field if the given value is not nil.
func (ec *EinkaufCreate) SetNillableBild3(s *string) *EinkaufCreate {
	if s != nil {
		ec.SetBild3(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EinkaufCreate) SetID(s string) *EinkaufCreate {
	ec.mutation.SetID(s)
	return ec
}

// SetMitarbeiterID sets the "mitarbeiter" edge to the Mitarbeiter entity by ID.
func (ec *EinkaufCreate) SetMitarbeiterID(id string) *EinkaufCreate {
	ec.mutation.SetMitarbeiterID(id)
	return ec
}

// SetNillableMitarbeiterID sets the "mitarbeiter" edge to the Mitarbeiter entity by ID if the given value is not nil.
func (ec *EinkaufCreate) SetNillableMitarbeiterID(id *string) *EinkaufCreate {
	if id != nil {
		ec = ec.SetMitarbeiterID(*id)
	}
	return ec
}

// SetMitarbeiter sets the "mitarbeiter" edge to the Mitarbeiter entity.
func (ec *EinkaufCreate) SetMitarbeiter(m *Mitarbeiter) *EinkaufCreate {
	return ec.SetMitarbeiterID(m.ID)
}

// Mutation returns the EinkaufMutation object of the builder.
func (ec *EinkaufCreate) Mutation() *EinkaufMutation {
	return ec.mutation
}

// Save creates the Einkauf in the database.
func (ec *EinkaufCreate) Save(ctx context.Context) (*Einkauf, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EinkaufCreate) SaveX(ctx context.Context) *Einkauf {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EinkaufCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EinkaufCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EinkaufCreate) check() error {
	if _, ok := ec.mutation.Paypal(); !ok {
		return &ValidationError{Name: "Paypal", err: errors.New(`ent: missing required field "Einkauf.Paypal"`)}
	}
	if _, ok := ec.mutation.Abonniert(); !ok {
		return &ValidationError{Name: "Abonniert", err: errors.New(`ent: missing required field "Einkauf.Abonniert"`)}
	}
	if _, ok := ec.mutation.Dinge(); !ok {
		return &ValidationError{Name: "Dinge", err: errors.New(`ent: missing required field "Einkauf.Dinge"`)}
	}
	if _, ok := ec.mutation.Abgeschickt(); !ok {
		return &ValidationError{Name: "Abgeschickt", err: errors.New(`ent: missing required field "Einkauf.Abgeschickt"`)}
	}
	return nil
}

func (ec *EinkaufCreate) sqlSave(ctx context.Context) (*Einkauf, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Einkauf.ID type: %T", _spec.ID.Value)
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EinkaufCreate) createSpec() (*Einkauf, *sqlgraph.CreateSpec) {
	var (
		_node = &Einkauf{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(einkauf.Table, sqlgraph.NewFieldSpec(einkauf.FieldID, field.TypeString))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.Paypal(); ok {
		_spec.SetField(einkauf.FieldPaypal, field.TypeBool, value)
		_node.Paypal = value
	}
	if value, ok := ec.mutation.Abonniert(); ok {
		_spec.SetField(einkauf.FieldAbonniert, field.TypeBool, value)
		_node.Abonniert = value
	}
	if value, ok := ec.mutation.Geld(); ok {
		_spec.SetField(einkauf.FieldGeld, field.TypeString, value)
		_node.Geld = value
	}
	if value, ok := ec.mutation.Pfand(); ok {
		_spec.SetField(einkauf.FieldPfand, field.TypeString, value)
		_node.Pfand = value
	}
	if value, ok := ec.mutation.Dinge(); ok {
		_spec.SetField(einkauf.FieldDinge, field.TypeString, value)
		_node.Dinge = value
	}
	if value, ok := ec.mutation.Abgeschickt(); ok {
		_spec.SetField(einkauf.FieldAbgeschickt, field.TypeTime, value)
		_node.Abgeschickt = value
	}
	if value, ok := ec.mutation.Bild1(); ok {
		_spec.SetField(einkauf.FieldBild1, field.TypeString, value)
		_node.Bild1 = value
	}
	if value, ok := ec.mutation.Bild2(); ok {
		_spec.SetField(einkauf.FieldBild2, field.TypeString, value)
		_node.Bild2 = value
	}
	if value, ok := ec.mutation.Bild3(); ok {
		_spec.SetField(einkauf.FieldBild3, field.TypeString, value)
		_node.Bild3 = value
	}
	if nodes := ec.mutation.MitarbeiterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   einkauf.MitarbeiterTable,
			Columns: []string{einkauf.MitarbeiterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EinkaufCreateBulk is the builder for creating many Einkauf entities in bulk.
type EinkaufCreateBulk struct {
	config
	err      error
	builders []*EinkaufCreate
}

// Save creates the Einkauf entities in the database.
func (ecb *EinkaufCreateBulk) Save(ctx context.Context) ([]*Einkauf, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Einkauf, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EinkaufMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EinkaufCreateBulk) SaveX(ctx context.Context) []*Einkauf {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EinkaufCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EinkaufCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
