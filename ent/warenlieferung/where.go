// Code generated by ent, DO NOT EDIT.

package warenlieferung

import (
	"time"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldName, v))
}

// Angelegt applies equality check predicate on the "angelegt" field. It's identical to AngelegtEQ.
func Angelegt(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldAngelegt, v))
}

// Geliefert applies equality check predicate on the "geliefert" field. It's identical to GeliefertEQ.
func Geliefert(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldGeliefert, v))
}

// AlterPreis applies equality check predicate on the "AlterPreis" field. It's identical to AlterPreisEQ.
func AlterPreis(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldAlterPreis, v))
}

// NeuerPreis applies equality check predicate on the "NeuerPreis" field. It's identical to NeuerPreisEQ.
func NeuerPreis(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldNeuerPreis, v))
}

// Preis applies equality check predicate on the "Preis" field. It's identical to PreisEQ.
func Preis(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldPreis, v))
}

// Artikelnummer applies equality check predicate on the "Artikelnummer" field. It's identical to ArtikelnummerEQ.
func Artikelnummer(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldArtikelnummer, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldContainsFold(FieldName, v))
}

// AngelegtEQ applies the EQ predicate on the "angelegt" field.
func AngelegtEQ(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldAngelegt, v))
}

// AngelegtNEQ applies the NEQ predicate on the "angelegt" field.
func AngelegtNEQ(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNEQ(FieldAngelegt, v))
}

// AngelegtIn applies the In predicate on the "angelegt" field.
func AngelegtIn(vs ...time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIn(FieldAngelegt, vs...))
}

// AngelegtNotIn applies the NotIn predicate on the "angelegt" field.
func AngelegtNotIn(vs ...time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotIn(FieldAngelegt, vs...))
}

// AngelegtGT applies the GT predicate on the "angelegt" field.
func AngelegtGT(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGT(FieldAngelegt, v))
}

// AngelegtGTE applies the GTE predicate on the "angelegt" field.
func AngelegtGTE(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGTE(FieldAngelegt, v))
}

// AngelegtLT applies the LT predicate on the "angelegt" field.
func AngelegtLT(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLT(FieldAngelegt, v))
}

// AngelegtLTE applies the LTE predicate on the "angelegt" field.
func AngelegtLTE(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLTE(FieldAngelegt, v))
}

// GeliefertEQ applies the EQ predicate on the "geliefert" field.
func GeliefertEQ(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldGeliefert, v))
}

// GeliefertNEQ applies the NEQ predicate on the "geliefert" field.
func GeliefertNEQ(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNEQ(FieldGeliefert, v))
}

// GeliefertIn applies the In predicate on the "geliefert" field.
func GeliefertIn(vs ...time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIn(FieldGeliefert, vs...))
}

// GeliefertNotIn applies the NotIn predicate on the "geliefert" field.
func GeliefertNotIn(vs ...time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotIn(FieldGeliefert, vs...))
}

// GeliefertGT applies the GT predicate on the "geliefert" field.
func GeliefertGT(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGT(FieldGeliefert, v))
}

// GeliefertGTE applies the GTE predicate on the "geliefert" field.
func GeliefertGTE(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGTE(FieldGeliefert, v))
}

// GeliefertLT applies the LT predicate on the "geliefert" field.
func GeliefertLT(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLT(FieldGeliefert, v))
}

// GeliefertLTE applies the LTE predicate on the "geliefert" field.
func GeliefertLTE(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLTE(FieldGeliefert, v))
}

// GeliefertIsNil applies the IsNil predicate on the "geliefert" field.
func GeliefertIsNil() predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIsNull(FieldGeliefert))
}

// GeliefertNotNil applies the NotNil predicate on the "geliefert" field.
func GeliefertNotNil() predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotNull(FieldGeliefert))
}

// AlterPreisEQ applies the EQ predicate on the "AlterPreis" field.
func AlterPreisEQ(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldAlterPreis, v))
}

// AlterPreisNEQ applies the NEQ predicate on the "AlterPreis" field.
func AlterPreisNEQ(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNEQ(FieldAlterPreis, v))
}

// AlterPreisIn applies the In predicate on the "AlterPreis" field.
func AlterPreisIn(vs ...float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIn(FieldAlterPreis, vs...))
}

// AlterPreisNotIn applies the NotIn predicate on the "AlterPreis" field.
func AlterPreisNotIn(vs ...float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotIn(FieldAlterPreis, vs...))
}

// AlterPreisGT applies the GT predicate on the "AlterPreis" field.
func AlterPreisGT(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGT(FieldAlterPreis, v))
}

// AlterPreisGTE applies the GTE predicate on the "AlterPreis" field.
func AlterPreisGTE(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGTE(FieldAlterPreis, v))
}

// AlterPreisLT applies the LT predicate on the "AlterPreis" field.
func AlterPreisLT(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLT(FieldAlterPreis, v))
}

// AlterPreisLTE applies the LTE predicate on the "AlterPreis" field.
func AlterPreisLTE(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLTE(FieldAlterPreis, v))
}

// AlterPreisIsNil applies the IsNil predicate on the "AlterPreis" field.
func AlterPreisIsNil() predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIsNull(FieldAlterPreis))
}

// AlterPreisNotNil applies the NotNil predicate on the "AlterPreis" field.
func AlterPreisNotNil() predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotNull(FieldAlterPreis))
}

// NeuerPreisEQ applies the EQ predicate on the "NeuerPreis" field.
func NeuerPreisEQ(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldNeuerPreis, v))
}

// NeuerPreisNEQ applies the NEQ predicate on the "NeuerPreis" field.
func NeuerPreisNEQ(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNEQ(FieldNeuerPreis, v))
}

// NeuerPreisIn applies the In predicate on the "NeuerPreis" field.
func NeuerPreisIn(vs ...float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIn(FieldNeuerPreis, vs...))
}

// NeuerPreisNotIn applies the NotIn predicate on the "NeuerPreis" field.
func NeuerPreisNotIn(vs ...float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotIn(FieldNeuerPreis, vs...))
}

// NeuerPreisGT applies the GT predicate on the "NeuerPreis" field.
func NeuerPreisGT(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGT(FieldNeuerPreis, v))
}

// NeuerPreisGTE applies the GTE predicate on the "NeuerPreis" field.
func NeuerPreisGTE(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGTE(FieldNeuerPreis, v))
}

// NeuerPreisLT applies the LT predicate on the "NeuerPreis" field.
func NeuerPreisLT(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLT(FieldNeuerPreis, v))
}

// NeuerPreisLTE applies the LTE predicate on the "NeuerPreis" field.
func NeuerPreisLTE(v float32) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLTE(FieldNeuerPreis, v))
}

// NeuerPreisIsNil applies the IsNil predicate on the "NeuerPreis" field.
func NeuerPreisIsNil() predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIsNull(FieldNeuerPreis))
}

// NeuerPreisNotNil applies the NotNil predicate on the "NeuerPreis" field.
func NeuerPreisNotNil() predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotNull(FieldNeuerPreis))
}

// PreisEQ applies the EQ predicate on the "Preis" field.
func PreisEQ(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldPreis, v))
}

// PreisNEQ applies the NEQ predicate on the "Preis" field.
func PreisNEQ(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNEQ(FieldPreis, v))
}

// PreisIn applies the In predicate on the "Preis" field.
func PreisIn(vs ...time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIn(FieldPreis, vs...))
}

// PreisNotIn applies the NotIn predicate on the "Preis" field.
func PreisNotIn(vs ...time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotIn(FieldPreis, vs...))
}

// PreisGT applies the GT predicate on the "Preis" field.
func PreisGT(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGT(FieldPreis, v))
}

// PreisGTE applies the GTE predicate on the "Preis" field.
func PreisGTE(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGTE(FieldPreis, v))
}

// PreisLT applies the LT predicate on the "Preis" field.
func PreisLT(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLT(FieldPreis, v))
}

// PreisLTE applies the LTE predicate on the "Preis" field.
func PreisLTE(v time.Time) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLTE(FieldPreis, v))
}

// PreisIsNil applies the IsNil predicate on the "Preis" field.
func PreisIsNil() predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIsNull(FieldPreis))
}

// PreisNotNil applies the NotNil predicate on the "Preis" field.
func PreisNotNil() predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotNull(FieldPreis))
}

// ArtikelnummerEQ applies the EQ predicate on the "Artikelnummer" field.
func ArtikelnummerEQ(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEQ(FieldArtikelnummer, v))
}

// ArtikelnummerNEQ applies the NEQ predicate on the "Artikelnummer" field.
func ArtikelnummerNEQ(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNEQ(FieldArtikelnummer, v))
}

// ArtikelnummerIn applies the In predicate on the "Artikelnummer" field.
func ArtikelnummerIn(vs ...string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldIn(FieldArtikelnummer, vs...))
}

// ArtikelnummerNotIn applies the NotIn predicate on the "Artikelnummer" field.
func ArtikelnummerNotIn(vs ...string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldNotIn(FieldArtikelnummer, vs...))
}

// ArtikelnummerGT applies the GT predicate on the "Artikelnummer" field.
func ArtikelnummerGT(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGT(FieldArtikelnummer, v))
}

// ArtikelnummerGTE applies the GTE predicate on the "Artikelnummer" field.
func ArtikelnummerGTE(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldGTE(FieldArtikelnummer, v))
}

// ArtikelnummerLT applies the LT predicate on the "Artikelnummer" field.
func ArtikelnummerLT(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLT(FieldArtikelnummer, v))
}

// ArtikelnummerLTE applies the LTE predicate on the "Artikelnummer" field.
func ArtikelnummerLTE(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldLTE(FieldArtikelnummer, v))
}

// ArtikelnummerContains applies the Contains predicate on the "Artikelnummer" field.
func ArtikelnummerContains(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldContains(FieldArtikelnummer, v))
}

// ArtikelnummerHasPrefix applies the HasPrefix predicate on the "Artikelnummer" field.
func ArtikelnummerHasPrefix(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldHasPrefix(FieldArtikelnummer, v))
}

// ArtikelnummerHasSuffix applies the HasSuffix predicate on the "Artikelnummer" field.
func ArtikelnummerHasSuffix(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldHasSuffix(FieldArtikelnummer, v))
}

// ArtikelnummerEqualFold applies the EqualFold predicate on the "Artikelnummer" field.
func ArtikelnummerEqualFold(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldEqualFold(FieldArtikelnummer, v))
}

// ArtikelnummerContainsFold applies the ContainsFold predicate on the "Artikelnummer" field.
func ArtikelnummerContainsFold(v string) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.FieldContainsFold(FieldArtikelnummer, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Warenlieferung) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Warenlieferung) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Warenlieferung) predicate.Warenlieferung {
	return predicate.Warenlieferung(sql.NotPredicates(p))
}
