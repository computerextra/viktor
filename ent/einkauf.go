// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"viktor/ent/einkauf"
	"viktor/ent/mitarbeiter"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Einkauf is the model entity for the Einkauf schema.
type Einkauf struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Paypal holds the value of the "Paypal" field.
	Paypal bool `json:"Paypal,omitempty"`
	// Abonniert holds the value of the "Abonniert" field.
	Abonniert bool `json:"Abonniert,omitempty"`
	// Geld holds the value of the "Geld" field.
	Geld string `json:"Geld,omitempty"`
	// Pfand holds the value of the "Pfand" field.
	Pfand string `json:"Pfand,omitempty"`
	// Dinge holds the value of the "Dinge" field.
	Dinge string `json:"Dinge,omitempty"`
	// Abgeschickt holds the value of the "Abgeschickt" field.
	Abgeschickt time.Time `json:"Abgeschickt,omitempty"`
	// Bild1 holds the value of the "Bild1" field.
	Bild1 string `json:"Bild1,omitempty"`
	// Bild2 holds the value of the "Bild2" field.
	Bild2 string `json:"Bild2,omitempty"`
	// Bild3 holds the value of the "Bild3" field.
	Bild3 string `json:"Bild3,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EinkaufQuery when eager-loading is set.
	Edges        EinkaufEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EinkaufEdges holds the relations/edges for other nodes in the graph.
type EinkaufEdges struct {
	// Mitarbeiter holds the value of the mitarbeiter edge.
	Mitarbeiter *Mitarbeiter `json:"mitarbeiter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MitarbeiterOrErr returns the Mitarbeiter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EinkaufEdges) MitarbeiterOrErr() (*Mitarbeiter, error) {
	if e.Mitarbeiter != nil {
		return e.Mitarbeiter, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: mitarbeiter.Label}
	}
	return nil, &NotLoadedError{edge: "mitarbeiter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Einkauf) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case einkauf.FieldPaypal, einkauf.FieldAbonniert:
			values[i] = new(sql.NullBool)
		case einkauf.FieldID, einkauf.FieldGeld, einkauf.FieldPfand, einkauf.FieldDinge, einkauf.FieldBild1, einkauf.FieldBild2, einkauf.FieldBild3:
			values[i] = new(sql.NullString)
		case einkauf.FieldAbgeschickt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Einkauf fields.
func (e *Einkauf) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case einkauf.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case einkauf.FieldPaypal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Paypal", values[i])
			} else if value.Valid {
				e.Paypal = value.Bool
			}
		case einkauf.FieldAbonniert:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Abonniert", values[i])
			} else if value.Valid {
				e.Abonniert = value.Bool
			}
		case einkauf.FieldGeld:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Geld", values[i])
			} else if value.Valid {
				e.Geld = value.String
			}
		case einkauf.FieldPfand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Pfand", values[i])
			} else if value.Valid {
				e.Pfand = value.String
			}
		case einkauf.FieldDinge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Dinge", values[i])
			} else if value.Valid {
				e.Dinge = value.String
			}
		case einkauf.FieldAbgeschickt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Abgeschickt", values[i])
			} else if value.Valid {
				e.Abgeschickt = value.Time
			}
		case einkauf.FieldBild1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Bild1", values[i])
			} else if value.Valid {
				e.Bild1 = value.String
			}
		case einkauf.FieldBild2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Bild2", values[i])
			} else if value.Valid {
				e.Bild2 = value.String
			}
		case einkauf.FieldBild3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Bild3", values[i])
			} else if value.Valid {
				e.Bild3 = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Einkauf.
// This includes values selected through modifiers, order, etc.
func (e *Einkauf) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryMitarbeiter queries the "mitarbeiter" edge of the Einkauf entity.
func (e *Einkauf) QueryMitarbeiter() *MitarbeiterQuery {
	return NewEinkaufClient(e.config).QueryMitarbeiter(e)
}

// Update returns a builder for updating this Einkauf.
// Note that you need to call Einkauf.Unwrap() before calling this method if this Einkauf
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Einkauf) Update() *EinkaufUpdateOne {
	return NewEinkaufClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Einkauf entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Einkauf) Unwrap() *Einkauf {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Einkauf is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Einkauf) String() string {
	var builder strings.Builder
	builder.WriteString("Einkauf(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("Paypal=")
	builder.WriteString(fmt.Sprintf("%v", e.Paypal))
	builder.WriteString(", ")
	builder.WriteString("Abonniert=")
	builder.WriteString(fmt.Sprintf("%v", e.Abonniert))
	builder.WriteString(", ")
	builder.WriteString("Geld=")
	builder.WriteString(e.Geld)
	builder.WriteString(", ")
	builder.WriteString("Pfand=")
	builder.WriteString(e.Pfand)
	builder.WriteString(", ")
	builder.WriteString("Dinge=")
	builder.WriteString(e.Dinge)
	builder.WriteString(", ")
	builder.WriteString("Abgeschickt=")
	builder.WriteString(e.Abgeschickt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Bild1=")
	builder.WriteString(e.Bild1)
	builder.WriteString(", ")
	builder.WriteString("Bild2=")
	builder.WriteString(e.Bild2)
	builder.WriteString(", ")
	builder.WriteString("Bild3=")
	builder.WriteString(e.Bild3)
	builder.WriteByte(')')
	return builder.String()
}

// Einkaufs is a parsable slice of Einkauf.
type Einkaufs []*Einkauf
