// Code generated by ent, DO NOT EDIT.

package angebot

import (
	"time"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Angebot {
	return predicate.Angebot(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Angebot {
	return predicate.Angebot(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Angebot {
	return predicate.Angebot(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Angebot {
	return predicate.Angebot(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Angebot {
	return predicate.Angebot(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Angebot {
	return predicate.Angebot(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Angebot {
	return predicate.Angebot(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Angebot {
	return predicate.Angebot(sql.FieldContainsFold(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldTitle, v))
}

// Subtitle applies equality check predicate on the "subtitle" field. It's identical to SubtitleEQ.
func Subtitle(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldSubtitle, v))
}

// DateStart applies equality check predicate on the "date_start" field. It's identical to DateStartEQ.
func DateStart(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldDateStart, v))
}

// DateStop applies equality check predicate on the "date_stop" field. It's identical to DateStopEQ.
func DateStop(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldDateStop, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldLink, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldImage, v))
}

// Anzeigen applies equality check predicate on the "anzeigen" field. It's identical to AnzeigenEQ.
func Anzeigen(v bool) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldAnzeigen, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Angebot {
	return predicate.Angebot(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Angebot {
	return predicate.Angebot(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldContainsFold(FieldTitle, v))
}

// SubtitleEQ applies the EQ predicate on the "subtitle" field.
func SubtitleEQ(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldSubtitle, v))
}

// SubtitleNEQ applies the NEQ predicate on the "subtitle" field.
func SubtitleNEQ(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldNEQ(FieldSubtitle, v))
}

// SubtitleIn applies the In predicate on the "subtitle" field.
func SubtitleIn(vs ...string) predicate.Angebot {
	return predicate.Angebot(sql.FieldIn(FieldSubtitle, vs...))
}

// SubtitleNotIn applies the NotIn predicate on the "subtitle" field.
func SubtitleNotIn(vs ...string) predicate.Angebot {
	return predicate.Angebot(sql.FieldNotIn(FieldSubtitle, vs...))
}

// SubtitleGT applies the GT predicate on the "subtitle" field.
func SubtitleGT(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldGT(FieldSubtitle, v))
}

// SubtitleGTE applies the GTE predicate on the "subtitle" field.
func SubtitleGTE(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldGTE(FieldSubtitle, v))
}

// SubtitleLT applies the LT predicate on the "subtitle" field.
func SubtitleLT(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldLT(FieldSubtitle, v))
}

// SubtitleLTE applies the LTE predicate on the "subtitle" field.
func SubtitleLTE(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldLTE(FieldSubtitle, v))
}

// SubtitleContains applies the Contains predicate on the "subtitle" field.
func SubtitleContains(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldContains(FieldSubtitle, v))
}

// SubtitleHasPrefix applies the HasPrefix predicate on the "subtitle" field.
func SubtitleHasPrefix(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldHasPrefix(FieldSubtitle, v))
}

// SubtitleHasSuffix applies the HasSuffix predicate on the "subtitle" field.
func SubtitleHasSuffix(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldHasSuffix(FieldSubtitle, v))
}

// SubtitleIsNil applies the IsNil predicate on the "subtitle" field.
func SubtitleIsNil() predicate.Angebot {
	return predicate.Angebot(sql.FieldIsNull(FieldSubtitle))
}

// SubtitleNotNil applies the NotNil predicate on the "subtitle" field.
func SubtitleNotNil() predicate.Angebot {
	return predicate.Angebot(sql.FieldNotNull(FieldSubtitle))
}

// SubtitleEqualFold applies the EqualFold predicate on the "subtitle" field.
func SubtitleEqualFold(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEqualFold(FieldSubtitle, v))
}

// SubtitleContainsFold applies the ContainsFold predicate on the "subtitle" field.
func SubtitleContainsFold(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldContainsFold(FieldSubtitle, v))
}

// DateStartEQ applies the EQ predicate on the "date_start" field.
func DateStartEQ(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldDateStart, v))
}

// DateStartNEQ applies the NEQ predicate on the "date_start" field.
func DateStartNEQ(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldNEQ(FieldDateStart, v))
}

// DateStartIn applies the In predicate on the "date_start" field.
func DateStartIn(vs ...time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldIn(FieldDateStart, vs...))
}

// DateStartNotIn applies the NotIn predicate on the "date_start" field.
func DateStartNotIn(vs ...time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldNotIn(FieldDateStart, vs...))
}

// DateStartGT applies the GT predicate on the "date_start" field.
func DateStartGT(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldGT(FieldDateStart, v))
}

// DateStartGTE applies the GTE predicate on the "date_start" field.
func DateStartGTE(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldGTE(FieldDateStart, v))
}

// DateStartLT applies the LT predicate on the "date_start" field.
func DateStartLT(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldLT(FieldDateStart, v))
}

// DateStartLTE applies the LTE predicate on the "date_start" field.
func DateStartLTE(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldLTE(FieldDateStart, v))
}

// DateStopEQ applies the EQ predicate on the "date_stop" field.
func DateStopEQ(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldDateStop, v))
}

// DateStopNEQ applies the NEQ predicate on the "date_stop" field.
func DateStopNEQ(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldNEQ(FieldDateStop, v))
}

// DateStopIn applies the In predicate on the "date_stop" field.
func DateStopIn(vs ...time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldIn(FieldDateStop, vs...))
}

// DateStopNotIn applies the NotIn predicate on the "date_stop" field.
func DateStopNotIn(vs ...time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldNotIn(FieldDateStop, vs...))
}

// DateStopGT applies the GT predicate on the "date_stop" field.
func DateStopGT(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldGT(FieldDateStop, v))
}

// DateStopGTE applies the GTE predicate on the "date_stop" field.
func DateStopGTE(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldGTE(FieldDateStop, v))
}

// DateStopLT applies the LT predicate on the "date_stop" field.
func DateStopLT(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldLT(FieldDateStop, v))
}

// DateStopLTE applies the LTE predicate on the "date_stop" field.
func DateStopLTE(v time.Time) predicate.Angebot {
	return predicate.Angebot(sql.FieldLTE(FieldDateStop, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.Angebot {
	return predicate.Angebot(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.Angebot {
	return predicate.Angebot(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldHasSuffix(FieldLink, v))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldContainsFold(FieldLink, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Angebot {
	return predicate.Angebot(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Angebot {
	return predicate.Angebot(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Angebot {
	return predicate.Angebot(sql.FieldContainsFold(FieldImage, v))
}

// AnzeigenEQ applies the EQ predicate on the "anzeigen" field.
func AnzeigenEQ(v bool) predicate.Angebot {
	return predicate.Angebot(sql.FieldEQ(FieldAnzeigen, v))
}

// AnzeigenNEQ applies the NEQ predicate on the "anzeigen" field.
func AnzeigenNEQ(v bool) predicate.Angebot {
	return predicate.Angebot(sql.FieldNEQ(FieldAnzeigen, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Angebot) predicate.Angebot {
	return predicate.Angebot(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Angebot) predicate.Angebot {
	return predicate.Angebot(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Angebot) predicate.Angebot {
	return predicate.Angebot(sql.NotPredicates(p))
}
