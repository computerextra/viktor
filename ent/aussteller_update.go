// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"viktor/ent/aussteller"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AusstellerUpdate is the builder for updating Aussteller entities.
type AusstellerUpdate struct {
	config
	hooks    []Hook
	mutation *AusstellerMutation
}

// Where appends a list predicates to the AusstellerUpdate builder.
func (au *AusstellerUpdate) Where(ps ...predicate.Aussteller) *AusstellerUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetArtikelnummer sets the "Artikelnummer" field.
func (au *AusstellerUpdate) SetArtikelnummer(s string) *AusstellerUpdate {
	au.mutation.SetArtikelnummer(s)
	return au
}

// SetNillableArtikelnummer sets the "Artikelnummer" field if the given value is not nil.
func (au *AusstellerUpdate) SetNillableArtikelnummer(s *string) *AusstellerUpdate {
	if s != nil {
		au.SetArtikelnummer(*s)
	}
	return au
}

// SetArtikelname sets the "Artikelname" field.
func (au *AusstellerUpdate) SetArtikelname(s string) *AusstellerUpdate {
	au.mutation.SetArtikelname(s)
	return au
}

// SetNillableArtikelname sets the "Artikelname" field if the given value is not nil.
func (au *AusstellerUpdate) SetNillableArtikelname(s *string) *AusstellerUpdate {
	if s != nil {
		au.SetArtikelname(*s)
	}
	return au
}

// SetSpecs sets the "Specs" field.
func (au *AusstellerUpdate) SetSpecs(s string) *AusstellerUpdate {
	au.mutation.SetSpecs(s)
	return au
}

// SetNillableSpecs sets the "Specs" field if the given value is not nil.
func (au *AusstellerUpdate) SetNillableSpecs(s *string) *AusstellerUpdate {
	if s != nil {
		au.SetSpecs(*s)
	}
	return au
}

// SetPreis sets the "Preis" field.
func (au *AusstellerUpdate) SetPreis(f float32) *AusstellerUpdate {
	au.mutation.ResetPreis()
	au.mutation.SetPreis(f)
	return au
}

// SetNillablePreis sets the "Preis" field if the given value is not nil.
func (au *AusstellerUpdate) SetNillablePreis(f *float32) *AusstellerUpdate {
	if f != nil {
		au.SetPreis(*f)
	}
	return au
}

// AddPreis adds f to the "Preis" field.
func (au *AusstellerUpdate) AddPreis(f float32) *AusstellerUpdate {
	au.mutation.AddPreis(f)
	return au
}

// SetBild sets the "Bild" field.
func (au *AusstellerUpdate) SetBild(s string) *AusstellerUpdate {
	au.mutation.SetBild(s)
	return au
}

// SetNillableBild sets the "Bild" field if the given value is not nil.
func (au *AusstellerUpdate) SetNillableBild(s *string) *AusstellerUpdate {
	if s != nil {
		au.SetBild(*s)
	}
	return au
}

// ClearBild clears the value of the "Bild" field.
func (au *AusstellerUpdate) ClearBild() *AusstellerUpdate {
	au.mutation.ClearBild()
	return au
}

// Mutation returns the AusstellerMutation object of the builder.
func (au *AusstellerUpdate) Mutation() *AusstellerMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AusstellerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AusstellerUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AusstellerUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AusstellerUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AusstellerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(aussteller.Table, aussteller.Columns, sqlgraph.NewFieldSpec(aussteller.FieldID, field.TypeInt32))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Artikelnummer(); ok {
		_spec.SetField(aussteller.FieldArtikelnummer, field.TypeString, value)
	}
	if value, ok := au.mutation.Artikelname(); ok {
		_spec.SetField(aussteller.FieldArtikelname, field.TypeString, value)
	}
	if value, ok := au.mutation.Specs(); ok {
		_spec.SetField(aussteller.FieldSpecs, field.TypeString, value)
	}
	if value, ok := au.mutation.Preis(); ok {
		_spec.SetField(aussteller.FieldPreis, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.AddedPreis(); ok {
		_spec.AddField(aussteller.FieldPreis, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.Bild(); ok {
		_spec.SetField(aussteller.FieldBild, field.TypeString, value)
	}
	if au.mutation.BildCleared() {
		_spec.ClearField(aussteller.FieldBild, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aussteller.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AusstellerUpdateOne is the builder for updating a single Aussteller entity.
type AusstellerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AusstellerMutation
}

// SetArtikelnummer sets the "Artikelnummer" field.
func (auo *AusstellerUpdateOne) SetArtikelnummer(s string) *AusstellerUpdateOne {
	auo.mutation.SetArtikelnummer(s)
	return auo
}

// SetNillableArtikelnummer sets the "Artikelnummer" field if the given value is not nil.
func (auo *AusstellerUpdateOne) SetNillableArtikelnummer(s *string) *AusstellerUpdateOne {
	if s != nil {
		auo.SetArtikelnummer(*s)
	}
	return auo
}

// SetArtikelname sets the "Artikelname" field.
func (auo *AusstellerUpdateOne) SetArtikelname(s string) *AusstellerUpdateOne {
	auo.mutation.SetArtikelname(s)
	return auo
}

// SetNillableArtikelname sets the "Artikelname" field if the given value is not nil.
func (auo *AusstellerUpdateOne) SetNillableArtikelname(s *string) *AusstellerUpdateOne {
	if s != nil {
		auo.SetArtikelname(*s)
	}
	return auo
}

// SetSpecs sets the "Specs" field.
func (auo *AusstellerUpdateOne) SetSpecs(s string) *AusstellerUpdateOne {
	auo.mutation.SetSpecs(s)
	return auo
}

// SetNillableSpecs sets the "Specs" field if the given value is not nil.
func (auo *AusstellerUpdateOne) SetNillableSpecs(s *string) *AusstellerUpdateOne {
	if s != nil {
		auo.SetSpecs(*s)
	}
	return auo
}

// SetPreis sets the "Preis" field.
func (auo *AusstellerUpdateOne) SetPreis(f float32) *AusstellerUpdateOne {
	auo.mutation.ResetPreis()
	auo.mutation.SetPreis(f)
	return auo
}

// SetNillablePreis sets the "Preis" field if the given value is not nil.
func (auo *AusstellerUpdateOne) SetNillablePreis(f *float32) *AusstellerUpdateOne {
	if f != nil {
		auo.SetPreis(*f)
	}
	return auo
}

// AddPreis adds f to the "Preis" field.
func (auo *AusstellerUpdateOne) AddPreis(f float32) *AusstellerUpdateOne {
	auo.mutation.AddPreis(f)
	return auo
}

// SetBild sets the "Bild" field.
func (auo *AusstellerUpdateOne) SetBild(s string) *AusstellerUpdateOne {
	auo.mutation.SetBild(s)
	return auo
}

// SetNillableBild sets the "Bild" field if the given value is not nil.
func (auo *AusstellerUpdateOne) SetNillableBild(s *string) *AusstellerUpdateOne {
	if s != nil {
		auo.SetBild(*s)
	}
	return auo
}

// ClearBild clears the value of the "Bild" field.
func (auo *AusstellerUpdateOne) ClearBild() *AusstellerUpdateOne {
	auo.mutation.ClearBild()
	return auo
}

// Mutation returns the AusstellerMutation object of the builder.
func (auo *AusstellerUpdateOne) Mutation() *AusstellerMutation {
	return auo.mutation
}

// Where appends a list predicates to the AusstellerUpdate builder.
func (auo *AusstellerUpdateOne) Where(ps ...predicate.Aussteller) *AusstellerUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AusstellerUpdateOne) Select(field string, fields ...string) *AusstellerUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Aussteller entity.
func (auo *AusstellerUpdateOne) Save(ctx context.Context) (*Aussteller, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AusstellerUpdateOne) SaveX(ctx context.Context) *Aussteller {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AusstellerUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AusstellerUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AusstellerUpdateOne) sqlSave(ctx context.Context) (_node *Aussteller, err error) {
	_spec := sqlgraph.NewUpdateSpec(aussteller.Table, aussteller.Columns, sqlgraph.NewFieldSpec(aussteller.FieldID, field.TypeInt32))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Aussteller.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, aussteller.FieldID)
		for _, f := range fields {
			if !aussteller.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != aussteller.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Artikelnummer(); ok {
		_spec.SetField(aussteller.FieldArtikelnummer, field.TypeString, value)
	}
	if value, ok := auo.mutation.Artikelname(); ok {
		_spec.SetField(aussteller.FieldArtikelname, field.TypeString, value)
	}
	if value, ok := auo.mutation.Specs(); ok {
		_spec.SetField(aussteller.FieldSpecs, field.TypeString, value)
	}
	if value, ok := auo.mutation.Preis(); ok {
		_spec.SetField(aussteller.FieldPreis, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.AddedPreis(); ok {
		_spec.AddField(aussteller.FieldPreis, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.Bild(); ok {
		_spec.SetField(aussteller.FieldBild, field.TypeString, value)
	}
	if auo.mutation.BildCleared() {
		_spec.ClearField(aussteller.FieldBild, field.TypeString)
	}
	_node = &Aussteller{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aussteller.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
