// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"viktor/ent/pdf"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PdfUpdate is the builder for updating Pdf entities.
type PdfUpdate struct {
	config
	hooks    []Hook
	mutation *PdfMutation
}

// Where appends a list predicates to the PdfUpdate builder.
func (pu *PdfUpdate) Where(ps ...predicate.Pdf) *PdfUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PdfUpdate) SetTitle(s string) *PdfUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PdfUpdate) SetNillableTitle(s *string) *PdfUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetBody sets the "body" field.
func (pu *PdfUpdate) SetBody(s string) *PdfUpdate {
	pu.mutation.SetBody(s)
	return pu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (pu *PdfUpdate) SetNillableBody(s *string) *PdfUpdate {
	if s != nil {
		pu.SetBody(*s)
	}
	return pu
}

// Mutation returns the PdfMutation object of the builder.
func (pu *PdfUpdate) Mutation() *PdfMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PdfUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PdfUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PdfUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PdfUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PdfUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pdf.Table, pdf.Columns, sqlgraph.NewFieldSpec(pdf.FieldID, field.TypeInt32))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(pdf.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Body(); ok {
		_spec.SetField(pdf.FieldBody, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pdf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PdfUpdateOne is the builder for updating a single Pdf entity.
type PdfUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PdfMutation
}

// SetTitle sets the "title" field.
func (puo *PdfUpdateOne) SetTitle(s string) *PdfUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PdfUpdateOne) SetNillableTitle(s *string) *PdfUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetBody sets the "body" field.
func (puo *PdfUpdateOne) SetBody(s string) *PdfUpdateOne {
	puo.mutation.SetBody(s)
	return puo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (puo *PdfUpdateOne) SetNillableBody(s *string) *PdfUpdateOne {
	if s != nil {
		puo.SetBody(*s)
	}
	return puo
}

// Mutation returns the PdfMutation object of the builder.
func (puo *PdfUpdateOne) Mutation() *PdfMutation {
	return puo.mutation
}

// Where appends a list predicates to the PdfUpdate builder.
func (puo *PdfUpdateOne) Where(ps ...predicate.Pdf) *PdfUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PdfUpdateOne) Select(field string, fields ...string) *PdfUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pdf entity.
func (puo *PdfUpdateOne) Save(ctx context.Context) (*Pdf, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PdfUpdateOne) SaveX(ctx context.Context) *Pdf {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PdfUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PdfUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PdfUpdateOne) sqlSave(ctx context.Context) (_node *Pdf, err error) {
	_spec := sqlgraph.NewUpdateSpec(pdf.Table, pdf.Columns, sqlgraph.NewFieldSpec(pdf.FieldID, field.TypeInt32))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pdf.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pdf.FieldID)
		for _, f := range fields {
			if !pdf.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pdf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(pdf.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Body(); ok {
		_spec.SetField(pdf.FieldBody, field.TypeString, value)
	}
	_node = &Pdf{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pdf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
