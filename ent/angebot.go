// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"viktor/ent/angebot"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Angebot is the model entity for the Angebot schema.
type Angebot struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Subtitle holds the value of the "subtitle" field.
	Subtitle string `json:"subtitle,omitempty"`
	// DateStart holds the value of the "date_start" field.
	DateStart time.Time `json:"date_start,omitempty"`
	// DateStop holds the value of the "date_stop" field.
	DateStop time.Time `json:"date_stop,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Anzeigen holds the value of the "anzeigen" field.
	Anzeigen     bool `json:"anzeigen,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Angebot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case angebot.FieldAnzeigen:
			values[i] = new(sql.NullBool)
		case angebot.FieldID, angebot.FieldTitle, angebot.FieldSubtitle, angebot.FieldLink, angebot.FieldImage:
			values[i] = new(sql.NullString)
		case angebot.FieldDateStart, angebot.FieldDateStop:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Angebot fields.
func (a *Angebot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case angebot.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case angebot.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case angebot.FieldSubtitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subtitle", values[i])
			} else if value.Valid {
				a.Subtitle = value.String
			}
		case angebot.FieldDateStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_start", values[i])
			} else if value.Valid {
				a.DateStart = value.Time
			}
		case angebot.FieldDateStop:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_stop", values[i])
			} else if value.Valid {
				a.DateStop = value.Time
			}
		case angebot.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				a.Link = value.String
			}
		case angebot.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				a.Image = value.String
			}
		case angebot.FieldAnzeigen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field anzeigen", values[i])
			} else if value.Valid {
				a.Anzeigen = value.Bool
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Angebot.
// This includes values selected through modifiers, order, etc.
func (a *Angebot) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Angebot.
// Note that you need to call Angebot.Unwrap() before calling this method if this Angebot
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Angebot) Update() *AngebotUpdateOne {
	return NewAngebotClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Angebot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Angebot) Unwrap() *Angebot {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Angebot is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Angebot) String() string {
	var builder strings.Builder
	builder.WriteString("Angebot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("title=")
	builder.WriteString(a.Title)
	builder.WriteString(", ")
	builder.WriteString("subtitle=")
	builder.WriteString(a.Subtitle)
	builder.WriteString(", ")
	builder.WriteString("date_start=")
	builder.WriteString(a.DateStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("date_stop=")
	builder.WriteString(a.DateStop.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(a.Link)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(a.Image)
	builder.WriteString(", ")
	builder.WriteString("anzeigen=")
	builder.WriteString(fmt.Sprintf("%v", a.Anzeigen))
	builder.WriteByte(')')
	return builder.String()
}

// Angebots is a parsable slice of Angebot.
type Angebots []*Angebot
