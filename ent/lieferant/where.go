// Code generated by ent, DO NOT EDIT.

package lieferant

import (
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldContainsFold(FieldID, id))
}

// Firma applies equality check predicate on the "Firma" field. It's identical to FirmaEQ.
func Firma(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEQ(FieldFirma, v))
}

// Kundennummer applies equality check predicate on the "Kundennummer" field. It's identical to KundennummerEQ.
func Kundennummer(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEQ(FieldKundennummer, v))
}

// Webseite applies equality check predicate on the "Webseite" field. It's identical to WebseiteEQ.
func Webseite(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEQ(FieldWebseite, v))
}

// FirmaEQ applies the EQ predicate on the "Firma" field.
func FirmaEQ(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEQ(FieldFirma, v))
}

// FirmaNEQ applies the NEQ predicate on the "Firma" field.
func FirmaNEQ(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldNEQ(FieldFirma, v))
}

// FirmaIn applies the In predicate on the "Firma" field.
func FirmaIn(vs ...string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldIn(FieldFirma, vs...))
}

// FirmaNotIn applies the NotIn predicate on the "Firma" field.
func FirmaNotIn(vs ...string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldNotIn(FieldFirma, vs...))
}

// FirmaGT applies the GT predicate on the "Firma" field.
func FirmaGT(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldGT(FieldFirma, v))
}

// FirmaGTE applies the GTE predicate on the "Firma" field.
func FirmaGTE(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldGTE(FieldFirma, v))
}

// FirmaLT applies the LT predicate on the "Firma" field.
func FirmaLT(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldLT(FieldFirma, v))
}

// FirmaLTE applies the LTE predicate on the "Firma" field.
func FirmaLTE(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldLTE(FieldFirma, v))
}

// FirmaContains applies the Contains predicate on the "Firma" field.
func FirmaContains(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldContains(FieldFirma, v))
}

// FirmaHasPrefix applies the HasPrefix predicate on the "Firma" field.
func FirmaHasPrefix(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldHasPrefix(FieldFirma, v))
}

// FirmaHasSuffix applies the HasSuffix predicate on the "Firma" field.
func FirmaHasSuffix(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldHasSuffix(FieldFirma, v))
}

// FirmaEqualFold applies the EqualFold predicate on the "Firma" field.
func FirmaEqualFold(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEqualFold(FieldFirma, v))
}

// FirmaContainsFold applies the ContainsFold predicate on the "Firma" field.
func FirmaContainsFold(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldContainsFold(FieldFirma, v))
}

// KundennummerEQ applies the EQ predicate on the "Kundennummer" field.
func KundennummerEQ(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEQ(FieldKundennummer, v))
}

// KundennummerNEQ applies the NEQ predicate on the "Kundennummer" field.
func KundennummerNEQ(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldNEQ(FieldKundennummer, v))
}

// KundennummerIn applies the In predicate on the "Kundennummer" field.
func KundennummerIn(vs ...string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldIn(FieldKundennummer, vs...))
}

// KundennummerNotIn applies the NotIn predicate on the "Kundennummer" field.
func KundennummerNotIn(vs ...string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldNotIn(FieldKundennummer, vs...))
}

// KundennummerGT applies the GT predicate on the "Kundennummer" field.
func KundennummerGT(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldGT(FieldKundennummer, v))
}

// KundennummerGTE applies the GTE predicate on the "Kundennummer" field.
func KundennummerGTE(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldGTE(FieldKundennummer, v))
}

// KundennummerLT applies the LT predicate on the "Kundennummer" field.
func KundennummerLT(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldLT(FieldKundennummer, v))
}

// KundennummerLTE applies the LTE predicate on the "Kundennummer" field.
func KundennummerLTE(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldLTE(FieldKundennummer, v))
}

// KundennummerContains applies the Contains predicate on the "Kundennummer" field.
func KundennummerContains(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldContains(FieldKundennummer, v))
}

// KundennummerHasPrefix applies the HasPrefix predicate on the "Kundennummer" field.
func KundennummerHasPrefix(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldHasPrefix(FieldKundennummer, v))
}

// KundennummerHasSuffix applies the HasSuffix predicate on the "Kundennummer" field.
func KundennummerHasSuffix(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldHasSuffix(FieldKundennummer, v))
}

// KundennummerIsNil applies the IsNil predicate on the "Kundennummer" field.
func KundennummerIsNil() predicate.Lieferant {
	return predicate.Lieferant(sql.FieldIsNull(FieldKundennummer))
}

// KundennummerNotNil applies the NotNil predicate on the "Kundennummer" field.
func KundennummerNotNil() predicate.Lieferant {
	return predicate.Lieferant(sql.FieldNotNull(FieldKundennummer))
}

// KundennummerEqualFold applies the EqualFold predicate on the "Kundennummer" field.
func KundennummerEqualFold(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEqualFold(FieldKundennummer, v))
}

// KundennummerContainsFold applies the ContainsFold predicate on the "Kundennummer" field.
func KundennummerContainsFold(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldContainsFold(FieldKundennummer, v))
}

// WebseiteEQ applies the EQ predicate on the "Webseite" field.
func WebseiteEQ(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEQ(FieldWebseite, v))
}

// WebseiteNEQ applies the NEQ predicate on the "Webseite" field.
func WebseiteNEQ(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldNEQ(FieldWebseite, v))
}

// WebseiteIn applies the In predicate on the "Webseite" field.
func WebseiteIn(vs ...string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldIn(FieldWebseite, vs...))
}

// WebseiteNotIn applies the NotIn predicate on the "Webseite" field.
func WebseiteNotIn(vs ...string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldNotIn(FieldWebseite, vs...))
}

// WebseiteGT applies the GT predicate on the "Webseite" field.
func WebseiteGT(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldGT(FieldWebseite, v))
}

// WebseiteGTE applies the GTE predicate on the "Webseite" field.
func WebseiteGTE(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldGTE(FieldWebseite, v))
}

// WebseiteLT applies the LT predicate on the "Webseite" field.
func WebseiteLT(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldLT(FieldWebseite, v))
}

// WebseiteLTE applies the LTE predicate on the "Webseite" field.
func WebseiteLTE(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldLTE(FieldWebseite, v))
}

// WebseiteContains applies the Contains predicate on the "Webseite" field.
func WebseiteContains(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldContains(FieldWebseite, v))
}

// WebseiteHasPrefix applies the HasPrefix predicate on the "Webseite" field.
func WebseiteHasPrefix(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldHasPrefix(FieldWebseite, v))
}

// WebseiteHasSuffix applies the HasSuffix predicate on the "Webseite" field.
func WebseiteHasSuffix(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldHasSuffix(FieldWebseite, v))
}

// WebseiteIsNil applies the IsNil predicate on the "Webseite" field.
func WebseiteIsNil() predicate.Lieferant {
	return predicate.Lieferant(sql.FieldIsNull(FieldWebseite))
}

// WebseiteNotNil applies the NotNil predicate on the "Webseite" field.
func WebseiteNotNil() predicate.Lieferant {
	return predicate.Lieferant(sql.FieldNotNull(FieldWebseite))
}

// WebseiteEqualFold applies the EqualFold predicate on the "Webseite" field.
func WebseiteEqualFold(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldEqualFold(FieldWebseite, v))
}

// WebseiteContainsFold applies the ContainsFold predicate on the "Webseite" field.
func WebseiteContainsFold(v string) predicate.Lieferant {
	return predicate.Lieferant(sql.FieldContainsFold(FieldWebseite, v))
}

// HasAnsprechpartners applies the HasEdge predicate on the "ansprechpartners" edge.
func HasAnsprechpartners() predicate.Lieferant {
	return predicate.Lieferant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnsprechpartnersTable, AnsprechpartnersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnsprechpartnersWith applies the HasEdge predicate on the "ansprechpartners" edge with a given conditions (other predicates).
func HasAnsprechpartnersWith(preds ...predicate.Ansprechpartner) predicate.Lieferant {
	return predicate.Lieferant(func(s *sql.Selector) {
		step := newAnsprechpartnersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Lieferant) predicate.Lieferant {
	return predicate.Lieferant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Lieferant) predicate.Lieferant {
	return predicate.Lieferant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Lieferant) predicate.Lieferant {
	return predicate.Lieferant(sql.NotPredicates(p))
}
