// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"viktor/ent/predicate"
	"viktor/ent/warenlieferung"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WarenlieferungUpdate is the builder for updating Warenlieferung entities.
type WarenlieferungUpdate struct {
	config
	hooks    []Hook
	mutation *WarenlieferungMutation
}

// Where appends a list predicates to the WarenlieferungUpdate builder.
func (wu *WarenlieferungUpdate) Where(ps ...predicate.Warenlieferung) *WarenlieferungUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetName sets the "Name" field.
func (wu *WarenlieferungUpdate) SetName(s string) *WarenlieferungUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (wu *WarenlieferungUpdate) SetNillableName(s *string) *WarenlieferungUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetAngelegt sets the "angelegt" field.
func (wu *WarenlieferungUpdate) SetAngelegt(t time.Time) *WarenlieferungUpdate {
	wu.mutation.SetAngelegt(t)
	return wu
}

// SetNillableAngelegt sets the "angelegt" field if the given value is not nil.
func (wu *WarenlieferungUpdate) SetNillableAngelegt(t *time.Time) *WarenlieferungUpdate {
	if t != nil {
		wu.SetAngelegt(*t)
	}
	return wu
}

// SetGeliefert sets the "geliefert" field.
func (wu *WarenlieferungUpdate) SetGeliefert(t time.Time) *WarenlieferungUpdate {
	wu.mutation.SetGeliefert(t)
	return wu
}

// SetNillableGeliefert sets the "geliefert" field if the given value is not nil.
func (wu *WarenlieferungUpdate) SetNillableGeliefert(t *time.Time) *WarenlieferungUpdate {
	if t != nil {
		wu.SetGeliefert(*t)
	}
	return wu
}

// ClearGeliefert clears the value of the "geliefert" field.
func (wu *WarenlieferungUpdate) ClearGeliefert() *WarenlieferungUpdate {
	wu.mutation.ClearGeliefert()
	return wu
}

// SetAlterPreis sets the "AlterPreis" field.
func (wu *WarenlieferungUpdate) SetAlterPreis(f float32) *WarenlieferungUpdate {
	wu.mutation.ResetAlterPreis()
	wu.mutation.SetAlterPreis(f)
	return wu
}

// SetNillableAlterPreis sets the "AlterPreis" field if the given value is not nil.
func (wu *WarenlieferungUpdate) SetNillableAlterPreis(f *float32) *WarenlieferungUpdate {
	if f != nil {
		wu.SetAlterPreis(*f)
	}
	return wu
}

// AddAlterPreis adds f to the "AlterPreis" field.
func (wu *WarenlieferungUpdate) AddAlterPreis(f float32) *WarenlieferungUpdate {
	wu.mutation.AddAlterPreis(f)
	return wu
}

// ClearAlterPreis clears the value of the "AlterPreis" field.
func (wu *WarenlieferungUpdate) ClearAlterPreis() *WarenlieferungUpdate {
	wu.mutation.ClearAlterPreis()
	return wu
}

// SetNeuerPreis sets the "NeuerPreis" field.
func (wu *WarenlieferungUpdate) SetNeuerPreis(f float32) *WarenlieferungUpdate {
	wu.mutation.ResetNeuerPreis()
	wu.mutation.SetNeuerPreis(f)
	return wu
}

// SetNillableNeuerPreis sets the "NeuerPreis" field if the given value is not nil.
func (wu *WarenlieferungUpdate) SetNillableNeuerPreis(f *float32) *WarenlieferungUpdate {
	if f != nil {
		wu.SetNeuerPreis(*f)
	}
	return wu
}

// AddNeuerPreis adds f to the "NeuerPreis" field.
func (wu *WarenlieferungUpdate) AddNeuerPreis(f float32) *WarenlieferungUpdate {
	wu.mutation.AddNeuerPreis(f)
	return wu
}

// ClearNeuerPreis clears the value of the "NeuerPreis" field.
func (wu *WarenlieferungUpdate) ClearNeuerPreis() *WarenlieferungUpdate {
	wu.mutation.ClearNeuerPreis()
	return wu
}

// SetPreis sets the "Preis" field.
func (wu *WarenlieferungUpdate) SetPreis(t time.Time) *WarenlieferungUpdate {
	wu.mutation.SetPreis(t)
	return wu
}

// SetNillablePreis sets the "Preis" field if the given value is not nil.
func (wu *WarenlieferungUpdate) SetNillablePreis(t *time.Time) *WarenlieferungUpdate {
	if t != nil {
		wu.SetPreis(*t)
	}
	return wu
}

// ClearPreis clears the value of the "Preis" field.
func (wu *WarenlieferungUpdate) ClearPreis() *WarenlieferungUpdate {
	wu.mutation.ClearPreis()
	return wu
}

// SetArtikelnummer sets the "Artikelnummer" field.
func (wu *WarenlieferungUpdate) SetArtikelnummer(s string) *WarenlieferungUpdate {
	wu.mutation.SetArtikelnummer(s)
	return wu
}

// SetNillableArtikelnummer sets the "Artikelnummer" field if the given value is not nil.
func (wu *WarenlieferungUpdate) SetNillableArtikelnummer(s *string) *WarenlieferungUpdate {
	if s != nil {
		wu.SetArtikelnummer(*s)
	}
	return wu
}

// Mutation returns the WarenlieferungMutation object of the builder.
func (wu *WarenlieferungUpdate) Mutation() *WarenlieferungMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WarenlieferungUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WarenlieferungUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WarenlieferungUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WarenlieferungUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WarenlieferungUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(warenlieferung.Table, warenlieferung.Columns, sqlgraph.NewFieldSpec(warenlieferung.FieldID, field.TypeInt32))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(warenlieferung.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Angelegt(); ok {
		_spec.SetField(warenlieferung.FieldAngelegt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.Geliefert(); ok {
		_spec.SetField(warenlieferung.FieldGeliefert, field.TypeTime, value)
	}
	if wu.mutation.GeliefertCleared() {
		_spec.ClearField(warenlieferung.FieldGeliefert, field.TypeTime)
	}
	if value, ok := wu.mutation.AlterPreis(); ok {
		_spec.SetField(warenlieferung.FieldAlterPreis, field.TypeFloat32, value)
	}
	if value, ok := wu.mutation.AddedAlterPreis(); ok {
		_spec.AddField(warenlieferung.FieldAlterPreis, field.TypeFloat32, value)
	}
	if wu.mutation.AlterPreisCleared() {
		_spec.ClearField(warenlieferung.FieldAlterPreis, field.TypeFloat32)
	}
	if value, ok := wu.mutation.NeuerPreis(); ok {
		_spec.SetField(warenlieferung.FieldNeuerPreis, field.TypeFloat32, value)
	}
	if value, ok := wu.mutation.AddedNeuerPreis(); ok {
		_spec.AddField(warenlieferung.FieldNeuerPreis, field.TypeFloat32, value)
	}
	if wu.mutation.NeuerPreisCleared() {
		_spec.ClearField(warenlieferung.FieldNeuerPreis, field.TypeFloat32)
	}
	if value, ok := wu.mutation.Preis(); ok {
		_spec.SetField(warenlieferung.FieldPreis, field.TypeTime, value)
	}
	if wu.mutation.PreisCleared() {
		_spec.ClearField(warenlieferung.FieldPreis, field.TypeTime)
	}
	if value, ok := wu.mutation.Artikelnummer(); ok {
		_spec.SetField(warenlieferung.FieldArtikelnummer, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warenlieferung.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WarenlieferungUpdateOne is the builder for updating a single Warenlieferung entity.
type WarenlieferungUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WarenlieferungMutation
}

// SetName sets the "Name" field.
func (wuo *WarenlieferungUpdateOne) SetName(s string) *WarenlieferungUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (wuo *WarenlieferungUpdateOne) SetNillableName(s *string) *WarenlieferungUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetAngelegt sets the "angelegt" field.
func (wuo *WarenlieferungUpdateOne) SetAngelegt(t time.Time) *WarenlieferungUpdateOne {
	wuo.mutation.SetAngelegt(t)
	return wuo
}

// SetNillableAngelegt sets the "angelegt" field if the given value is not nil.
func (wuo *WarenlieferungUpdateOne) SetNillableAngelegt(t *time.Time) *WarenlieferungUpdateOne {
	if t != nil {
		wuo.SetAngelegt(*t)
	}
	return wuo
}

// SetGeliefert sets the "geliefert" field.
func (wuo *WarenlieferungUpdateOne) SetGeliefert(t time.Time) *WarenlieferungUpdateOne {
	wuo.mutation.SetGeliefert(t)
	return wuo
}

// SetNillableGeliefert sets the "geliefert" field if the given value is not nil.
func (wuo *WarenlieferungUpdateOne) SetNillableGeliefert(t *time.Time) *WarenlieferungUpdateOne {
	if t != nil {
		wuo.SetGeliefert(*t)
	}
	return wuo
}

// ClearGeliefert clears the value of the "geliefert" field.
func (wuo *WarenlieferungUpdateOne) ClearGeliefert() *WarenlieferungUpdateOne {
	wuo.mutation.ClearGeliefert()
	return wuo
}

// SetAlterPreis sets the "AlterPreis" field.
func (wuo *WarenlieferungUpdateOne) SetAlterPreis(f float32) *WarenlieferungUpdateOne {
	wuo.mutation.ResetAlterPreis()
	wuo.mutation.SetAlterPreis(f)
	return wuo
}

// SetNillableAlterPreis sets the "AlterPreis" field if the given value is not nil.
func (wuo *WarenlieferungUpdateOne) SetNillableAlterPreis(f *float32) *WarenlieferungUpdateOne {
	if f != nil {
		wuo.SetAlterPreis(*f)
	}
	return wuo
}

// AddAlterPreis adds f to the "AlterPreis" field.
func (wuo *WarenlieferungUpdateOne) AddAlterPreis(f float32) *WarenlieferungUpdateOne {
	wuo.mutation.AddAlterPreis(f)
	return wuo
}

// ClearAlterPreis clears the value of the "AlterPreis" field.
func (wuo *WarenlieferungUpdateOne) ClearAlterPreis() *WarenlieferungUpdateOne {
	wuo.mutation.ClearAlterPreis()
	return wuo
}

// SetNeuerPreis sets the "NeuerPreis" field.
func (wuo *WarenlieferungUpdateOne) SetNeuerPreis(f float32) *WarenlieferungUpdateOne {
	wuo.mutation.ResetNeuerPreis()
	wuo.mutation.SetNeuerPreis(f)
	return wuo
}

// SetNillableNeuerPreis sets the "NeuerPreis" field if the given value is not nil.
func (wuo *WarenlieferungUpdateOne) SetNillableNeuerPreis(f *float32) *WarenlieferungUpdateOne {
	if f != nil {
		wuo.SetNeuerPreis(*f)
	}
	return wuo
}

// AddNeuerPreis adds f to the "NeuerPreis" field.
func (wuo *WarenlieferungUpdateOne) AddNeuerPreis(f float32) *WarenlieferungUpdateOne {
	wuo.mutation.AddNeuerPreis(f)
	return wuo
}

// ClearNeuerPreis clears the value of the "NeuerPreis" field.
func (wuo *WarenlieferungUpdateOne) ClearNeuerPreis() *WarenlieferungUpdateOne {
	wuo.mutation.ClearNeuerPreis()
	return wuo
}

// SetPreis sets the "Preis" field.
func (wuo *WarenlieferungUpdateOne) SetPreis(t time.Time) *WarenlieferungUpdateOne {
	wuo.mutation.SetPreis(t)
	return wuo
}

// SetNillablePreis sets the "Preis" field if the given value is not nil.
func (wuo *WarenlieferungUpdateOne) SetNillablePreis(t *time.Time) *WarenlieferungUpdateOne {
	if t != nil {
		wuo.SetPreis(*t)
	}
	return wuo
}

// ClearPreis clears the value of the "Preis" field.
func (wuo *WarenlieferungUpdateOne) ClearPreis() *WarenlieferungUpdateOne {
	wuo.mutation.ClearPreis()
	return wuo
}

// SetArtikelnummer sets the "Artikelnummer" field.
func (wuo *WarenlieferungUpdateOne) SetArtikelnummer(s string) *WarenlieferungUpdateOne {
	wuo.mutation.SetArtikelnummer(s)
	return wuo
}

// SetNillableArtikelnummer sets the "Artikelnummer" field if the given value is not nil.
func (wuo *WarenlieferungUpdateOne) SetNillableArtikelnummer(s *string) *WarenlieferungUpdateOne {
	if s != nil {
		wuo.SetArtikelnummer(*s)
	}
	return wuo
}

// Mutation returns the WarenlieferungMutation object of the builder.
func (wuo *WarenlieferungUpdateOne) Mutation() *WarenlieferungMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WarenlieferungUpdate builder.
func (wuo *WarenlieferungUpdateOne) Where(ps ...predicate.Warenlieferung) *WarenlieferungUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WarenlieferungUpdateOne) Select(field string, fields ...string) *WarenlieferungUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Warenlieferung entity.
func (wuo *WarenlieferungUpdateOne) Save(ctx context.Context) (*Warenlieferung, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WarenlieferungUpdateOne) SaveX(ctx context.Context) *Warenlieferung {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WarenlieferungUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WarenlieferungUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WarenlieferungUpdateOne) sqlSave(ctx context.Context) (_node *Warenlieferung, err error) {
	_spec := sqlgraph.NewUpdateSpec(warenlieferung.Table, warenlieferung.Columns, sqlgraph.NewFieldSpec(warenlieferung.FieldID, field.TypeInt32))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Warenlieferung.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, warenlieferung.FieldID)
		for _, f := range fields {
			if !warenlieferung.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != warenlieferung.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(warenlieferung.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Angelegt(); ok {
		_spec.SetField(warenlieferung.FieldAngelegt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.Geliefert(); ok {
		_spec.SetField(warenlieferung.FieldGeliefert, field.TypeTime, value)
	}
	if wuo.mutation.GeliefertCleared() {
		_spec.ClearField(warenlieferung.FieldGeliefert, field.TypeTime)
	}
	if value, ok := wuo.mutation.AlterPreis(); ok {
		_spec.SetField(warenlieferung.FieldAlterPreis, field.TypeFloat32, value)
	}
	if value, ok := wuo.mutation.AddedAlterPreis(); ok {
		_spec.AddField(warenlieferung.FieldAlterPreis, field.TypeFloat32, value)
	}
	if wuo.mutation.AlterPreisCleared() {
		_spec.ClearField(warenlieferung.FieldAlterPreis, field.TypeFloat32)
	}
	if value, ok := wuo.mutation.NeuerPreis(); ok {
		_spec.SetField(warenlieferung.FieldNeuerPreis, field.TypeFloat32, value)
	}
	if value, ok := wuo.mutation.AddedNeuerPreis(); ok {
		_spec.AddField(warenlieferung.FieldNeuerPreis, field.TypeFloat32, value)
	}
	if wuo.mutation.NeuerPreisCleared() {
		_spec.ClearField(warenlieferung.FieldNeuerPreis, field.TypeFloat32)
	}
	if value, ok := wuo.mutation.Preis(); ok {
		_spec.SetField(warenlieferung.FieldPreis, field.TypeTime, value)
	}
	if wuo.mutation.PreisCleared() {
		_spec.ClearField(warenlieferung.FieldPreis, field.TypeTime)
	}
	if value, ok := wuo.mutation.Artikelnummer(); ok {
		_spec.SetField(warenlieferung.FieldArtikelnummer, field.TypeString, value)
	}
	_node = &Warenlieferung{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warenlieferung.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
