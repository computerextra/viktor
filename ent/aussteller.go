// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"viktor/ent/aussteller"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Aussteller is the model entity for the Aussteller schema.
type Aussteller struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Artikelnummer holds the value of the "Artikelnummer" field.
	Artikelnummer string `json:"Artikelnummer,omitempty"`
	// Artikelname holds the value of the "Artikelname" field.
	Artikelname string `json:"Artikelname,omitempty"`
	// Specs holds the value of the "Specs" field.
	Specs string `json:"Specs,omitempty"`
	// Preis holds the value of the "Preis" field.
	Preis float32 `json:"Preis,omitempty"`
	// Bild holds the value of the "Bild" field.
	Bild         string `json:"Bild,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Aussteller) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case aussteller.FieldPreis:
			values[i] = new(sql.NullFloat64)
		case aussteller.FieldID:
			values[i] = new(sql.NullInt64)
		case aussteller.FieldArtikelnummer, aussteller.FieldArtikelname, aussteller.FieldSpecs, aussteller.FieldBild:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Aussteller fields.
func (a *Aussteller) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case aussteller.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int32(value.Int64)
		case aussteller.FieldArtikelnummer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Artikelnummer", values[i])
			} else if value.Valid {
				a.Artikelnummer = value.String
			}
		case aussteller.FieldArtikelname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Artikelname", values[i])
			} else if value.Valid {
				a.Artikelname = value.String
			}
		case aussteller.FieldSpecs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Specs", values[i])
			} else if value.Valid {
				a.Specs = value.String
			}
		case aussteller.FieldPreis:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Preis", values[i])
			} else if value.Valid {
				a.Preis = float32(value.Float64)
			}
		case aussteller.FieldBild:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Bild", values[i])
			} else if value.Valid {
				a.Bild = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Aussteller.
// This includes values selected through modifiers, order, etc.
func (a *Aussteller) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Aussteller.
// Note that you need to call Aussteller.Unwrap() before calling this method if this Aussteller
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Aussteller) Update() *AusstellerUpdateOne {
	return NewAusstellerClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Aussteller entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Aussteller) Unwrap() *Aussteller {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Aussteller is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Aussteller) String() string {
	var builder strings.Builder
	builder.WriteString("Aussteller(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("Artikelnummer=")
	builder.WriteString(a.Artikelnummer)
	builder.WriteString(", ")
	builder.WriteString("Artikelname=")
	builder.WriteString(a.Artikelname)
	builder.WriteString(", ")
	builder.WriteString("Specs=")
	builder.WriteString(a.Specs)
	builder.WriteString(", ")
	builder.WriteString("Preis=")
	builder.WriteString(fmt.Sprintf("%v", a.Preis))
	builder.WriteString(", ")
	builder.WriteString("Bild=")
	builder.WriteString(a.Bild)
	builder.WriteByte(')')
	return builder.String()
}

// Ausstellers is a parsable slice of Aussteller.
type Ausstellers []*Aussteller
