// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"viktor/ent/angebot"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AngebotCreate is the builder for creating a Angebot entity.
type AngebotCreate struct {
	config
	mutation *AngebotMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ac *AngebotCreate) SetTitle(s string) *AngebotCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetSubtitle sets the "subtitle" field.
func (ac *AngebotCreate) SetSubtitle(s string) *AngebotCreate {
	ac.mutation.SetSubtitle(s)
	return ac
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (ac *AngebotCreate) SetNillableSubtitle(s *string) *AngebotCreate {
	if s != nil {
		ac.SetSubtitle(*s)
	}
	return ac
}

// SetDateStart sets the "date_start" field.
func (ac *AngebotCreate) SetDateStart(t time.Time) *AngebotCreate {
	ac.mutation.SetDateStart(t)
	return ac
}

// SetDateStop sets the "date_stop" field.
func (ac *AngebotCreate) SetDateStop(t time.Time) *AngebotCreate {
	ac.mutation.SetDateStop(t)
	return ac
}

// SetLink sets the "link" field.
func (ac *AngebotCreate) SetLink(s string) *AngebotCreate {
	ac.mutation.SetLink(s)
	return ac
}

// SetImage sets the "image" field.
func (ac *AngebotCreate) SetImage(s string) *AngebotCreate {
	ac.mutation.SetImage(s)
	return ac
}

// SetAnzeigen sets the "anzeigen" field.
func (ac *AngebotCreate) SetAnzeigen(b bool) *AngebotCreate {
	ac.mutation.SetAnzeigen(b)
	return ac
}

// SetID sets the "id" field.
func (ac *AngebotCreate) SetID(s string) *AngebotCreate {
	ac.mutation.SetID(s)
	return ac
}

// Mutation returns the AngebotMutation object of the builder.
func (ac *AngebotCreate) Mutation() *AngebotMutation {
	return ac.mutation
}

// Save creates the Angebot in the database.
func (ac *AngebotCreate) Save(ctx context.Context) (*Angebot, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AngebotCreate) SaveX(ctx context.Context) *Angebot {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AngebotCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AngebotCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AngebotCreate) check() error {
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Angebot.title"`)}
	}
	if _, ok := ac.mutation.DateStart(); !ok {
		return &ValidationError{Name: "date_start", err: errors.New(`ent: missing required field "Angebot.date_start"`)}
	}
	if _, ok := ac.mutation.DateStop(); !ok {
		return &ValidationError{Name: "date_stop", err: errors.New(`ent: missing required field "Angebot.date_stop"`)}
	}
	if _, ok := ac.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "Angebot.link"`)}
	}
	if _, ok := ac.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Angebot.image"`)}
	}
	if _, ok := ac.mutation.Anzeigen(); !ok {
		return &ValidationError{Name: "anzeigen", err: errors.New(`ent: missing required field "Angebot.anzeigen"`)}
	}
	return nil
}

func (ac *AngebotCreate) sqlSave(ctx context.Context) (*Angebot, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Angebot.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AngebotCreate) createSpec() (*Angebot, *sqlgraph.CreateSpec) {
	var (
		_node = &Angebot{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(angebot.Table, sqlgraph.NewFieldSpec(angebot.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.SetField(angebot.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ac.mutation.Subtitle(); ok {
		_spec.SetField(angebot.FieldSubtitle, field.TypeString, value)
		_node.Subtitle = value
	}
	if value, ok := ac.mutation.DateStart(); ok {
		_spec.SetField(angebot.FieldDateStart, field.TypeTime, value)
		_node.DateStart = value
	}
	if value, ok := ac.mutation.DateStop(); ok {
		_spec.SetField(angebot.FieldDateStop, field.TypeTime, value)
		_node.DateStop = value
	}
	if value, ok := ac.mutation.Link(); ok {
		_spec.SetField(angebot.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := ac.mutation.Image(); ok {
		_spec.SetField(angebot.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := ac.mutation.Anzeigen(); ok {
		_spec.SetField(angebot.FieldAnzeigen, field.TypeBool, value)
		_node.Anzeigen = value
	}
	return _node, _spec
}

// AngebotCreateBulk is the builder for creating many Angebot entities in bulk.
type AngebotCreateBulk struct {
	config
	err      error
	builders []*AngebotCreate
}

// Save creates the Angebot entities in the database.
func (acb *AngebotCreateBulk) Save(ctx context.Context) ([]*Angebot, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Angebot, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AngebotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AngebotCreateBulk) SaveX(ctx context.Context) []*Angebot {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AngebotCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AngebotCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
