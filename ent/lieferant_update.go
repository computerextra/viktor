// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"viktor/ent/ansprechpartner"
	"viktor/ent/lieferant"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LieferantUpdate is the builder for updating Lieferant entities.
type LieferantUpdate struct {
	config
	hooks    []Hook
	mutation *LieferantMutation
}

// Where appends a list predicates to the LieferantUpdate builder.
func (lu *LieferantUpdate) Where(ps ...predicate.Lieferant) *LieferantUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetFirma sets the "Firma" field.
func (lu *LieferantUpdate) SetFirma(s string) *LieferantUpdate {
	lu.mutation.SetFirma(s)
	return lu
}

// SetNillableFirma sets the "Firma" field if the given value is not nil.
func (lu *LieferantUpdate) SetNillableFirma(s *string) *LieferantUpdate {
	if s != nil {
		lu.SetFirma(*s)
	}
	return lu
}

// SetKundennummer sets the "Kundennummer" field.
func (lu *LieferantUpdate) SetKundennummer(s string) *LieferantUpdate {
	lu.mutation.SetKundennummer(s)
	return lu
}

// SetNillableKundennummer sets the "Kundennummer" field if the given value is not nil.
func (lu *LieferantUpdate) SetNillableKundennummer(s *string) *LieferantUpdate {
	if s != nil {
		lu.SetKundennummer(*s)
	}
	return lu
}

// ClearKundennummer clears the value of the "Kundennummer" field.
func (lu *LieferantUpdate) ClearKundennummer() *LieferantUpdate {
	lu.mutation.ClearKundennummer()
	return lu
}

// SetWebseite sets the "Webseite" field.
func (lu *LieferantUpdate) SetWebseite(s string) *LieferantUpdate {
	lu.mutation.SetWebseite(s)
	return lu
}

// SetNillableWebseite sets the "Webseite" field if the given value is not nil.
func (lu *LieferantUpdate) SetNillableWebseite(s *string) *LieferantUpdate {
	if s != nil {
		lu.SetWebseite(*s)
	}
	return lu
}

// ClearWebseite clears the value of the "Webseite" field.
func (lu *LieferantUpdate) ClearWebseite() *LieferantUpdate {
	lu.mutation.ClearWebseite()
	return lu
}

// AddAnsprechpartnerIDs adds the "ansprechpartners" edge to the Ansprechpartner entity by IDs.
func (lu *LieferantUpdate) AddAnsprechpartnerIDs(ids ...string) *LieferantUpdate {
	lu.mutation.AddAnsprechpartnerIDs(ids...)
	return lu
}

// AddAnsprechpartners adds the "ansprechpartners" edges to the Ansprechpartner entity.
func (lu *LieferantUpdate) AddAnsprechpartners(a ...*Ansprechpartner) *LieferantUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lu.AddAnsprechpartnerIDs(ids...)
}

// Mutation returns the LieferantMutation object of the builder.
func (lu *LieferantUpdate) Mutation() *LieferantMutation {
	return lu.mutation
}

// ClearAnsprechpartners clears all "ansprechpartners" edges to the Ansprechpartner entity.
func (lu *LieferantUpdate) ClearAnsprechpartners() *LieferantUpdate {
	lu.mutation.ClearAnsprechpartners()
	return lu
}

// RemoveAnsprechpartnerIDs removes the "ansprechpartners" edge to Ansprechpartner entities by IDs.
func (lu *LieferantUpdate) RemoveAnsprechpartnerIDs(ids ...string) *LieferantUpdate {
	lu.mutation.RemoveAnsprechpartnerIDs(ids...)
	return lu
}

// RemoveAnsprechpartners removes "ansprechpartners" edges to Ansprechpartner entities.
func (lu *LieferantUpdate) RemoveAnsprechpartners(a ...*Ansprechpartner) *LieferantUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lu.RemoveAnsprechpartnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LieferantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LieferantUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LieferantUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LieferantUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LieferantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(lieferant.Table, lieferant.Columns, sqlgraph.NewFieldSpec(lieferant.FieldID, field.TypeString))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Firma(); ok {
		_spec.SetField(lieferant.FieldFirma, field.TypeString, value)
	}
	if value, ok := lu.mutation.Kundennummer(); ok {
		_spec.SetField(lieferant.FieldKundennummer, field.TypeString, value)
	}
	if lu.mutation.KundennummerCleared() {
		_spec.ClearField(lieferant.FieldKundennummer, field.TypeString)
	}
	if value, ok := lu.mutation.Webseite(); ok {
		_spec.SetField(lieferant.FieldWebseite, field.TypeString, value)
	}
	if lu.mutation.WebseiteCleared() {
		_spec.ClearField(lieferant.FieldWebseite, field.TypeString)
	}
	if lu.mutation.AnsprechpartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lieferant.AnsprechpartnersTable,
			Columns: []string{lieferant.AnsprechpartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedAnsprechpartnersIDs(); len(nodes) > 0 && !lu.mutation.AnsprechpartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lieferant.AnsprechpartnersTable,
			Columns: []string{lieferant.AnsprechpartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.AnsprechpartnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lieferant.AnsprechpartnersTable,
			Columns: []string{lieferant.AnsprechpartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lieferant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LieferantUpdateOne is the builder for updating a single Lieferant entity.
type LieferantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LieferantMutation
}

// SetFirma sets the "Firma" field.
func (luo *LieferantUpdateOne) SetFirma(s string) *LieferantUpdateOne {
	luo.mutation.SetFirma(s)
	return luo
}

// SetNillableFirma sets the "Firma" field if the given value is not nil.
func (luo *LieferantUpdateOne) SetNillableFirma(s *string) *LieferantUpdateOne {
	if s != nil {
		luo.SetFirma(*s)
	}
	return luo
}

// SetKundennummer sets the "Kundennummer" field.
func (luo *LieferantUpdateOne) SetKundennummer(s string) *LieferantUpdateOne {
	luo.mutation.SetKundennummer(s)
	return luo
}

// SetNillableKundennummer sets the "Kundennummer" field if the given value is not nil.
func (luo *LieferantUpdateOne) SetNillableKundennummer(s *string) *LieferantUpdateOne {
	if s != nil {
		luo.SetKundennummer(*s)
	}
	return luo
}

// ClearKundennummer clears the value of the "Kundennummer" field.
func (luo *LieferantUpdateOne) ClearKundennummer() *LieferantUpdateOne {
	luo.mutation.ClearKundennummer()
	return luo
}

// SetWebseite sets the "Webseite" field.
func (luo *LieferantUpdateOne) SetWebseite(s string) *LieferantUpdateOne {
	luo.mutation.SetWebseite(s)
	return luo
}

// SetNillableWebseite sets the "Webseite" field if the given value is not nil.
func (luo *LieferantUpdateOne) SetNillableWebseite(s *string) *LieferantUpdateOne {
	if s != nil {
		luo.SetWebseite(*s)
	}
	return luo
}

// ClearWebseite clears the value of the "Webseite" field.
func (luo *LieferantUpdateOne) ClearWebseite() *LieferantUpdateOne {
	luo.mutation.ClearWebseite()
	return luo
}

// AddAnsprechpartnerIDs adds the "ansprechpartners" edge to the Ansprechpartner entity by IDs.
func (luo *LieferantUpdateOne) AddAnsprechpartnerIDs(ids ...string) *LieferantUpdateOne {
	luo.mutation.AddAnsprechpartnerIDs(ids...)
	return luo
}

// AddAnsprechpartners adds the "ansprechpartners" edges to the Ansprechpartner entity.
func (luo *LieferantUpdateOne) AddAnsprechpartners(a ...*Ansprechpartner) *LieferantUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return luo.AddAnsprechpartnerIDs(ids...)
}

// Mutation returns the LieferantMutation object of the builder.
func (luo *LieferantUpdateOne) Mutation() *LieferantMutation {
	return luo.mutation
}

// ClearAnsprechpartners clears all "ansprechpartners" edges to the Ansprechpartner entity.
func (luo *LieferantUpdateOne) ClearAnsprechpartners() *LieferantUpdateOne {
	luo.mutation.ClearAnsprechpartners()
	return luo
}

// RemoveAnsprechpartnerIDs removes the "ansprechpartners" edge to Ansprechpartner entities by IDs.
func (luo *LieferantUpdateOne) RemoveAnsprechpartnerIDs(ids ...string) *LieferantUpdateOne {
	luo.mutation.RemoveAnsprechpartnerIDs(ids...)
	return luo
}

// RemoveAnsprechpartners removes "ansprechpartners" edges to Ansprechpartner entities.
func (luo *LieferantUpdateOne) RemoveAnsprechpartners(a ...*Ansprechpartner) *LieferantUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return luo.RemoveAnsprechpartnerIDs(ids...)
}

// Where appends a list predicates to the LieferantUpdate builder.
func (luo *LieferantUpdateOne) Where(ps ...predicate.Lieferant) *LieferantUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LieferantUpdateOne) Select(field string, fields ...string) *LieferantUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lieferant entity.
func (luo *LieferantUpdateOne) Save(ctx context.Context) (*Lieferant, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LieferantUpdateOne) SaveX(ctx context.Context) *Lieferant {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LieferantUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LieferantUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LieferantUpdateOne) sqlSave(ctx context.Context) (_node *Lieferant, err error) {
	_spec := sqlgraph.NewUpdateSpec(lieferant.Table, lieferant.Columns, sqlgraph.NewFieldSpec(lieferant.FieldID, field.TypeString))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lieferant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lieferant.FieldID)
		for _, f := range fields {
			if !lieferant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lieferant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Firma(); ok {
		_spec.SetField(lieferant.FieldFirma, field.TypeString, value)
	}
	if value, ok := luo.mutation.Kundennummer(); ok {
		_spec.SetField(lieferant.FieldKundennummer, field.TypeString, value)
	}
	if luo.mutation.KundennummerCleared() {
		_spec.ClearField(lieferant.FieldKundennummer, field.TypeString)
	}
	if value, ok := luo.mutation.Webseite(); ok {
		_spec.SetField(lieferant.FieldWebseite, field.TypeString, value)
	}
	if luo.mutation.WebseiteCleared() {
		_spec.ClearField(lieferant.FieldWebseite, field.TypeString)
	}
	if luo.mutation.AnsprechpartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lieferant.AnsprechpartnersTable,
			Columns: []string{lieferant.AnsprechpartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedAnsprechpartnersIDs(); len(nodes) > 0 && !luo.mutation.AnsprechpartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lieferant.AnsprechpartnersTable,
			Columns: []string{lieferant.AnsprechpartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.AnsprechpartnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lieferant.AnsprechpartnersTable,
			Columns: []string{lieferant.AnsprechpartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lieferant{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lieferant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
