// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"viktor/ent/abteilung"
	"viktor/ent/einkauf"
	"viktor/ent/mitarbeiter"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Mitarbeiter is the model entity for the Mitarbeiter schema.
type Mitarbeiter struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Short holds the value of the "short" field.
	Short string `json:"short,omitempty"`
	// Image holds the value of the "image" field.
	Image bool `json:"image,omitempty"`
	// Sex holds the value of the "sex" field.
	Sex string `json:"sex,omitempty"`
	// Focus holds the value of the "focus" field.
	Focus string `json:"focus,omitempty"`
	// Mail holds the value of the "mail" field.
	Mail string `json:"mail,omitempty"`
	// AbteilungId holds the value of the "abteilungId" field.
	AbteilungId string `json:"abteilungId,omitempty"`
	// EinkaufId holds the value of the "einkaufId" field.
	EinkaufId string `json:"einkaufId,omitempty"`
	// Azubi holds the value of the "Azubi" field.
	Azubi bool `json:"Azubi,omitempty"`
	// Geburtstag holds the value of the "Geburtstag" field.
	Geburtstag time.Time `json:"Geburtstag,omitempty"`
	// Gruppenwahl holds the value of the "Gruppenwahl" field.
	Gruppenwahl string `json:"Gruppenwahl,omitempty"`
	// HomeOffice holds the value of the "HomeOffice" field.
	HomeOffice string `json:"HomeOffice,omitempty"`
	// MobilBusiness holds the value of the "Mobil_Business" field.
	MobilBusiness string `json:"Mobil_Business,omitempty"`
	// MobilPrivat holds the value of the "Mobil_Privat" field.
	MobilPrivat string `json:"Mobil_Privat,omitempty"`
	// TelefonBusiness holds the value of the "Telefon_Business" field.
	TelefonBusiness string `json:"Telefon_Business,omitempty"`
	// TelefonIntern1 holds the value of the "Telefon_Intern_1" field.
	TelefonIntern1 string `json:"Telefon_Intern_1,omitempty"`
	// TelefonIntern2 holds the value of the "Telefon_Intern_2" field.
	TelefonIntern2 string `json:"Telefon_Intern_2,omitempty"`
	// TelefonPrivat holds the value of the "Telefon_Privat" field.
	TelefonPrivat string `json:"Telefon_Privat,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MitarbeiterQuery when eager-loading is set.
	Edges        MitarbeiterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MitarbeiterEdges holds the relations/edges for other nodes in the graph.
type MitarbeiterEdges struct {
	// Abteilung holds the value of the abteilung edge.
	Abteilung *Abteilung `json:"abteilung,omitempty"`
	// Einkauf holds the value of the einkauf edge.
	Einkauf *Einkauf `json:"einkauf,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AbteilungOrErr returns the Abteilung value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MitarbeiterEdges) AbteilungOrErr() (*Abteilung, error) {
	if e.Abteilung != nil {
		return e.Abteilung, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: abteilung.Label}
	}
	return nil, &NotLoadedError{edge: "abteilung"}
}

// EinkaufOrErr returns the Einkauf value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MitarbeiterEdges) EinkaufOrErr() (*Einkauf, error) {
	if e.Einkauf != nil {
		return e.Einkauf, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: einkauf.Label}
	}
	return nil, &NotLoadedError{edge: "einkauf"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mitarbeiter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mitarbeiter.FieldImage, mitarbeiter.FieldAzubi:
			values[i] = new(sql.NullBool)
		case mitarbeiter.FieldID, mitarbeiter.FieldName, mitarbeiter.FieldShort, mitarbeiter.FieldSex, mitarbeiter.FieldFocus, mitarbeiter.FieldMail, mitarbeiter.FieldAbteilungId, mitarbeiter.FieldEinkaufId, mitarbeiter.FieldGruppenwahl, mitarbeiter.FieldHomeOffice, mitarbeiter.FieldMobilBusiness, mitarbeiter.FieldMobilPrivat, mitarbeiter.FieldTelefonBusiness, mitarbeiter.FieldTelefonIntern1, mitarbeiter.FieldTelefonIntern2, mitarbeiter.FieldTelefonPrivat:
			values[i] = new(sql.NullString)
		case mitarbeiter.FieldGeburtstag:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mitarbeiter fields.
func (m *Mitarbeiter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mitarbeiter.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				m.ID = value.String
			}
		case mitarbeiter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case mitarbeiter.FieldShort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short", values[i])
			} else if value.Valid {
				m.Short = value.String
			}
		case mitarbeiter.FieldImage:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				m.Image = value.Bool
			}
		case mitarbeiter.FieldSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				m.Sex = value.String
			}
		case mitarbeiter.FieldFocus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field focus", values[i])
			} else if value.Valid {
				m.Focus = value.String
			}
		case mitarbeiter.FieldMail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mail", values[i])
			} else if value.Valid {
				m.Mail = value.String
			}
		case mitarbeiter.FieldAbteilungId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abteilungId", values[i])
			} else if value.Valid {
				m.AbteilungId = value.String
			}
		case mitarbeiter.FieldEinkaufId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field einkaufId", values[i])
			} else if value.Valid {
				m.EinkaufId = value.String
			}
		case mitarbeiter.FieldAzubi:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Azubi", values[i])
			} else if value.Valid {
				m.Azubi = value.Bool
			}
		case mitarbeiter.FieldGeburtstag:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Geburtstag", values[i])
			} else if value.Valid {
				m.Geburtstag = value.Time
			}
		case mitarbeiter.FieldGruppenwahl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Gruppenwahl", values[i])
			} else if value.Valid {
				m.Gruppenwahl = value.String
			}
		case mitarbeiter.FieldHomeOffice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HomeOffice", values[i])
			} else if value.Valid {
				m.HomeOffice = value.String
			}
		case mitarbeiter.FieldMobilBusiness:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Mobil_Business", values[i])
			} else if value.Valid {
				m.MobilBusiness = value.String
			}
		case mitarbeiter.FieldMobilPrivat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Mobil_Privat", values[i])
			} else if value.Valid {
				m.MobilPrivat = value.String
			}
		case mitarbeiter.FieldTelefonBusiness:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Telefon_Business", values[i])
			} else if value.Valid {
				m.TelefonBusiness = value.String
			}
		case mitarbeiter.FieldTelefonIntern1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Telefon_Intern_1", values[i])
			} else if value.Valid {
				m.TelefonIntern1 = value.String
			}
		case mitarbeiter.FieldTelefonIntern2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Telefon_Intern_2", values[i])
			} else if value.Valid {
				m.TelefonIntern2 = value.String
			}
		case mitarbeiter.FieldTelefonPrivat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Telefon_Privat", values[i])
			} else if value.Valid {
				m.TelefonPrivat = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mitarbeiter.
// This includes values selected through modifiers, order, etc.
func (m *Mitarbeiter) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryAbteilung queries the "abteilung" edge of the Mitarbeiter entity.
func (m *Mitarbeiter) QueryAbteilung() *AbteilungQuery {
	return NewMitarbeiterClient(m.config).QueryAbteilung(m)
}

// QueryEinkauf queries the "einkauf" edge of the Mitarbeiter entity.
func (m *Mitarbeiter) QueryEinkauf() *EinkaufQuery {
	return NewMitarbeiterClient(m.config).QueryEinkauf(m)
}

// Update returns a builder for updating this Mitarbeiter.
// Note that you need to call Mitarbeiter.Unwrap() before calling this method if this Mitarbeiter
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mitarbeiter) Update() *MitarbeiterUpdateOne {
	return NewMitarbeiterClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mitarbeiter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mitarbeiter) Unwrap() *Mitarbeiter {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mitarbeiter is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mitarbeiter) String() string {
	var builder strings.Builder
	builder.WriteString("Mitarbeiter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("short=")
	builder.WriteString(m.Short)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(fmt.Sprintf("%v", m.Image))
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(m.Sex)
	builder.WriteString(", ")
	builder.WriteString("focus=")
	builder.WriteString(m.Focus)
	builder.WriteString(", ")
	builder.WriteString("mail=")
	builder.WriteString(m.Mail)
	builder.WriteString(", ")
	builder.WriteString("abteilungId=")
	builder.WriteString(m.AbteilungId)
	builder.WriteString(", ")
	builder.WriteString("einkaufId=")
	builder.WriteString(m.EinkaufId)
	builder.WriteString(", ")
	builder.WriteString("Azubi=")
	builder.WriteString(fmt.Sprintf("%v", m.Azubi))
	builder.WriteString(", ")
	builder.WriteString("Geburtstag=")
	builder.WriteString(m.Geburtstag.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Gruppenwahl=")
	builder.WriteString(m.Gruppenwahl)
	builder.WriteString(", ")
	builder.WriteString("HomeOffice=")
	builder.WriteString(m.HomeOffice)
	builder.WriteString(", ")
	builder.WriteString("Mobil_Business=")
	builder.WriteString(m.MobilBusiness)
	builder.WriteString(", ")
	builder.WriteString("Mobil_Privat=")
	builder.WriteString(m.MobilPrivat)
	builder.WriteString(", ")
	builder.WriteString("Telefon_Business=")
	builder.WriteString(m.TelefonBusiness)
	builder.WriteString(", ")
	builder.WriteString("Telefon_Intern_1=")
	builder.WriteString(m.TelefonIntern1)
	builder.WriteString(", ")
	builder.WriteString("Telefon_Intern_2=")
	builder.WriteString(m.TelefonIntern2)
	builder.WriteString(", ")
	builder.WriteString("Telefon_Privat=")
	builder.WriteString(m.TelefonPrivat)
	builder.WriteByte(')')
	return builder.String()
}

// Mitarbeiters is a parsable slice of Mitarbeiter.
type Mitarbeiters []*Mitarbeiter
