// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"viktor/ent/warenlieferung"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WarenlieferungCreate is the builder for creating a Warenlieferung entity.
type WarenlieferungCreate struct {
	config
	mutation *WarenlieferungMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (wc *WarenlieferungCreate) SetName(s string) *WarenlieferungCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetAngelegt sets the "angelegt" field.
func (wc *WarenlieferungCreate) SetAngelegt(t time.Time) *WarenlieferungCreate {
	wc.mutation.SetAngelegt(t)
	return wc
}

// SetGeliefert sets the "geliefert" field.
func (wc *WarenlieferungCreate) SetGeliefert(t time.Time) *WarenlieferungCreate {
	wc.mutation.SetGeliefert(t)
	return wc
}

// SetNillableGeliefert sets the "geliefert" field if the given value is not nil.
func (wc *WarenlieferungCreate) SetNillableGeliefert(t *time.Time) *WarenlieferungCreate {
	if t != nil {
		wc.SetGeliefert(*t)
	}
	return wc
}

// SetAlterPreis sets the "AlterPreis" field.
func (wc *WarenlieferungCreate) SetAlterPreis(f float32) *WarenlieferungCreate {
	wc.mutation.SetAlterPreis(f)
	return wc
}

// SetNillableAlterPreis sets the "AlterPreis" field if the given value is not nil.
func (wc *WarenlieferungCreate) SetNillableAlterPreis(f *float32) *WarenlieferungCreate {
	if f != nil {
		wc.SetAlterPreis(*f)
	}
	return wc
}

// SetNeuerPreis sets the "NeuerPreis" field.
func (wc *WarenlieferungCreate) SetNeuerPreis(f float32) *WarenlieferungCreate {
	wc.mutation.SetNeuerPreis(f)
	return wc
}

// SetNillableNeuerPreis sets the "NeuerPreis" field if the given value is not nil.
func (wc *WarenlieferungCreate) SetNillableNeuerPreis(f *float32) *WarenlieferungCreate {
	if f != nil {
		wc.SetNeuerPreis(*f)
	}
	return wc
}

// SetPreis sets the "Preis" field.
func (wc *WarenlieferungCreate) SetPreis(t time.Time) *WarenlieferungCreate {
	wc.mutation.SetPreis(t)
	return wc
}

// SetNillablePreis sets the "Preis" field if the given value is not nil.
func (wc *WarenlieferungCreate) SetNillablePreis(t *time.Time) *WarenlieferungCreate {
	if t != nil {
		wc.SetPreis(*t)
	}
	return wc
}

// SetArtikelnummer sets the "Artikelnummer" field.
func (wc *WarenlieferungCreate) SetArtikelnummer(s string) *WarenlieferungCreate {
	wc.mutation.SetArtikelnummer(s)
	return wc
}

// SetID sets the "id" field.
func (wc *WarenlieferungCreate) SetID(i int32) *WarenlieferungCreate {
	wc.mutation.SetID(i)
	return wc
}

// Mutation returns the WarenlieferungMutation object of the builder.
func (wc *WarenlieferungCreate) Mutation() *WarenlieferungMutation {
	return wc.mutation
}

// Save creates the Warenlieferung in the database.
func (wc *WarenlieferungCreate) Save(ctx context.Context) (*Warenlieferung, error) {
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WarenlieferungCreate) SaveX(ctx context.Context) *Warenlieferung {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WarenlieferungCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WarenlieferungCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WarenlieferungCreate) check() error {
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Warenlieferung.Name"`)}
	}
	if _, ok := wc.mutation.Angelegt(); !ok {
		return &ValidationError{Name: "angelegt", err: errors.New(`ent: missing required field "Warenlieferung.angelegt"`)}
	}
	if _, ok := wc.mutation.Artikelnummer(); !ok {
		return &ValidationError{Name: "Artikelnummer", err: errors.New(`ent: missing required field "Warenlieferung.Artikelnummer"`)}
	}
	return nil
}

func (wc *WarenlieferungCreate) sqlSave(ctx context.Context) (*Warenlieferung, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WarenlieferungCreate) createSpec() (*Warenlieferung, *sqlgraph.CreateSpec) {
	var (
		_node = &Warenlieferung{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(warenlieferung.Table, sqlgraph.NewFieldSpec(warenlieferung.FieldID, field.TypeInt32))
	)
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(warenlieferung.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.Angelegt(); ok {
		_spec.SetField(warenlieferung.FieldAngelegt, field.TypeTime, value)
		_node.Angelegt = value
	}
	if value, ok := wc.mutation.Geliefert(); ok {
		_spec.SetField(warenlieferung.FieldGeliefert, field.TypeTime, value)
		_node.Geliefert = value
	}
	if value, ok := wc.mutation.AlterPreis(); ok {
		_spec.SetField(warenlieferung.FieldAlterPreis, field.TypeFloat32, value)
		_node.AlterPreis = value
	}
	if value, ok := wc.mutation.NeuerPreis(); ok {
		_spec.SetField(warenlieferung.FieldNeuerPreis, field.TypeFloat32, value)
		_node.NeuerPreis = value
	}
	if value, ok := wc.mutation.Preis(); ok {
		_spec.SetField(warenlieferung.FieldPreis, field.TypeTime, value)
		_node.Preis = value
	}
	if value, ok := wc.mutation.Artikelnummer(); ok {
		_spec.SetField(warenlieferung.FieldArtikelnummer, field.TypeString, value)
		_node.Artikelnummer = value
	}
	return _node, _spec
}

// WarenlieferungCreateBulk is the builder for creating many Warenlieferung entities in bulk.
type WarenlieferungCreateBulk struct {
	config
	err      error
	builders []*WarenlieferungCreate
}

// Save creates the Warenlieferung entities in the database.
func (wcb *WarenlieferungCreateBulk) Save(ctx context.Context) ([]*Warenlieferung, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Warenlieferung, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WarenlieferungMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WarenlieferungCreateBulk) SaveX(ctx context.Context) []*Warenlieferung {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WarenlieferungCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WarenlieferungCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
