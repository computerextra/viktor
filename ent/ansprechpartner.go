// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"viktor/ent/ansprechpartner"
	"viktor/ent/lieferant"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Ansprechpartner is the model entity for the Ansprechpartner schema.
type Ansprechpartner struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Telefon holds the value of the "telefon" field.
	Telefon string `json:"telefon,omitempty"`
	// Mobil holds the value of the "mobil" field.
	Mobil string `json:"mobil,omitempty"`
	// Mail holds the value of the "mail" field.
	Mail string `json:"mail,omitempty"`
	// LieferantId holds the value of the "lieferantId" field.
	LieferantId string `json:"lieferantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnsprechpartnerQuery when eager-loading is set.
	Edges        AnsprechpartnerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AnsprechpartnerEdges holds the relations/edges for other nodes in the graph.
type AnsprechpartnerEdges struct {
	// Lieferant holds the value of the lieferant edge.
	Lieferant *Lieferant `json:"lieferant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LieferantOrErr returns the Lieferant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnsprechpartnerEdges) LieferantOrErr() (*Lieferant, error) {
	if e.Lieferant != nil {
		return e.Lieferant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lieferant.Label}
	}
	return nil, &NotLoadedError{edge: "lieferant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ansprechpartner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ansprechpartner.FieldID, ansprechpartner.FieldName, ansprechpartner.FieldTelefon, ansprechpartner.FieldMobil, ansprechpartner.FieldMail, ansprechpartner.FieldLieferantId:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ansprechpartner fields.
func (a *Ansprechpartner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ansprechpartner.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case ansprechpartner.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case ansprechpartner.FieldTelefon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telefon", values[i])
			} else if value.Valid {
				a.Telefon = value.String
			}
		case ansprechpartner.FieldMobil:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobil", values[i])
			} else if value.Valid {
				a.Mobil = value.String
			}
		case ansprechpartner.FieldMail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mail", values[i])
			} else if value.Valid {
				a.Mail = value.String
			}
		case ansprechpartner.FieldLieferantId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lieferantId", values[i])
			} else if value.Valid {
				a.LieferantId = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ansprechpartner.
// This includes values selected through modifiers, order, etc.
func (a *Ansprechpartner) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryLieferant queries the "lieferant" edge of the Ansprechpartner entity.
func (a *Ansprechpartner) QueryLieferant() *LieferantQuery {
	return NewAnsprechpartnerClient(a.config).QueryLieferant(a)
}

// Update returns a builder for updating this Ansprechpartner.
// Note that you need to call Ansprechpartner.Unwrap() before calling this method if this Ansprechpartner
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Ansprechpartner) Update() *AnsprechpartnerUpdateOne {
	return NewAnsprechpartnerClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Ansprechpartner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Ansprechpartner) Unwrap() *Ansprechpartner {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ansprechpartner is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Ansprechpartner) String() string {
	var builder strings.Builder
	builder.WriteString("Ansprechpartner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("telefon=")
	builder.WriteString(a.Telefon)
	builder.WriteString(", ")
	builder.WriteString("mobil=")
	builder.WriteString(a.Mobil)
	builder.WriteString(", ")
	builder.WriteString("mail=")
	builder.WriteString(a.Mail)
	builder.WriteString(", ")
	builder.WriteString("lieferantId=")
	builder.WriteString(a.LieferantId)
	builder.WriteByte(')')
	return builder.String()
}

// Ansprechpartners is a parsable slice of Ansprechpartner.
type Ansprechpartners []*Ansprechpartner
