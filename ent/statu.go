// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"viktor/ent/statu"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Statu is the model entity for the Statu schema.
type Statu struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Since holds the value of the "since" field.
	Since        string `json:"since,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Statu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statu.FieldID:
			values[i] = new(sql.NullInt64)
		case statu.FieldStatus, statu.FieldSince:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Statu fields.
func (s *Statu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int32(value.Int64)
		case statu.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case statu.FieldSince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field since", values[i])
			} else if value.Valid {
				s.Since = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Statu.
// This includes values selected through modifiers, order, etc.
func (s *Statu) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Statu.
// Note that you need to call Statu.Unwrap() before calling this method if this Statu
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Statu) Update() *StatuUpdateOne {
	return NewStatuClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Statu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Statu) Unwrap() *Statu {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Statu is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Statu) String() string {
	var builder strings.Builder
	builder.WriteString("Statu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("status=")
	builder.WriteString(s.Status)
	builder.WriteString(", ")
	builder.WriteString("since=")
	builder.WriteString(s.Since)
	builder.WriteByte(')')
	return builder.String()
}

// Status is a parsable slice of Statu.
type Status []*Statu
