// Code generated by ent, DO NOT EDIT.

package einkauf

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the einkauf type in the database.
	Label = "einkauf"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPaypal holds the string denoting the paypal field in the database.
	FieldPaypal = "paypal"
	// FieldAbonniert holds the string denoting the abonniert field in the database.
	FieldAbonniert = "abonniert"
	// FieldGeld holds the string denoting the geld field in the database.
	FieldGeld = "geld"
	// FieldPfand holds the string denoting the pfand field in the database.
	FieldPfand = "pfand"
	// FieldDinge holds the string denoting the dinge field in the database.
	FieldDinge = "dinge"
	// FieldAbgeschickt holds the string denoting the abgeschickt field in the database.
	FieldAbgeschickt = "abgeschickt"
	// FieldBild1 holds the string denoting the bild1 field in the database.
	FieldBild1 = "bild1"
	// FieldBild2 holds the string denoting the bild2 field in the database.
	FieldBild2 = "bild2"
	// FieldBild3 holds the string denoting the bild3 field in the database.
	FieldBild3 = "bild3"
	// EdgeMitarbeiter holds the string denoting the mitarbeiter edge name in mutations.
	EdgeMitarbeiter = "mitarbeiter"
	// Table holds the table name of the einkauf in the database.
	Table = "Einkauf"
	// MitarbeiterTable is the table that holds the mitarbeiter relation/edge.
	MitarbeiterTable = "Mitarbeiter"
	// MitarbeiterInverseTable is the table name for the Mitarbeiter entity.
	// It exists in this package in order to avoid circular dependency with the "mitarbeiter" package.
	MitarbeiterInverseTable = "Mitarbeiter"
	// MitarbeiterColumn is the table column denoting the mitarbeiter relation/edge.
	MitarbeiterColumn = "einkauf_id"
)

// Columns holds all SQL columns for einkauf fields.
var Columns = []string{
	FieldID,
	FieldPaypal,
	FieldAbonniert,
	FieldGeld,
	FieldPfand,
	FieldDinge,
	FieldAbgeschickt,
	FieldBild1,
	FieldBild2,
	FieldBild3,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Einkauf queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPaypal orders the results by the Paypal field.
func ByPaypal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaypal, opts...).ToFunc()
}

// ByAbonniert orders the results by the Abonniert field.
func ByAbonniert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbonniert, opts...).ToFunc()
}

// ByGeld orders the results by the Geld field.
func ByGeld(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeld, opts...).ToFunc()
}

// ByPfand orders the results by the Pfand field.
func ByPfand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPfand, opts...).ToFunc()
}

// ByDinge orders the results by the Dinge field.
func ByDinge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDinge, opts...).ToFunc()
}

// ByAbgeschickt orders the results by the Abgeschickt field.
func ByAbgeschickt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbgeschickt, opts...).ToFunc()
}

// ByBild1 orders the results by the Bild1 field.
func ByBild1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBild1, opts...).ToFunc()
}

// ByBild2 orders the results by the Bild2 field.
func ByBild2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBild2, opts...).ToFunc()
}

// ByBild3 orders the results by the Bild3 field.
func ByBild3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBild3, opts...).ToFunc()
}

// ByMitarbeiterField orders the results by mitarbeiter field.
func ByMitarbeiterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMitarbeiterStep(), sql.OrderByField(field, opts...))
	}
}
func newMitarbeiterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MitarbeiterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MitarbeiterTable, MitarbeiterColumn),
	)
}
