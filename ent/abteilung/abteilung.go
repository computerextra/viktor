// Code generated by ent, DO NOT EDIT.

package abteilung

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the abteilung type in the database.
	Label = "abteilung"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeMitarbeiters holds the string denoting the mitarbeiters edge name in mutations.
	EdgeMitarbeiters = "mitarbeiters"
	// Table holds the table name of the abteilung in the database.
	Table = "Abteilung"
	// MitarbeitersTable is the table that holds the mitarbeiters relation/edge.
	MitarbeitersTable = "Mitarbeiter"
	// MitarbeitersInverseTable is the table name for the Mitarbeiter entity.
	// It exists in this package in order to avoid circular dependency with the "mitarbeiter" package.
	MitarbeitersInverseTable = "Mitarbeiter"
	// MitarbeitersColumn is the table column denoting the mitarbeiters relation/edge.
	MitarbeitersColumn = "abteilung_id"
)

// Columns holds all SQL columns for abteilung fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Abteilung queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMitarbeitersCount orders the results by mitarbeiters count.
func ByMitarbeitersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMitarbeitersStep(), opts...)
	}
}

// ByMitarbeiters orders the results by mitarbeiters terms.
func ByMitarbeiters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMitarbeitersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMitarbeitersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MitarbeitersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MitarbeitersTable, MitarbeitersColumn),
	)
}
