// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"viktor/ent/abteilung"
	"viktor/ent/einkauf"
	"viktor/ent/mitarbeiter"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MitarbeiterCreate is the builder for creating a Mitarbeiter entity.
type MitarbeiterCreate struct {
	config
	mutation *MitarbeiterMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mc *MitarbeiterCreate) SetName(s string) *MitarbeiterCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetShort sets the "short" field.
func (mc *MitarbeiterCreate) SetShort(s string) *MitarbeiterCreate {
	mc.mutation.SetShort(s)
	return mc
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableShort(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetShort(*s)
	}
	return mc
}

// SetImage sets the "image" field.
func (mc *MitarbeiterCreate) SetImage(b bool) *MitarbeiterCreate {
	mc.mutation.SetImage(b)
	return mc
}

// SetSex sets the "sex" field.
func (mc *MitarbeiterCreate) SetSex(s string) *MitarbeiterCreate {
	mc.mutation.SetSex(s)
	return mc
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableSex(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetSex(*s)
	}
	return mc
}

// SetFocus sets the "focus" field.
func (mc *MitarbeiterCreate) SetFocus(s string) *MitarbeiterCreate {
	mc.mutation.SetFocus(s)
	return mc
}

// SetNillableFocus sets the "focus" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableFocus(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetFocus(*s)
	}
	return mc
}

// SetMail sets the "mail" field.
func (mc *MitarbeiterCreate) SetMail(s string) *MitarbeiterCreate {
	mc.mutation.SetMail(s)
	return mc
}

// SetNillableMail sets the "mail" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableMail(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetMail(*s)
	}
	return mc
}

// SetAbteilungId sets the "abteilungId" field.
func (mc *MitarbeiterCreate) SetAbteilungId(s string) *MitarbeiterCreate {
	mc.mutation.SetAbteilungId(s)
	return mc
}

// SetNillableAbteilungId sets the "abteilungId" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableAbteilungId(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetAbteilungId(*s)
	}
	return mc
}

// SetEinkaufId sets the "einkaufId" field.
func (mc *MitarbeiterCreate) SetEinkaufId(s string) *MitarbeiterCreate {
	mc.mutation.SetEinkaufId(s)
	return mc
}

// SetNillableEinkaufId sets the "einkaufId" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableEinkaufId(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetEinkaufId(*s)
	}
	return mc
}

// SetAzubi sets the "Azubi" field.
func (mc *MitarbeiterCreate) SetAzubi(b bool) *MitarbeiterCreate {
	mc.mutation.SetAzubi(b)
	return mc
}

// SetGeburtstag sets the "Geburtstag" field.
func (mc *MitarbeiterCreate) SetGeburtstag(t time.Time) *MitarbeiterCreate {
	mc.mutation.SetGeburtstag(t)
	return mc
}

// SetNillableGeburtstag sets the "Geburtstag" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableGeburtstag(t *time.Time) *MitarbeiterCreate {
	if t != nil {
		mc.SetGeburtstag(*t)
	}
	return mc
}

// SetGruppenwahl sets the "Gruppenwahl" field.
func (mc *MitarbeiterCreate) SetGruppenwahl(s string) *MitarbeiterCreate {
	mc.mutation.SetGruppenwahl(s)
	return mc
}

// SetNillableGruppenwahl sets the "Gruppenwahl" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableGruppenwahl(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetGruppenwahl(*s)
	}
	return mc
}

// SetHomeOffice sets the "HomeOffice" field.
func (mc *MitarbeiterCreate) SetHomeOffice(s string) *MitarbeiterCreate {
	mc.mutation.SetHomeOffice(s)
	return mc
}

// SetNillableHomeOffice sets the "HomeOffice" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableHomeOffice(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetHomeOffice(*s)
	}
	return mc
}

// SetMobilBusiness sets the "Mobil_Business" field.
func (mc *MitarbeiterCreate) SetMobilBusiness(s string) *MitarbeiterCreate {
	mc.mutation.SetMobilBusiness(s)
	return mc
}

// SetNillableMobilBusiness sets the "Mobil_Business" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableMobilBusiness(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetMobilBusiness(*s)
	}
	return mc
}

// SetMobilPrivat sets the "Mobil_Privat" field.
func (mc *MitarbeiterCreate) SetMobilPrivat(s string) *MitarbeiterCreate {
	mc.mutation.SetMobilPrivat(s)
	return mc
}

// SetNillableMobilPrivat sets the "Mobil_Privat" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableMobilPrivat(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetMobilPrivat(*s)
	}
	return mc
}

// SetTelefonBusiness sets the "Telefon_Business" field.
func (mc *MitarbeiterCreate) SetTelefonBusiness(s string) *MitarbeiterCreate {
	mc.mutation.SetTelefonBusiness(s)
	return mc
}

// SetNillableTelefonBusiness sets the "Telefon_Business" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableTelefonBusiness(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetTelefonBusiness(*s)
	}
	return mc
}

// SetTelefonIntern1 sets the "Telefon_Intern_1" field.
func (mc *MitarbeiterCreate) SetTelefonIntern1(s string) *MitarbeiterCreate {
	mc.mutation.SetTelefonIntern1(s)
	return mc
}

// SetNillableTelefonIntern1 sets the "Telefon_Intern_1" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableTelefonIntern1(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetTelefonIntern1(*s)
	}
	return mc
}

// SetTelefonIntern2 sets the "Telefon_Intern_2" field.
func (mc *MitarbeiterCreate) SetTelefonIntern2(s string) *MitarbeiterCreate {
	mc.mutation.SetTelefonIntern2(s)
	return mc
}

// SetNillableTelefonIntern2 sets the "Telefon_Intern_2" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableTelefonIntern2(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetTelefonIntern2(*s)
	}
	return mc
}

// SetTelefonPrivat sets the "Telefon_Privat" field.
func (mc *MitarbeiterCreate) SetTelefonPrivat(s string) *MitarbeiterCreate {
	mc.mutation.SetTelefonPrivat(s)
	return mc
}

// SetNillableTelefonPrivat sets the "Telefon_Privat" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableTelefonPrivat(s *string) *MitarbeiterCreate {
	if s != nil {
		mc.SetTelefonPrivat(*s)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MitarbeiterCreate) SetID(s string) *MitarbeiterCreate {
	mc.mutation.SetID(s)
	return mc
}

// SetAbteilungID sets the "abteilung" edge to the Abteilung entity by ID.
func (mc *MitarbeiterCreate) SetAbteilungID(id string) *MitarbeiterCreate {
	mc.mutation.SetAbteilungID(id)
	return mc
}

// SetNillableAbteilungID sets the "abteilung" edge to the Abteilung entity by ID if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableAbteilungID(id *string) *MitarbeiterCreate {
	if id != nil {
		mc = mc.SetAbteilungID(*id)
	}
	return mc
}

// SetAbteilung sets the "abteilung" edge to the Abteilung entity.
func (mc *MitarbeiterCreate) SetAbteilung(a *Abteilung) *MitarbeiterCreate {
	return mc.SetAbteilungID(a.ID)
}

// SetEinkaufID sets the "einkauf" edge to the Einkauf entity by ID.
func (mc *MitarbeiterCreate) SetEinkaufID(id string) *MitarbeiterCreate {
	mc.mutation.SetEinkaufID(id)
	return mc
}

// SetNillableEinkaufID sets the "einkauf" edge to the Einkauf entity by ID if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableEinkaufID(id *string) *MitarbeiterCreate {
	if id != nil {
		mc = mc.SetEinkaufID(*id)
	}
	return mc
}

// SetEinkauf sets the "einkauf" edge to the Einkauf entity.
func (mc *MitarbeiterCreate) SetEinkauf(e *Einkauf) *MitarbeiterCreate {
	return mc.SetEinkaufID(e.ID)
}

// Mutation returns the MitarbeiterMutation object of the builder.
func (mc *MitarbeiterCreate) Mutation() *MitarbeiterMutation {
	return mc.mutation
}

// Save creates the Mitarbeiter in the database.
func (mc *MitarbeiterCreate) Save(ctx context.Context) (*Mitarbeiter, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MitarbeiterCreate) SaveX(ctx context.Context) *Mitarbeiter {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MitarbeiterCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MitarbeiterCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MitarbeiterCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Mitarbeiter.name"`)}
	}
	if _, ok := mc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Mitarbeiter.image"`)}
	}
	if _, ok := mc.mutation.Azubi(); !ok {
		return &ValidationError{Name: "Azubi", err: errors.New(`ent: missing required field "Mitarbeiter.Azubi"`)}
	}
	return nil
}

func (mc *MitarbeiterCreate) sqlSave(ctx context.Context) (*Mitarbeiter, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Mitarbeiter.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MitarbeiterCreate) createSpec() (*Mitarbeiter, *sqlgraph.CreateSpec) {
	var (
		_node = &Mitarbeiter{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mitarbeiter.Table, sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(mitarbeiter.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Short(); ok {
		_spec.SetField(mitarbeiter.FieldShort, field.TypeString, value)
		_node.Short = value
	}
	if value, ok := mc.mutation.Image(); ok {
		_spec.SetField(mitarbeiter.FieldImage, field.TypeBool, value)
		_node.Image = value
	}
	if value, ok := mc.mutation.Sex(); ok {
		_spec.SetField(mitarbeiter.FieldSex, field.TypeString, value)
		_node.Sex = value
	}
	if value, ok := mc.mutation.Focus(); ok {
		_spec.SetField(mitarbeiter.FieldFocus, field.TypeString, value)
		_node.Focus = value
	}
	if value, ok := mc.mutation.Mail(); ok {
		_spec.SetField(mitarbeiter.FieldMail, field.TypeString, value)
		_node.Mail = value
	}
	if value, ok := mc.mutation.Azubi(); ok {
		_spec.SetField(mitarbeiter.FieldAzubi, field.TypeBool, value)
		_node.Azubi = value
	}
	if value, ok := mc.mutation.Geburtstag(); ok {
		_spec.SetField(mitarbeiter.FieldGeburtstag, field.TypeTime, value)
		_node.Geburtstag = value
	}
	if value, ok := mc.mutation.Gruppenwahl(); ok {
		_spec.SetField(mitarbeiter.FieldGruppenwahl, field.TypeString, value)
		_node.Gruppenwahl = value
	}
	if value, ok := mc.mutation.HomeOffice(); ok {
		_spec.SetField(mitarbeiter.FieldHomeOffice, field.TypeString, value)
		_node.HomeOffice = value
	}
	if value, ok := mc.mutation.MobilBusiness(); ok {
		_spec.SetField(mitarbeiter.FieldMobilBusiness, field.TypeString, value)
		_node.MobilBusiness = value
	}
	if value, ok := mc.mutation.MobilPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldMobilPrivat, field.TypeString, value)
		_node.MobilPrivat = value
	}
	if value, ok := mc.mutation.TelefonBusiness(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonBusiness, field.TypeString, value)
		_node.TelefonBusiness = value
	}
	if value, ok := mc.mutation.TelefonIntern1(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonIntern1, field.TypeString, value)
		_node.TelefonIntern1 = value
	}
	if value, ok := mc.mutation.TelefonIntern2(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonIntern2, field.TypeString, value)
		_node.TelefonIntern2 = value
	}
	if value, ok := mc.mutation.TelefonPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonPrivat, field.TypeString, value)
		_node.TelefonPrivat = value
	}
	if nodes := mc.mutation.AbteilungIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mitarbeiter.AbteilungTable,
			Columns: []string{mitarbeiter.AbteilungColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abteilung.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AbteilungId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.EinkaufIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mitarbeiter.EinkaufTable,
			Columns: []string{mitarbeiter.EinkaufColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(einkauf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EinkaufId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MitarbeiterCreateBulk is the builder for creating many Mitarbeiter entities in bulk.
type MitarbeiterCreateBulk struct {
	config
	err      error
	builders []*MitarbeiterCreate
}

// Save creates the Mitarbeiter entities in the database.
func (mcb *MitarbeiterCreateBulk) Save(ctx context.Context) ([]*Mitarbeiter, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mitarbeiter, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MitarbeiterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MitarbeiterCreateBulk) SaveX(ctx context.Context) []*Mitarbeiter {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MitarbeiterCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MitarbeiterCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
