// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"viktor/ent/partner"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerUpdate is the builder for updating Partner entities.
type PartnerUpdate struct {
	config
	hooks    []Hook
	mutation *PartnerMutation
}

// Where appends a list predicates to the PartnerUpdate builder.
func (pu *PartnerUpdate) Where(ps ...predicate.Partner) *PartnerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PartnerUpdate) SetName(s string) *PartnerUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableName(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetLink sets the "link" field.
func (pu *PartnerUpdate) SetLink(s string) *PartnerUpdate {
	pu.mutation.SetLink(s)
	return pu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableLink(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetLink(*s)
	}
	return pu
}

// SetImage sets the "image" field.
func (pu *PartnerUpdate) SetImage(s string) *PartnerUpdate {
	pu.mutation.SetImage(s)
	return pu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableImage(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetImage(*s)
	}
	return pu
}

// Mutation returns the PartnerMutation object of the builder.
func (pu *PartnerUpdate) Mutation() *PartnerMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PartnerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PartnerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PartnerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PartnerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PartnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(partner.Table, partner.Columns, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(partner.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Link(); ok {
		_spec.SetField(partner.FieldLink, field.TypeString, value)
	}
	if value, ok := pu.mutation.Image(); ok {
		_spec.SetField(partner.FieldImage, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PartnerUpdateOne is the builder for updating a single Partner entity.
type PartnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartnerMutation
}

// SetName sets the "name" field.
func (puo *PartnerUpdateOne) SetName(s string) *PartnerUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableName(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetLink sets the "link" field.
func (puo *PartnerUpdateOne) SetLink(s string) *PartnerUpdateOne {
	puo.mutation.SetLink(s)
	return puo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableLink(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetLink(*s)
	}
	return puo
}

// SetImage sets the "image" field.
func (puo *PartnerUpdateOne) SetImage(s string) *PartnerUpdateOne {
	puo.mutation.SetImage(s)
	return puo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableImage(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetImage(*s)
	}
	return puo
}

// Mutation returns the PartnerMutation object of the builder.
func (puo *PartnerUpdateOne) Mutation() *PartnerMutation {
	return puo.mutation
}

// Where appends a list predicates to the PartnerUpdate builder.
func (puo *PartnerUpdateOne) Where(ps ...predicate.Partner) *PartnerUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PartnerUpdateOne) Select(field string, fields ...string) *PartnerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Partner entity.
func (puo *PartnerUpdateOne) Save(ctx context.Context) (*Partner, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PartnerUpdateOne) SaveX(ctx context.Context) *Partner {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PartnerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PartnerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PartnerUpdateOne) sqlSave(ctx context.Context) (_node *Partner, err error) {
	_spec := sqlgraph.NewUpdateSpec(partner.Table, partner.Columns, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Partner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partner.FieldID)
		for _, f := range fields {
			if !partner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(partner.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Link(); ok {
		_spec.SetField(partner.FieldLink, field.TypeString, value)
	}
	if value, ok := puo.mutation.Image(); ok {
		_spec.SetField(partner.FieldImage, field.TypeString, value)
	}
	_node = &Partner{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
