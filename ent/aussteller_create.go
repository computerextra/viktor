// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"viktor/ent/aussteller"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AusstellerCreate is the builder for creating a Aussteller entity.
type AusstellerCreate struct {
	config
	mutation *AusstellerMutation
	hooks    []Hook
}

// SetArtikelnummer sets the "Artikelnummer" field.
func (ac *AusstellerCreate) SetArtikelnummer(s string) *AusstellerCreate {
	ac.mutation.SetArtikelnummer(s)
	return ac
}

// SetArtikelname sets the "Artikelname" field.
func (ac *AusstellerCreate) SetArtikelname(s string) *AusstellerCreate {
	ac.mutation.SetArtikelname(s)
	return ac
}

// SetSpecs sets the "Specs" field.
func (ac *AusstellerCreate) SetSpecs(s string) *AusstellerCreate {
	ac.mutation.SetSpecs(s)
	return ac
}

// SetPreis sets the "Preis" field.
func (ac *AusstellerCreate) SetPreis(f float32) *AusstellerCreate {
	ac.mutation.SetPreis(f)
	return ac
}

// SetBild sets the "Bild" field.
func (ac *AusstellerCreate) SetBild(s string) *AusstellerCreate {
	ac.mutation.SetBild(s)
	return ac
}

// SetNillableBild sets the "Bild" field if the given value is not nil.
func (ac *AusstellerCreate) SetNillableBild(s *string) *AusstellerCreate {
	if s != nil {
		ac.SetBild(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AusstellerCreate) SetID(i int32) *AusstellerCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the AusstellerMutation object of the builder.
func (ac *AusstellerCreate) Mutation() *AusstellerMutation {
	return ac.mutation
}

// Save creates the Aussteller in the database.
func (ac *AusstellerCreate) Save(ctx context.Context) (*Aussteller, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AusstellerCreate) SaveX(ctx context.Context) *Aussteller {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AusstellerCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AusstellerCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AusstellerCreate) check() error {
	if _, ok := ac.mutation.Artikelnummer(); !ok {
		return &ValidationError{Name: "Artikelnummer", err: errors.New(`ent: missing required field "Aussteller.Artikelnummer"`)}
	}
	if _, ok := ac.mutation.Artikelname(); !ok {
		return &ValidationError{Name: "Artikelname", err: errors.New(`ent: missing required field "Aussteller.Artikelname"`)}
	}
	if _, ok := ac.mutation.Specs(); !ok {
		return &ValidationError{Name: "Specs", err: errors.New(`ent: missing required field "Aussteller.Specs"`)}
	}
	if _, ok := ac.mutation.Preis(); !ok {
		return &ValidationError{Name: "Preis", err: errors.New(`ent: missing required field "Aussteller.Preis"`)}
	}
	return nil
}

func (ac *AusstellerCreate) sqlSave(ctx context.Context) (*Aussteller, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AusstellerCreate) createSpec() (*Aussteller, *sqlgraph.CreateSpec) {
	var (
		_node = &Aussteller{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(aussteller.Table, sqlgraph.NewFieldSpec(aussteller.FieldID, field.TypeInt32))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Artikelnummer(); ok {
		_spec.SetField(aussteller.FieldArtikelnummer, field.TypeString, value)
		_node.Artikelnummer = value
	}
	if value, ok := ac.mutation.Artikelname(); ok {
		_spec.SetField(aussteller.FieldArtikelname, field.TypeString, value)
		_node.Artikelname = value
	}
	if value, ok := ac.mutation.Specs(); ok {
		_spec.SetField(aussteller.FieldSpecs, field.TypeString, value)
		_node.Specs = value
	}
	if value, ok := ac.mutation.Preis(); ok {
		_spec.SetField(aussteller.FieldPreis, field.TypeFloat32, value)
		_node.Preis = value
	}
	if value, ok := ac.mutation.Bild(); ok {
		_spec.SetField(aussteller.FieldBild, field.TypeString, value)
		_node.Bild = value
	}
	return _node, _spec
}

// AusstellerCreateBulk is the builder for creating many Aussteller entities in bulk.
type AusstellerCreateBulk struct {
	config
	err      error
	builders []*AusstellerCreate
}

// Save creates the Aussteller entities in the database.
func (acb *AusstellerCreateBulk) Save(ctx context.Context) ([]*Aussteller, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Aussteller, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AusstellerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AusstellerCreateBulk) SaveX(ctx context.Context) []*Aussteller {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AusstellerCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AusstellerCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
