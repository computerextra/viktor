// Code generated by ent, DO NOT EDIT.

package aussteller

import (
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLTE(FieldID, id))
}

// Artikelnummer applies equality check predicate on the "Artikelnummer" field. It's identical to ArtikelnummerEQ.
func Artikelnummer(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldArtikelnummer, v))
}

// Artikelname applies equality check predicate on the "Artikelname" field. It's identical to ArtikelnameEQ.
func Artikelname(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldArtikelname, v))
}

// Specs applies equality check predicate on the "Specs" field. It's identical to SpecsEQ.
func Specs(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldSpecs, v))
}

// Preis applies equality check predicate on the "Preis" field. It's identical to PreisEQ.
func Preis(v float32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldPreis, v))
}

// Bild applies equality check predicate on the "Bild" field. It's identical to BildEQ.
func Bild(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldBild, v))
}

// ArtikelnummerEQ applies the EQ predicate on the "Artikelnummer" field.
func ArtikelnummerEQ(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldArtikelnummer, v))
}

// ArtikelnummerNEQ applies the NEQ predicate on the "Artikelnummer" field.
func ArtikelnummerNEQ(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNEQ(FieldArtikelnummer, v))
}

// ArtikelnummerIn applies the In predicate on the "Artikelnummer" field.
func ArtikelnummerIn(vs ...string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldIn(FieldArtikelnummer, vs...))
}

// ArtikelnummerNotIn applies the NotIn predicate on the "Artikelnummer" field.
func ArtikelnummerNotIn(vs ...string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNotIn(FieldArtikelnummer, vs...))
}

// ArtikelnummerGT applies the GT predicate on the "Artikelnummer" field.
func ArtikelnummerGT(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGT(FieldArtikelnummer, v))
}

// ArtikelnummerGTE applies the GTE predicate on the "Artikelnummer" field.
func ArtikelnummerGTE(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGTE(FieldArtikelnummer, v))
}

// ArtikelnummerLT applies the LT predicate on the "Artikelnummer" field.
func ArtikelnummerLT(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLT(FieldArtikelnummer, v))
}

// ArtikelnummerLTE applies the LTE predicate on the "Artikelnummer" field.
func ArtikelnummerLTE(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLTE(FieldArtikelnummer, v))
}

// ArtikelnummerContains applies the Contains predicate on the "Artikelnummer" field.
func ArtikelnummerContains(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldContains(FieldArtikelnummer, v))
}

// ArtikelnummerHasPrefix applies the HasPrefix predicate on the "Artikelnummer" field.
func ArtikelnummerHasPrefix(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldHasPrefix(FieldArtikelnummer, v))
}

// ArtikelnummerHasSuffix applies the HasSuffix predicate on the "Artikelnummer" field.
func ArtikelnummerHasSuffix(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldHasSuffix(FieldArtikelnummer, v))
}

// ArtikelnummerEqualFold applies the EqualFold predicate on the "Artikelnummer" field.
func ArtikelnummerEqualFold(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEqualFold(FieldArtikelnummer, v))
}

// ArtikelnummerContainsFold applies the ContainsFold predicate on the "Artikelnummer" field.
func ArtikelnummerContainsFold(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldContainsFold(FieldArtikelnummer, v))
}

// ArtikelnameEQ applies the EQ predicate on the "Artikelname" field.
func ArtikelnameEQ(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldArtikelname, v))
}

// ArtikelnameNEQ applies the NEQ predicate on the "Artikelname" field.
func ArtikelnameNEQ(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNEQ(FieldArtikelname, v))
}

// ArtikelnameIn applies the In predicate on the "Artikelname" field.
func ArtikelnameIn(vs ...string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldIn(FieldArtikelname, vs...))
}

// ArtikelnameNotIn applies the NotIn predicate on the "Artikelname" field.
func ArtikelnameNotIn(vs ...string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNotIn(FieldArtikelname, vs...))
}

// ArtikelnameGT applies the GT predicate on the "Artikelname" field.
func ArtikelnameGT(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGT(FieldArtikelname, v))
}

// ArtikelnameGTE applies the GTE predicate on the "Artikelname" field.
func ArtikelnameGTE(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGTE(FieldArtikelname, v))
}

// ArtikelnameLT applies the LT predicate on the "Artikelname" field.
func ArtikelnameLT(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLT(FieldArtikelname, v))
}

// ArtikelnameLTE applies the LTE predicate on the "Artikelname" field.
func ArtikelnameLTE(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLTE(FieldArtikelname, v))
}

// ArtikelnameContains applies the Contains predicate on the "Artikelname" field.
func ArtikelnameContains(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldContains(FieldArtikelname, v))
}

// ArtikelnameHasPrefix applies the HasPrefix predicate on the "Artikelname" field.
func ArtikelnameHasPrefix(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldHasPrefix(FieldArtikelname, v))
}

// ArtikelnameHasSuffix applies the HasSuffix predicate on the "Artikelname" field.
func ArtikelnameHasSuffix(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldHasSuffix(FieldArtikelname, v))
}

// ArtikelnameEqualFold applies the EqualFold predicate on the "Artikelname" field.
func ArtikelnameEqualFold(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEqualFold(FieldArtikelname, v))
}

// ArtikelnameContainsFold applies the ContainsFold predicate on the "Artikelname" field.
func ArtikelnameContainsFold(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldContainsFold(FieldArtikelname, v))
}

// SpecsEQ applies the EQ predicate on the "Specs" field.
func SpecsEQ(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldSpecs, v))
}

// SpecsNEQ applies the NEQ predicate on the "Specs" field.
func SpecsNEQ(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNEQ(FieldSpecs, v))
}

// SpecsIn applies the In predicate on the "Specs" field.
func SpecsIn(vs ...string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldIn(FieldSpecs, vs...))
}

// SpecsNotIn applies the NotIn predicate on the "Specs" field.
func SpecsNotIn(vs ...string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNotIn(FieldSpecs, vs...))
}

// SpecsGT applies the GT predicate on the "Specs" field.
func SpecsGT(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGT(FieldSpecs, v))
}

// SpecsGTE applies the GTE predicate on the "Specs" field.
func SpecsGTE(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGTE(FieldSpecs, v))
}

// SpecsLT applies the LT predicate on the "Specs" field.
func SpecsLT(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLT(FieldSpecs, v))
}

// SpecsLTE applies the LTE predicate on the "Specs" field.
func SpecsLTE(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLTE(FieldSpecs, v))
}

// SpecsContains applies the Contains predicate on the "Specs" field.
func SpecsContains(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldContains(FieldSpecs, v))
}

// SpecsHasPrefix applies the HasPrefix predicate on the "Specs" field.
func SpecsHasPrefix(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldHasPrefix(FieldSpecs, v))
}

// SpecsHasSuffix applies the HasSuffix predicate on the "Specs" field.
func SpecsHasSuffix(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldHasSuffix(FieldSpecs, v))
}

// SpecsEqualFold applies the EqualFold predicate on the "Specs" field.
func SpecsEqualFold(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEqualFold(FieldSpecs, v))
}

// SpecsContainsFold applies the ContainsFold predicate on the "Specs" field.
func SpecsContainsFold(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldContainsFold(FieldSpecs, v))
}

// PreisEQ applies the EQ predicate on the "Preis" field.
func PreisEQ(v float32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldPreis, v))
}

// PreisNEQ applies the NEQ predicate on the "Preis" field.
func PreisNEQ(v float32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNEQ(FieldPreis, v))
}

// PreisIn applies the In predicate on the "Preis" field.
func PreisIn(vs ...float32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldIn(FieldPreis, vs...))
}

// PreisNotIn applies the NotIn predicate on the "Preis" field.
func PreisNotIn(vs ...float32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNotIn(FieldPreis, vs...))
}

// PreisGT applies the GT predicate on the "Preis" field.
func PreisGT(v float32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGT(FieldPreis, v))
}

// PreisGTE applies the GTE predicate on the "Preis" field.
func PreisGTE(v float32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGTE(FieldPreis, v))
}

// PreisLT applies the LT predicate on the "Preis" field.
func PreisLT(v float32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLT(FieldPreis, v))
}

// PreisLTE applies the LTE predicate on the "Preis" field.
func PreisLTE(v float32) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLTE(FieldPreis, v))
}

// BildEQ applies the EQ predicate on the "Bild" field.
func BildEQ(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEQ(FieldBild, v))
}

// BildNEQ applies the NEQ predicate on the "Bild" field.
func BildNEQ(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNEQ(FieldBild, v))
}

// BildIn applies the In predicate on the "Bild" field.
func BildIn(vs ...string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldIn(FieldBild, vs...))
}

// BildNotIn applies the NotIn predicate on the "Bild" field.
func BildNotIn(vs ...string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNotIn(FieldBild, vs...))
}

// BildGT applies the GT predicate on the "Bild" field.
func BildGT(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGT(FieldBild, v))
}

// BildGTE applies the GTE predicate on the "Bild" field.
func BildGTE(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldGTE(FieldBild, v))
}

// BildLT applies the LT predicate on the "Bild" field.
func BildLT(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLT(FieldBild, v))
}

// BildLTE applies the LTE predicate on the "Bild" field.
func BildLTE(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldLTE(FieldBild, v))
}

// BildContains applies the Contains predicate on the "Bild" field.
func BildContains(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldContains(FieldBild, v))
}

// BildHasPrefix applies the HasPrefix predicate on the "Bild" field.
func BildHasPrefix(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldHasPrefix(FieldBild, v))
}

// BildHasSuffix applies the HasSuffix predicate on the "Bild" field.
func BildHasSuffix(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldHasSuffix(FieldBild, v))
}

// BildIsNil applies the IsNil predicate on the "Bild" field.
func BildIsNil() predicate.Aussteller {
	return predicate.Aussteller(sql.FieldIsNull(FieldBild))
}

// BildNotNil applies the NotNil predicate on the "Bild" field.
func BildNotNil() predicate.Aussteller {
	return predicate.Aussteller(sql.FieldNotNull(FieldBild))
}

// BildEqualFold applies the EqualFold predicate on the "Bild" field.
func BildEqualFold(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldEqualFold(FieldBild, v))
}

// BildContainsFold applies the ContainsFold predicate on the "Bild" field.
func BildContainsFold(v string) predicate.Aussteller {
	return predicate.Aussteller(sql.FieldContainsFold(FieldBild, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Aussteller) predicate.Aussteller {
	return predicate.Aussteller(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Aussteller) predicate.Aussteller {
	return predicate.Aussteller(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Aussteller) predicate.Aussteller {
	return predicate.Aussteller(sql.NotPredicates(p))
}
