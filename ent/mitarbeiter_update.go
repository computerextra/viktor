// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"viktor/ent/abteilung"
	"viktor/ent/einkauf"
	"viktor/ent/mitarbeiter"
	"viktor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MitarbeiterUpdate is the builder for updating Mitarbeiter entities.
type MitarbeiterUpdate struct {
	config
	hooks    []Hook
	mutation *MitarbeiterMutation
}

// Where appends a list predicates to the MitarbeiterUpdate builder.
func (mu *MitarbeiterUpdate) Where(ps ...predicate.Mitarbeiter) *MitarbeiterUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MitarbeiterUpdate) SetName(s string) *MitarbeiterUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableName(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetShort sets the "short" field.
func (mu *MitarbeiterUpdate) SetShort(s string) *MitarbeiterUpdate {
	mu.mutation.SetShort(s)
	return mu
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableShort(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetShort(*s)
	}
	return mu
}

// ClearShort clears the value of the "short" field.
func (mu *MitarbeiterUpdate) ClearShort() *MitarbeiterUpdate {
	mu.mutation.ClearShort()
	return mu
}

// SetImage sets the "image" field.
func (mu *MitarbeiterUpdate) SetImage(b bool) *MitarbeiterUpdate {
	mu.mutation.SetImage(b)
	return mu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableImage(b *bool) *MitarbeiterUpdate {
	if b != nil {
		mu.SetImage(*b)
	}
	return mu
}

// SetSex sets the "sex" field.
func (mu *MitarbeiterUpdate) SetSex(s string) *MitarbeiterUpdate {
	mu.mutation.SetSex(s)
	return mu
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableSex(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetSex(*s)
	}
	return mu
}

// ClearSex clears the value of the "sex" field.
func (mu *MitarbeiterUpdate) ClearSex() *MitarbeiterUpdate {
	mu.mutation.ClearSex()
	return mu
}

// SetFocus sets the "focus" field.
func (mu *MitarbeiterUpdate) SetFocus(s string) *MitarbeiterUpdate {
	mu.mutation.SetFocus(s)
	return mu
}

// SetNillableFocus sets the "focus" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableFocus(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetFocus(*s)
	}
	return mu
}

// ClearFocus clears the value of the "focus" field.
func (mu *MitarbeiterUpdate) ClearFocus() *MitarbeiterUpdate {
	mu.mutation.ClearFocus()
	return mu
}

// SetMail sets the "mail" field.
func (mu *MitarbeiterUpdate) SetMail(s string) *MitarbeiterUpdate {
	mu.mutation.SetMail(s)
	return mu
}

// SetNillableMail sets the "mail" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableMail(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetMail(*s)
	}
	return mu
}

// ClearMail clears the value of the "mail" field.
func (mu *MitarbeiterUpdate) ClearMail() *MitarbeiterUpdate {
	mu.mutation.ClearMail()
	return mu
}

// SetAbteilungId sets the "abteilungId" field.
func (mu *MitarbeiterUpdate) SetAbteilungId(s string) *MitarbeiterUpdate {
	mu.mutation.SetAbteilungId(s)
	return mu
}

// SetNillableAbteilungId sets the "abteilungId" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableAbteilungId(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetAbteilungId(*s)
	}
	return mu
}

// ClearAbteilungId clears the value of the "abteilungId" field.
func (mu *MitarbeiterUpdate) ClearAbteilungId() *MitarbeiterUpdate {
	mu.mutation.ClearAbteilungId()
	return mu
}

// SetEinkaufId sets the "einkaufId" field.
func (mu *MitarbeiterUpdate) SetEinkaufId(s string) *MitarbeiterUpdate {
	mu.mutation.SetEinkaufId(s)
	return mu
}

// SetNillableEinkaufId sets the "einkaufId" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableEinkaufId(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetEinkaufId(*s)
	}
	return mu
}

// ClearEinkaufId clears the value of the "einkaufId" field.
func (mu *MitarbeiterUpdate) ClearEinkaufId() *MitarbeiterUpdate {
	mu.mutation.ClearEinkaufId()
	return mu
}

// SetAzubi sets the "Azubi" field.
func (mu *MitarbeiterUpdate) SetAzubi(b bool) *MitarbeiterUpdate {
	mu.mutation.SetAzubi(b)
	return mu
}

// SetNillableAzubi sets the "Azubi" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableAzubi(b *bool) *MitarbeiterUpdate {
	if b != nil {
		mu.SetAzubi(*b)
	}
	return mu
}

// SetGeburtstag sets the "Geburtstag" field.
func (mu *MitarbeiterUpdate) SetGeburtstag(t time.Time) *MitarbeiterUpdate {
	mu.mutation.SetGeburtstag(t)
	return mu
}

// SetNillableGeburtstag sets the "Geburtstag" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableGeburtstag(t *time.Time) *MitarbeiterUpdate {
	if t != nil {
		mu.SetGeburtstag(*t)
	}
	return mu
}

// ClearGeburtstag clears the value of the "Geburtstag" field.
func (mu *MitarbeiterUpdate) ClearGeburtstag() *MitarbeiterUpdate {
	mu.mutation.ClearGeburtstag()
	return mu
}

// SetGruppenwahl sets the "Gruppenwahl" field.
func (mu *MitarbeiterUpdate) SetGruppenwahl(s string) *MitarbeiterUpdate {
	mu.mutation.SetGruppenwahl(s)
	return mu
}

// SetNillableGruppenwahl sets the "Gruppenwahl" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableGruppenwahl(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetGruppenwahl(*s)
	}
	return mu
}

// ClearGruppenwahl clears the value of the "Gruppenwahl" field.
func (mu *MitarbeiterUpdate) ClearGruppenwahl() *MitarbeiterUpdate {
	mu.mutation.ClearGruppenwahl()
	return mu
}

// SetHomeOffice sets the "HomeOffice" field.
func (mu *MitarbeiterUpdate) SetHomeOffice(s string) *MitarbeiterUpdate {
	mu.mutation.SetHomeOffice(s)
	return mu
}

// SetNillableHomeOffice sets the "HomeOffice" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableHomeOffice(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetHomeOffice(*s)
	}
	return mu
}

// ClearHomeOffice clears the value of the "HomeOffice" field.
func (mu *MitarbeiterUpdate) ClearHomeOffice() *MitarbeiterUpdate {
	mu.mutation.ClearHomeOffice()
	return mu
}

// SetMobilBusiness sets the "Mobil_Business" field.
func (mu *MitarbeiterUpdate) SetMobilBusiness(s string) *MitarbeiterUpdate {
	mu.mutation.SetMobilBusiness(s)
	return mu
}

// SetNillableMobilBusiness sets the "Mobil_Business" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableMobilBusiness(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetMobilBusiness(*s)
	}
	return mu
}

// ClearMobilBusiness clears the value of the "Mobil_Business" field.
func (mu *MitarbeiterUpdate) ClearMobilBusiness() *MitarbeiterUpdate {
	mu.mutation.ClearMobilBusiness()
	return mu
}

// SetMobilPrivat sets the "Mobil_Privat" field.
func (mu *MitarbeiterUpdate) SetMobilPrivat(s string) *MitarbeiterUpdate {
	mu.mutation.SetMobilPrivat(s)
	return mu
}

// SetNillableMobilPrivat sets the "Mobil_Privat" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableMobilPrivat(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetMobilPrivat(*s)
	}
	return mu
}

// ClearMobilPrivat clears the value of the "Mobil_Privat" field.
func (mu *MitarbeiterUpdate) ClearMobilPrivat() *MitarbeiterUpdate {
	mu.mutation.ClearMobilPrivat()
	return mu
}

// SetTelefonBusiness sets the "Telefon_Business" field.
func (mu *MitarbeiterUpdate) SetTelefonBusiness(s string) *MitarbeiterUpdate {
	mu.mutation.SetTelefonBusiness(s)
	return mu
}

// SetNillableTelefonBusiness sets the "Telefon_Business" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableTelefonBusiness(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetTelefonBusiness(*s)
	}
	return mu
}

// ClearTelefonBusiness clears the value of the "Telefon_Business" field.
func (mu *MitarbeiterUpdate) ClearTelefonBusiness() *MitarbeiterUpdate {
	mu.mutation.ClearTelefonBusiness()
	return mu
}

// SetTelefonIntern1 sets the "Telefon_Intern_1" field.
func (mu *MitarbeiterUpdate) SetTelefonIntern1(s string) *MitarbeiterUpdate {
	mu.mutation.SetTelefonIntern1(s)
	return mu
}

// SetNillableTelefonIntern1 sets the "Telefon_Intern_1" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableTelefonIntern1(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetTelefonIntern1(*s)
	}
	return mu
}

// ClearTelefonIntern1 clears the value of the "Telefon_Intern_1" field.
func (mu *MitarbeiterUpdate) ClearTelefonIntern1() *MitarbeiterUpdate {
	mu.mutation.ClearTelefonIntern1()
	return mu
}

// SetTelefonIntern2 sets the "Telefon_Intern_2" field.
func (mu *MitarbeiterUpdate) SetTelefonIntern2(s string) *MitarbeiterUpdate {
	mu.mutation.SetTelefonIntern2(s)
	return mu
}

// SetNillableTelefonIntern2 sets the "Telefon_Intern_2" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableTelefonIntern2(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetTelefonIntern2(*s)
	}
	return mu
}

// ClearTelefonIntern2 clears the value of the "Telefon_Intern_2" field.
func (mu *MitarbeiterUpdate) ClearTelefonIntern2() *MitarbeiterUpdate {
	mu.mutation.ClearTelefonIntern2()
	return mu
}

// SetTelefonPrivat sets the "Telefon_Privat" field.
func (mu *MitarbeiterUpdate) SetTelefonPrivat(s string) *MitarbeiterUpdate {
	mu.mutation.SetTelefonPrivat(s)
	return mu
}

// SetNillableTelefonPrivat sets the "Telefon_Privat" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableTelefonPrivat(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetTelefonPrivat(*s)
	}
	return mu
}

// ClearTelefonPrivat clears the value of the "Telefon_Privat" field.
func (mu *MitarbeiterUpdate) ClearTelefonPrivat() *MitarbeiterUpdate {
	mu.mutation.ClearTelefonPrivat()
	return mu
}

// SetAbteilungID sets the "abteilung" edge to the Abteilung entity by ID.
func (mu *MitarbeiterUpdate) SetAbteilungID(id string) *MitarbeiterUpdate {
	mu.mutation.SetAbteilungID(id)
	return mu
}

// SetNillableAbteilungID sets the "abteilung" edge to the Abteilung entity by ID if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableAbteilungID(id *string) *MitarbeiterUpdate {
	if id != nil {
		mu = mu.SetAbteilungID(*id)
	}
	return mu
}

// SetAbteilung sets the "abteilung" edge to the Abteilung entity.
func (mu *MitarbeiterUpdate) SetAbteilung(a *Abteilung) *MitarbeiterUpdate {
	return mu.SetAbteilungID(a.ID)
}

// SetEinkaufID sets the "einkauf" edge to the Einkauf entity by ID.
func (mu *MitarbeiterUpdate) SetEinkaufID(id string) *MitarbeiterUpdate {
	mu.mutation.SetEinkaufID(id)
	return mu
}

// SetNillableEinkaufID sets the "einkauf" edge to the Einkauf entity by ID if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableEinkaufID(id *string) *MitarbeiterUpdate {
	if id != nil {
		mu = mu.SetEinkaufID(*id)
	}
	return mu
}

// SetEinkauf sets the "einkauf" edge to the Einkauf entity.
func (mu *MitarbeiterUpdate) SetEinkauf(e *Einkauf) *MitarbeiterUpdate {
	return mu.SetEinkaufID(e.ID)
}

// Mutation returns the MitarbeiterMutation object of the builder.
func (mu *MitarbeiterUpdate) Mutation() *MitarbeiterMutation {
	return mu.mutation
}

// ClearAbteilung clears the "abteilung" edge to the Abteilung entity.
func (mu *MitarbeiterUpdate) ClearAbteilung() *MitarbeiterUpdate {
	mu.mutation.ClearAbteilung()
	return mu
}

// ClearEinkauf clears the "einkauf" edge to the Einkauf entity.
func (mu *MitarbeiterUpdate) ClearEinkauf() *MitarbeiterUpdate {
	mu.mutation.ClearEinkauf()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MitarbeiterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MitarbeiterUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MitarbeiterUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MitarbeiterUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MitarbeiterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mitarbeiter.Table, mitarbeiter.Columns, sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(mitarbeiter.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Short(); ok {
		_spec.SetField(mitarbeiter.FieldShort, field.TypeString, value)
	}
	if mu.mutation.ShortCleared() {
		_spec.ClearField(mitarbeiter.FieldShort, field.TypeString)
	}
	if value, ok := mu.mutation.Image(); ok {
		_spec.SetField(mitarbeiter.FieldImage, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Sex(); ok {
		_spec.SetField(mitarbeiter.FieldSex, field.TypeString, value)
	}
	if mu.mutation.SexCleared() {
		_spec.ClearField(mitarbeiter.FieldSex, field.TypeString)
	}
	if value, ok := mu.mutation.Focus(); ok {
		_spec.SetField(mitarbeiter.FieldFocus, field.TypeString, value)
	}
	if mu.mutation.FocusCleared() {
		_spec.ClearField(mitarbeiter.FieldFocus, field.TypeString)
	}
	if value, ok := mu.mutation.Mail(); ok {
		_spec.SetField(mitarbeiter.FieldMail, field.TypeString, value)
	}
	if mu.mutation.MailCleared() {
		_spec.ClearField(mitarbeiter.FieldMail, field.TypeString)
	}
	if value, ok := mu.mutation.Azubi(); ok {
		_spec.SetField(mitarbeiter.FieldAzubi, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Geburtstag(); ok {
		_spec.SetField(mitarbeiter.FieldGeburtstag, field.TypeTime, value)
	}
	if mu.mutation.GeburtstagCleared() {
		_spec.ClearField(mitarbeiter.FieldGeburtstag, field.TypeTime)
	}
	if value, ok := mu.mutation.Gruppenwahl(); ok {
		_spec.SetField(mitarbeiter.FieldGruppenwahl, field.TypeString, value)
	}
	if mu.mutation.GruppenwahlCleared() {
		_spec.ClearField(mitarbeiter.FieldGruppenwahl, field.TypeString)
	}
	if value, ok := mu.mutation.HomeOffice(); ok {
		_spec.SetField(mitarbeiter.FieldHomeOffice, field.TypeString, value)
	}
	if mu.mutation.HomeOfficeCleared() {
		_spec.ClearField(mitarbeiter.FieldHomeOffice, field.TypeString)
	}
	if value, ok := mu.mutation.MobilBusiness(); ok {
		_spec.SetField(mitarbeiter.FieldMobilBusiness, field.TypeString, value)
	}
	if mu.mutation.MobilBusinessCleared() {
		_spec.ClearField(mitarbeiter.FieldMobilBusiness, field.TypeString)
	}
	if value, ok := mu.mutation.MobilPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldMobilPrivat, field.TypeString, value)
	}
	if mu.mutation.MobilPrivatCleared() {
		_spec.ClearField(mitarbeiter.FieldMobilPrivat, field.TypeString)
	}
	if value, ok := mu.mutation.TelefonBusiness(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonBusiness, field.TypeString, value)
	}
	if mu.mutation.TelefonBusinessCleared() {
		_spec.ClearField(mitarbeiter.FieldTelefonBusiness, field.TypeString)
	}
	if value, ok := mu.mutation.TelefonIntern1(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonIntern1, field.TypeString, value)
	}
	if mu.mutation.TelefonIntern1Cleared() {
		_spec.ClearField(mitarbeiter.FieldTelefonIntern1, field.TypeString)
	}
	if value, ok := mu.mutation.TelefonIntern2(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonIntern2, field.TypeString, value)
	}
	if mu.mutation.TelefonIntern2Cleared() {
		_spec.ClearField(mitarbeiter.FieldTelefonIntern2, field.TypeString)
	}
	if value, ok := mu.mutation.TelefonPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonPrivat, field.TypeString, value)
	}
	if mu.mutation.TelefonPrivatCleared() {
		_spec.ClearField(mitarbeiter.FieldTelefonPrivat, field.TypeString)
	}
	if mu.mutation.AbteilungCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mitarbeiter.AbteilungTable,
			Columns: []string{mitarbeiter.AbteilungColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abteilung.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AbteilungIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mitarbeiter.AbteilungTable,
			Columns: []string{mitarbeiter.AbteilungColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abteilung.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.EinkaufCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mitarbeiter.EinkaufTable,
			Columns: []string{mitarbeiter.EinkaufColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(einkauf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.EinkaufIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mitarbeiter.EinkaufTable,
			Columns: []string{mitarbeiter.EinkaufColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(einkauf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mitarbeiter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MitarbeiterUpdateOne is the builder for updating a single Mitarbeiter entity.
type MitarbeiterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MitarbeiterMutation
}

// SetName sets the "name" field.
func (muo *MitarbeiterUpdateOne) SetName(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableName(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetShort sets the "short" field.
func (muo *MitarbeiterUpdateOne) SetShort(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetShort(s)
	return muo
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableShort(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetShort(*s)
	}
	return muo
}

// ClearShort clears the value of the "short" field.
func (muo *MitarbeiterUpdateOne) ClearShort() *MitarbeiterUpdateOne {
	muo.mutation.ClearShort()
	return muo
}

// SetImage sets the "image" field.
func (muo *MitarbeiterUpdateOne) SetImage(b bool) *MitarbeiterUpdateOne {
	muo.mutation.SetImage(b)
	return muo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableImage(b *bool) *MitarbeiterUpdateOne {
	if b != nil {
		muo.SetImage(*b)
	}
	return muo
}

// SetSex sets the "sex" field.
func (muo *MitarbeiterUpdateOne) SetSex(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetSex(s)
	return muo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableSex(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetSex(*s)
	}
	return muo
}

// ClearSex clears the value of the "sex" field.
func (muo *MitarbeiterUpdateOne) ClearSex() *MitarbeiterUpdateOne {
	muo.mutation.ClearSex()
	return muo
}

// SetFocus sets the "focus" field.
func (muo *MitarbeiterUpdateOne) SetFocus(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetFocus(s)
	return muo
}

// SetNillableFocus sets the "focus" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableFocus(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetFocus(*s)
	}
	return muo
}

// ClearFocus clears the value of the "focus" field.
func (muo *MitarbeiterUpdateOne) ClearFocus() *MitarbeiterUpdateOne {
	muo.mutation.ClearFocus()
	return muo
}

// SetMail sets the "mail" field.
func (muo *MitarbeiterUpdateOne) SetMail(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetMail(s)
	return muo
}

// SetNillableMail sets the "mail" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableMail(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetMail(*s)
	}
	return muo
}

// ClearMail clears the value of the "mail" field.
func (muo *MitarbeiterUpdateOne) ClearMail() *MitarbeiterUpdateOne {
	muo.mutation.ClearMail()
	return muo
}

// SetAbteilungId sets the "abteilungId" field.
func (muo *MitarbeiterUpdateOne) SetAbteilungId(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetAbteilungId(s)
	return muo
}

// SetNillableAbteilungId sets the "abteilungId" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableAbteilungId(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetAbteilungId(*s)
	}
	return muo
}

// ClearAbteilungId clears the value of the "abteilungId" field.
func (muo *MitarbeiterUpdateOne) ClearAbteilungId() *MitarbeiterUpdateOne {
	muo.mutation.ClearAbteilungId()
	return muo
}

// SetEinkaufId sets the "einkaufId" field.
func (muo *MitarbeiterUpdateOne) SetEinkaufId(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetEinkaufId(s)
	return muo
}

// SetNillableEinkaufId sets the "einkaufId" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableEinkaufId(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetEinkaufId(*s)
	}
	return muo
}

// ClearEinkaufId clears the value of the "einkaufId" field.
func (muo *MitarbeiterUpdateOne) ClearEinkaufId() *MitarbeiterUpdateOne {
	muo.mutation.ClearEinkaufId()
	return muo
}

// SetAzubi sets the "Azubi" field.
func (muo *MitarbeiterUpdateOne) SetAzubi(b bool) *MitarbeiterUpdateOne {
	muo.mutation.SetAzubi(b)
	return muo
}

// SetNillableAzubi sets the "Azubi" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableAzubi(b *bool) *MitarbeiterUpdateOne {
	if b != nil {
		muo.SetAzubi(*b)
	}
	return muo
}

// SetGeburtstag sets the "Geburtstag" field.
func (muo *MitarbeiterUpdateOne) SetGeburtstag(t time.Time) *MitarbeiterUpdateOne {
	muo.mutation.SetGeburtstag(t)
	return muo
}

// SetNillableGeburtstag sets the "Geburtstag" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableGeburtstag(t *time.Time) *MitarbeiterUpdateOne {
	if t != nil {
		muo.SetGeburtstag(*t)
	}
	return muo
}

// ClearGeburtstag clears the value of the "Geburtstag" field.
func (muo *MitarbeiterUpdateOne) ClearGeburtstag() *MitarbeiterUpdateOne {
	muo.mutation.ClearGeburtstag()
	return muo
}

// SetGruppenwahl sets the "Gruppenwahl" field.
func (muo *MitarbeiterUpdateOne) SetGruppenwahl(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetGruppenwahl(s)
	return muo
}

// SetNillableGruppenwahl sets the "Gruppenwahl" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableGruppenwahl(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetGruppenwahl(*s)
	}
	return muo
}

// ClearGruppenwahl clears the value of the "Gruppenwahl" field.
func (muo *MitarbeiterUpdateOne) ClearGruppenwahl() *MitarbeiterUpdateOne {
	muo.mutation.ClearGruppenwahl()
	return muo
}

// SetHomeOffice sets the "HomeOffice" field.
func (muo *MitarbeiterUpdateOne) SetHomeOffice(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetHomeOffice(s)
	return muo
}

// SetNillableHomeOffice sets the "HomeOffice" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableHomeOffice(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetHomeOffice(*s)
	}
	return muo
}

// ClearHomeOffice clears the value of the "HomeOffice" field.
func (muo *MitarbeiterUpdateOne) ClearHomeOffice() *MitarbeiterUpdateOne {
	muo.mutation.ClearHomeOffice()
	return muo
}

// SetMobilBusiness sets the "Mobil_Business" field.
func (muo *MitarbeiterUpdateOne) SetMobilBusiness(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetMobilBusiness(s)
	return muo
}

// SetNillableMobilBusiness sets the "Mobil_Business" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableMobilBusiness(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetMobilBusiness(*s)
	}
	return muo
}

// ClearMobilBusiness clears the value of the "Mobil_Business" field.
func (muo *MitarbeiterUpdateOne) ClearMobilBusiness() *MitarbeiterUpdateOne {
	muo.mutation.ClearMobilBusiness()
	return muo
}

// SetMobilPrivat sets the "Mobil_Privat" field.
func (muo *MitarbeiterUpdateOne) SetMobilPrivat(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetMobilPrivat(s)
	return muo
}

// SetNillableMobilPrivat sets the "Mobil_Privat" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableMobilPrivat(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetMobilPrivat(*s)
	}
	return muo
}

// ClearMobilPrivat clears the value of the "Mobil_Privat" field.
func (muo *MitarbeiterUpdateOne) ClearMobilPrivat() *MitarbeiterUpdateOne {
	muo.mutation.ClearMobilPrivat()
	return muo
}

// SetTelefonBusiness sets the "Telefon_Business" field.
func (muo *MitarbeiterUpdateOne) SetTelefonBusiness(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetTelefonBusiness(s)
	return muo
}

// SetNillableTelefonBusiness sets the "Telefon_Business" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableTelefonBusiness(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetTelefonBusiness(*s)
	}
	return muo
}

// ClearTelefonBusiness clears the value of the "Telefon_Business" field.
func (muo *MitarbeiterUpdateOne) ClearTelefonBusiness() *MitarbeiterUpdateOne {
	muo.mutation.ClearTelefonBusiness()
	return muo
}

// SetTelefonIntern1 sets the "Telefon_Intern_1" field.
func (muo *MitarbeiterUpdateOne) SetTelefonIntern1(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetTelefonIntern1(s)
	return muo
}

// SetNillableTelefonIntern1 sets the "Telefon_Intern_1" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableTelefonIntern1(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetTelefonIntern1(*s)
	}
	return muo
}

// ClearTelefonIntern1 clears the value of the "Telefon_Intern_1" field.
func (muo *MitarbeiterUpdateOne) ClearTelefonIntern1() *MitarbeiterUpdateOne {
	muo.mutation.ClearTelefonIntern1()
	return muo
}

// SetTelefonIntern2 sets the "Telefon_Intern_2" field.
func (muo *MitarbeiterUpdateOne) SetTelefonIntern2(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetTelefonIntern2(s)
	return muo
}

// SetNillableTelefonIntern2 sets the "Telefon_Intern_2" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableTelefonIntern2(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetTelefonIntern2(*s)
	}
	return muo
}

// ClearTelefonIntern2 clears the value of the "Telefon_Intern_2" field.
func (muo *MitarbeiterUpdateOne) ClearTelefonIntern2() *MitarbeiterUpdateOne {
	muo.mutation.ClearTelefonIntern2()
	return muo
}

// SetTelefonPrivat sets the "Telefon_Privat" field.
func (muo *MitarbeiterUpdateOne) SetTelefonPrivat(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetTelefonPrivat(s)
	return muo
}

// SetNillableTelefonPrivat sets the "Telefon_Privat" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableTelefonPrivat(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetTelefonPrivat(*s)
	}
	return muo
}

// ClearTelefonPrivat clears the value of the "Telefon_Privat" field.
func (muo *MitarbeiterUpdateOne) ClearTelefonPrivat() *MitarbeiterUpdateOne {
	muo.mutation.ClearTelefonPrivat()
	return muo
}

// SetAbteilungID sets the "abteilung" edge to the Abteilung entity by ID.
func (muo *MitarbeiterUpdateOne) SetAbteilungID(id string) *MitarbeiterUpdateOne {
	muo.mutation.SetAbteilungID(id)
	return muo
}

// SetNillableAbteilungID sets the "abteilung" edge to the Abteilung entity by ID if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableAbteilungID(id *string) *MitarbeiterUpdateOne {
	if id != nil {
		muo = muo.SetAbteilungID(*id)
	}
	return muo
}

// SetAbteilung sets the "abteilung" edge to the Abteilung entity.
func (muo *MitarbeiterUpdateOne) SetAbteilung(a *Abteilung) *MitarbeiterUpdateOne {
	return muo.SetAbteilungID(a.ID)
}

// SetEinkaufID sets the "einkauf" edge to the Einkauf entity by ID.
func (muo *MitarbeiterUpdateOne) SetEinkaufID(id string) *MitarbeiterUpdateOne {
	muo.mutation.SetEinkaufID(id)
	return muo
}

// SetNillableEinkaufID sets the "einkauf" edge to the Einkauf entity by ID if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableEinkaufID(id *string) *MitarbeiterUpdateOne {
	if id != nil {
		muo = muo.SetEinkaufID(*id)
	}
	return muo
}

// SetEinkauf sets the "einkauf" edge to the Einkauf entity.
func (muo *MitarbeiterUpdateOne) SetEinkauf(e *Einkauf) *MitarbeiterUpdateOne {
	return muo.SetEinkaufID(e.ID)
}

// Mutation returns the MitarbeiterMutation object of the builder.
func (muo *MitarbeiterUpdateOne) Mutation() *MitarbeiterMutation {
	return muo.mutation
}

// ClearAbteilung clears the "abteilung" edge to the Abteilung entity.
func (muo *MitarbeiterUpdateOne) ClearAbteilung() *MitarbeiterUpdateOne {
	muo.mutation.ClearAbteilung()
	return muo
}

// ClearEinkauf clears the "einkauf" edge to the Einkauf entity.
func (muo *MitarbeiterUpdateOne) ClearEinkauf() *MitarbeiterUpdateOne {
	muo.mutation.ClearEinkauf()
	return muo
}

// Where appends a list predicates to the MitarbeiterUpdate builder.
func (muo *MitarbeiterUpdateOne) Where(ps ...predicate.Mitarbeiter) *MitarbeiterUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MitarbeiterUpdateOne) Select(field string, fields ...string) *MitarbeiterUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mitarbeiter entity.
func (muo *MitarbeiterUpdateOne) Save(ctx context.Context) (*Mitarbeiter, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MitarbeiterUpdateOne) SaveX(ctx context.Context) *Mitarbeiter {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MitarbeiterUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MitarbeiterUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MitarbeiterUpdateOne) sqlSave(ctx context.Context) (_node *Mitarbeiter, err error) {
	_spec := sqlgraph.NewUpdateSpec(mitarbeiter.Table, mitarbeiter.Columns, sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Mitarbeiter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mitarbeiter.FieldID)
		for _, f := range fields {
			if !mitarbeiter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mitarbeiter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(mitarbeiter.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Short(); ok {
		_spec.SetField(mitarbeiter.FieldShort, field.TypeString, value)
	}
	if muo.mutation.ShortCleared() {
		_spec.ClearField(mitarbeiter.FieldShort, field.TypeString)
	}
	if value, ok := muo.mutation.Image(); ok {
		_spec.SetField(mitarbeiter.FieldImage, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Sex(); ok {
		_spec.SetField(mitarbeiter.FieldSex, field.TypeString, value)
	}
	if muo.mutation.SexCleared() {
		_spec.ClearField(mitarbeiter.FieldSex, field.TypeString)
	}
	if value, ok := muo.mutation.Focus(); ok {
		_spec.SetField(mitarbeiter.FieldFocus, field.TypeString, value)
	}
	if muo.mutation.FocusCleared() {
		_spec.ClearField(mitarbeiter.FieldFocus, field.TypeString)
	}
	if value, ok := muo.mutation.Mail(); ok {
		_spec.SetField(mitarbeiter.FieldMail, field.TypeString, value)
	}
	if muo.mutation.MailCleared() {
		_spec.ClearField(mitarbeiter.FieldMail, field.TypeString)
	}
	if value, ok := muo.mutation.Azubi(); ok {
		_spec.SetField(mitarbeiter.FieldAzubi, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Geburtstag(); ok {
		_spec.SetField(mitarbeiter.FieldGeburtstag, field.TypeTime, value)
	}
	if muo.mutation.GeburtstagCleared() {
		_spec.ClearField(mitarbeiter.FieldGeburtstag, field.TypeTime)
	}
	if value, ok := muo.mutation.Gruppenwahl(); ok {
		_spec.SetField(mitarbeiter.FieldGruppenwahl, field.TypeString, value)
	}
	if muo.mutation.GruppenwahlCleared() {
		_spec.ClearField(mitarbeiter.FieldGruppenwahl, field.TypeString)
	}
	if value, ok := muo.mutation.HomeOffice(); ok {
		_spec.SetField(mitarbeiter.FieldHomeOffice, field.TypeString, value)
	}
	if muo.mutation.HomeOfficeCleared() {
		_spec.ClearField(mitarbeiter.FieldHomeOffice, field.TypeString)
	}
	if value, ok := muo.mutation.MobilBusiness(); ok {
		_spec.SetField(mitarbeiter.FieldMobilBusiness, field.TypeString, value)
	}
	if muo.mutation.MobilBusinessCleared() {
		_spec.ClearField(mitarbeiter.FieldMobilBusiness, field.TypeString)
	}
	if value, ok := muo.mutation.MobilPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldMobilPrivat, field.TypeString, value)
	}
	if muo.mutation.MobilPrivatCleared() {
		_spec.ClearField(mitarbeiter.FieldMobilPrivat, field.TypeString)
	}
	if value, ok := muo.mutation.TelefonBusiness(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonBusiness, field.TypeString, value)
	}
	if muo.mutation.TelefonBusinessCleared() {
		_spec.ClearField(mitarbeiter.FieldTelefonBusiness, field.TypeString)
	}
	if value, ok := muo.mutation.TelefonIntern1(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonIntern1, field.TypeString, value)
	}
	if muo.mutation.TelefonIntern1Cleared() {
		_spec.ClearField(mitarbeiter.FieldTelefonIntern1, field.TypeString)
	}
	if value, ok := muo.mutation.TelefonIntern2(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonIntern2, field.TypeString, value)
	}
	if muo.mutation.TelefonIntern2Cleared() {
		_spec.ClearField(mitarbeiter.FieldTelefonIntern2, field.TypeString)
	}
	if value, ok := muo.mutation.TelefonPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldTelefonPrivat, field.TypeString, value)
	}
	if muo.mutation.TelefonPrivatCleared() {
		_spec.ClearField(mitarbeiter.FieldTelefonPrivat, field.TypeString)
	}
	if muo.mutation.AbteilungCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mitarbeiter.AbteilungTable,
			Columns: []string{mitarbeiter.AbteilungColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abteilung.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AbteilungIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mitarbeiter.AbteilungTable,
			Columns: []string{mitarbeiter.AbteilungColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abteilung.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.EinkaufCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mitarbeiter.EinkaufTable,
			Columns: []string{mitarbeiter.EinkaufColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(einkauf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.EinkaufIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mitarbeiter.EinkaufTable,
			Columns: []string{mitarbeiter.EinkaufColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(einkauf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Mitarbeiter{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mitarbeiter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
