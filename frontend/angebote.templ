package frontend

import (
	"fmt"
	"github.com/computerextra/viktor/db"
	"time"
)

templ AngeboteOverview(angebote []db.AngebotModel, uri string) {
	@Page("CMS | Abteilungen", uri) {
		<div class="container mx-auto mt-10">
			@BackButton("/CMS")
			<h1 class="text-center">CMS - Abteilungen</h1>
			<a
				class="py-3 px-4 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none"
				href="/CMS/Angebote/Neu"
			>
				Neues Angebot anlegen
			</a>
			<div class="flex flex-col mt-5 mx-auto">
				<div class="-m-1.5 overflow-x-auto">
					<div class="p-1.5 min-w-full inline-block align-middle">
						<div class="overflow-hidden">
							<table class="min-w-full divide-y divide-gray-200 dark:divide-neutral-700">
								<thead>
									<tr>
										<th
											scope="col"
											class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500"
										>
											Titel
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500"
										>
											Sub Title
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500"
										>
											URL
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500"
										>
											Start
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500"
										>
											Ende
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500"
										>
											Bild
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500"
										>
											Online
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-end text-xs font-medium text-gray-500 uppercase dark:text-neutral-500"
										>
											Action
										</th>
									</tr>
								</thead>
								<tbody class="divide-y divide-gray-200 dark:divide-neutral-700">
									for _, angebot := range angebote {
										@angebotRow(angebot)
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ angebotRow(angebot db.AngebotModel) {
	{{
		loc, _ := time.LoadLocation("Europe/Berlin")

		subtitle, subtitleOk := angebot.Subtitle()

		dateStart := time.Date(angebot.DateStart.Year(), angebot.DateStart.Month(), angebot.DateStart.Day(), 0, 0, 0, 0, loc).Format("02.01.2006")
		dateStop := time.Date(angebot.DateStop.Year(), angebot.DateStop.Month(), angebot.DateStop.Day(), 0, 0, 0, 0, loc).Format("02.01.2006")
	}}
	<tr class="hover:bg-gray-100 dark:hover:bg-neutral-700">
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800 dark:text-neutral-200">
			<a href={ templ.SafeURL(fmt.Sprintf("/CMS/Angebote/%s", angebot.ID)) }>
				{ angebot.Title }
			</a>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800 dark:text-neutral-200">
			if subtitleOk {
				{ subtitle }
			} else {
				"-"
			}
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800 dark:text-neutral-200">
			<div class="hs-tooltip inline-block">
				<div class="max-w-[200px] overflow-hidden hs-tooltip-toggle">
					<a href={ templ.SafeURL(angebot.Link) } target="_blank" rel="noopener noreferrer" class="text-ellipsis">
						{ angebot.Link }
					</a>
				</div>
				<span class="hs-tooltip-content hs-tooltip-shown:opacity-100 hs-tooltip-shown:visible opacity-0 transition-opacity inline-block absolute invisible z-10 py-1 px-2 bg-gray-900 text-xs font-medium text-white rounded-md shadow-2xs dark:bg-neutral-700" role="tooltip">
					{ angebot.Link }
				</span>
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800 dark:text-neutral-200">
			{ dateStart }
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800 dark:text-neutral-200">
			{ dateStop }
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800 dark:text-neutral-200">
			{ angebot.Image }
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800 dark:text-neutral-200">
			if angebot.Anzeigen {
				@Yes()
			} else {
				@No()
			}
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-end text-sm font-medium">
			<div class="hs-dropdown relative inline-flex">
				<button id="hs-dropdown-custom-icon-trigger" type="button" class="hs-dropdown-toggle flex justify-center items-center size-9 text-sm font-semibold rounded-lg border border-gray-200 bg-white text-gray-800 shadow-2xs hover:bg-gray-50 focus:outline-hidden focus:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-white dark:hover:bg-neutral-800 dark:focus:bg-neutral-800" aria-haspopup="menu" aria-expanded="false" aria-label="Dropdown">
					<svg class="flex-none size-4 text-gray-600 dark:text-neutral-500" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle></svg>
				</button>
				<div class="z-50 hs-dropdown-menu transition-[opacity,margin] duration hs-dropdown-open:opacity-100 opacity-0 hidden min-w-60 bg-white shadow-md rounded-lg mt-2 dark:bg-neutral-800 dark:border dark:border-neutral-700" role="menu" aria-orientation="vertical" aria-labelledby="hs-dropdown-custom-icon-trigger">
					<div class="p-1 space-y-0.5">
						<a
							class="flex items-center gap-x-3.5 py-2 px-3 rounded-lg text-sm text-gray-800 hover:bg-gray-100 focus:outline-hidden focus:bg-gray-100 dark:text-neutral-400 dark:hover:bg-neutral-700 dark:hover:text-neutral-300 dark:focus:bg-neutral-700"
							href={ templ.SafeURL(fmt.Sprintf("/CMS/Angebote/%s", angebot.ID)) }
						>
							Bearbeiten
						</a>
						<div class="p-1 space-y-0.5">
							<form action={ templ.SafeURL(fmt.Sprintf("/CMS/Angebote/%s/Toggle", angebot.ID)) } method="post">
								<button
									type="submit"
									class="flex items-center gap-x-3.5 py-2 px-3 rounded-lg text-sm text-gray-800 hover:bg-gray-100 focus:outline-hidden focus:bg-gray-100 dark:text-neutral-400 dark:hover:bg-neutral-700 dark:hover:text-neutral-300 dark:focus:bg-neutral-700"
								>
									Toggle Online
								</button>
							</form>
						</div>
						<div class="p-1 space-y-0.5">
							<form action={ templ.SafeURL(fmt.Sprintf("/CMS/Angebote/%s/Delete", angebot.ID)) } method="post">
								<button
									type="submit"
									class="flex items-center gap-x-3.5 py-2 px-3 rounded-lg text-sm text-gray-800 hover:bg-gray-100 focus:outline-hidden focus:bg-gray-100 dark:text-neutral-400 dark:hover:bg-neutral-700 dark:hover:text-neutral-300 dark:focus:bg-neutral-700"
								>
									LÃ¶schen
								</button>
							</form>
						</div>
					</div>
				</div>
			</div>
		</td>
	</tr>
}

templ NeuesAngebot(uri string) {
	@Page("Neues Angebot", uri) {
		<div class="container mx-auto mt-5">
			@BackButton("/CMS/Angebote")
			<h1 class="text-center">Neues Angebot anlegen</h1>
			@AngebotForm(nil)
		</div>
	}
}

templ AngebotBearbeiten(angebot db.AngebotModel, uri string) {
	@Page("Angebot bearbeiten", uri) {
		<div class="container mx-auto mt-5">
			@BackButton("/CMS/Angebote")
			<h1 class="text-center">{ angebot.Title } bearbeiten</h1>
			@AngebotForm(&angebot)
		</div>
	}
}

templ AngebotForm(angebot *db.AngebotModel) {
	{{
	var action string
	var SubTitle string
	if angebot == nil {
		action = "/CMS/Angebote/Neu"
	} else {
		action = fmt.Sprintf("/CMS/Angebote/%s", angebot.ID)
		sub, ok := angebot.Subtitle()
		if ok {
			SubTitle = sub
		}
	}
	}}
	<form action={ templ.SafeURL(action) } method="post" class="space-y-8 mt-10">
		<!-- Titel -->
		<div class="max-w-sm">
			<label
				for="title"
				class="block text-sm font-medium mb-2 dark:text-white"
			>Titel</label>
			if angebot == nil {
				<input
					type="text"
					required
					id="title"
					name="title"
					class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600"
					placeholder="Titel"
				/>
			} else {
				<input
					type="text"
					required
					id="title"
					name="title"
					value={ angebot.Title }
					class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600"
					placeholder="Titel"
				/>
			}
		</div>
		<!-- SubTitle -->
		<div class="max-w-sm">
			<label
				for="subtitle"
				class="block text-sm font-medium mb-2 dark:text-white"
			>SubTitle</label>
			if angebot == nil {
				<input
					type="text"
					id="subtitle"
					name="subtitle"
					class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600"
					placeholder="SubTitle"
				/>
			} else {
				<input
					type="text"
					id="subtitle"
					name="subtitle"
					value={ SubTitle }
					class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600"
					placeholder="SubTitle"
				/>
			}
		</div>
		<!-- Image -->
		<div class="max-w-sm">
			<label
				for="image"
				class="block text-sm font-medium mb-2 dark:text-white"
			>Image</label>
			if angebot == nil {
				<input
					type="text"
					required
					id="image"
					name="image"
					class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600"
					placeholder="Image"
				/>
			} else {
				<input
					type="text"
					required
					id="image"
					name="image"
					value={ angebot.Image }
					class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600"
					placeholder="Image"
				/>
			}
		</div>
		<!-- Link -->
		<div class="max-w-sm">
			<label
				for="link"
				class="block text-sm font-medium mb-2 dark:text-white"
			>Link</label>
			if angebot == nil {
				<input
					type="text"
					required
					id="link"
					name="link"
					class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600"
					placeholder="Link"
				/>
			} else {
				<input
					type="text"
					required
					id="link"
					name="link"
					value={ angebot.Link }
					class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600"
					placeholder="Link"
				/>
			}
		</div>
		<div class="flex flex-row justify-between max-w-sm">
			{{
			loc, _ := time.LoadLocation("Europe/Berlin")
			}}
			<!-- Start -->
			<div class="max-w-32">
				<label
					for="date_start"
					class="block text-sm font-medium mb-2 dark:text-white"
				>Start</label>
				if angebot == nil {
					<input
						type="date"
						name="date_start"
						id="date_start"
						required
						class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-200 dark:placeholder-neutral-400 dark:focus:ring-neutral-600"
						placeholder="Start Zeit"
					/>
				} else {
					{{
						start := time.Date(angebot.DateStart.Year(), angebot.DateStart.Month(), angebot.DateStart.Day(), 0, 0, 0, 0, loc)
					}}
					<input
						type="date"
						name="date_start"
						id="date_start"
						required
						class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-200 dark:placeholder-neutral-400 dark:focus:ring-neutral-600"
						placeholder="Start Zeit"
						value={ start.Format("2006-01-02") }
					/>
				}
			</div>
			<!-- Stop -->
			<div class="max-w-32">
				<label
					for="date_stop"
					class="block text-sm font-medium mb-2 dark:text-white"
				>Ende</label>
				if angebot == nil {
					<input
						type="date"
						required
						id="date_stop"
						name="date_stop"
						class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-200 dark:placeholder-neutral-400 dark:focus:ring-neutral-600"
						placeholder="Ende Zeit"
					/>
				} else {
					{{
						end := time.Date(angebot.DateStop.Year(), angebot.DateStop.Month(), angebot.DateStop.Day(), 0, 0, 0, 0, loc)
					}}
					<input
						type="date"
						required
						id="date_stop"
						name="date_stop"
						value={ end.Format("2006-01-02") }
						class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-200 dark:placeholder-neutral-400 dark:focus:ring-neutral-600"
						placeholder="Ende Zeit"
					/>
				}
			</div>
		</div>
		<!-- Online -->
		<div class="flex items-center gap-x-3">
			<label for="anzeigen" class="relative inline-block w-13 h-7 cursor-pointer">
				if angebot != nil && angebot.Anzeigen {
					<input
						type="checkbox"
						id="anzeigen"
						checked
						name="anzeigen"
						class="peer sr-only"
					/>
				} else {
					<input
						type="checkbox"
						id="anzeigen"
						name="anzeigen"
						class="peer sr-only"
					/>
				}
				<span class="absolute inset-0 bg-gray-200 rounded-full transition-colors duration-200 ease-in-out peer-checked:bg-blue-600 dark:bg-neutral-700 dark:peer-checked:bg-blue-500 peer-disabled:opacity-50 peer-disabled:pointer-events-none"></span>
				<span class="absolute top-1/2 start-0.5 -translate-y-1/2 size-6 bg-white rounded-full shadow-xs transition-transform duration-200 ease-in-out peer-checked:translate-x-full dark:bg-neutral-400 dark:peer-checked:bg-white"></span>
				<!-- Left Icon (Off) -->
				<span class="absolute top-1/2 start-1 -translate-y-1/2 flex justify-center items-center size-5 text-gray-500 peer-checked:text-white transition-colors duration-200 dark:text-neutral-500">
					<svg class="shrink-0 size-3" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
						<path d="M18 6 6 18"></path>
						<path d="m6 6 12 12"></path>
					</svg>
				</span>
				<!-- Right Icon (On) -->
				<span class="absolute top-1/2 end-1 -translate-y-1/2 flex justify-center items-center size-5 text-gray-500 peer-checked:text-blue-600 transition-colors duration-200 dark:text-neutral-500">
					<svg class="shrink-0 size-3" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
						<polyline points="20 6 9 17 4 12"></polyline>
					</svg>
				</span>
			</label>
			<label
				for="anzeigen"
				class="text-sm text-gray-500 dark:text-neutral-400"
			>Auf Webseite anzeigen?</label>
		</div>
		<button
			type="submit"
			class="py-3 px-4 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none"
		>
			Speichern
		</button>
	</form>
}
